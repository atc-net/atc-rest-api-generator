using System.CodeDom.Compiler;
using System.Collections.Generic;
using System.Net;
using System.Net.Http;
using System.Text;
using System.Threading.Tasks;
using Demo.Api.Generated.Contracts.Items;
using FluentAssertions;
using Xunit;

//------------------------------------------------------------------------------
// This code was auto-generated by ApiGenerator 1.1.124.0.
//
// Changes to this file may cause incorrect behavior and will be lost if
// the code is regenerated.
//------------------------------------------------------------------------------
namespace Demo.Api.Tests.Endpoints.Items.Generated
{
    [GeneratedCode("ApiGenerator", "1.1.124.0")]
    [Collection("Sequential-Endpoints")]
    public class CreateItemTests : WebApiControllerBaseTest
    {
        public CreateItemTests(WebApiStartupFactory fixture) : base(fixture) { }

        [Theory]
        [InlineData("/api/v1/items")]
        public async Task CreateItem_Ok(string relativeRef)
        {
            // Arrange
            var data = new CreateItemRequest
            {
                Item = new Item
                {
                    Name = "Hallo1",
                },
                MyItems = new List<Item>
                {
                    new Item
                    {
                        Name = "Hallo11",
                    },
                    new Item
                    {
                        Name = "Hallo21",
                    },
                    new Item
                    {
                        Name = "Hallo31",
                    },
                },
            };

            // Act
            var response = await HttpClient.PostAsync(relativeRef, ToJson(data));

            // Assert
            response.Should().NotBeNull();
            response.StatusCode.Should().Be(HttpStatusCode.OK);
        }

        [Theory]
        [InlineData("/api/v1/items")]
        public async Task CreateItem_BadRequest_InBody_Item(string relativeRef)
        {
            // Arrange
            var sb = new StringBuilder();
            sb.AppendLine("{");
            sb.AppendLine("  \"Item\": null,");
            sb.AppendLine("  \"MyItems\": [");
            sb.AppendLine("  {");
            sb.AppendLine("    \"Name\": \"Hallo11\"");
            sb.AppendLine("  },");
            sb.AppendLine("  {");
            sb.AppendLine("    \"Name\": \"Hallo21\"");
            sb.AppendLine("  },");
            sb.AppendLine("  {");
            sb.AppendLine("    \"Name\": \"Hallo31\"");
            sb.AppendLine("  }");
            sb.AppendLine("  ]");
            sb.AppendLine("}");
            var data = sb.ToString();

            // Act
            var response = await HttpClient.PostAsync(relativeRef, Json(data));

            // Assert
            response.Should().NotBeNull();
            response.StatusCode.Should().Be(HttpStatusCode.BadRequest);
        }
    }
}