using System.CodeDom.Compiler;
using System.Net;
using System.Net.Http;
using System.Threading.Tasks;
using Demo.Api.Generated.Contracts.Accounts;
using FluentAssertions;
using Xunit;

//------------------------------------------------------------------------------
// This code was auto-generated by ApiGenerator 2.0.121.412.
//
// Changes to this file may cause incorrect behavior and will be lost if
// the code is regenerated.
//------------------------------------------------------------------------------
namespace Demo.Api.Tests.Endpoints.Accounts.Generated
{
    [GeneratedCode("ApiGenerator", "2.0.121.412")]
    [Collection("Sequential-Endpoints")]
    public class SetAccountNameTests : WebApiControllerBaseTest
    {
        public SetAccountNameTests(WebApiStartupFactory fixture) : base(fixture) { }

        [Theory]
        [InlineData("/api/v1/accounts/77a33260-0000-441f-ba60-b0a833803fab/name")]
        public async Task SetAccountName_Ok(string relativeRef)
        {
            // Arrange
            var data = new UpdateAccountRequest
            {
                Name = "Hallo1",
            };

            // Act
            var response = await HttpClient.PostAsync(relativeRef, ToJson(data));

            // Assert
            response.Should().NotBeNull();
            response.StatusCode.Should().Be(HttpStatusCode.OK);
        }

        [Theory]
        [InlineData("/api/v1/accounts/x77a33260-0000-441f-ba60-b0a833803fab/name")]
        public async Task SetAccountName_BadRequest_InPath(string relativeRef)
        {
            // Arrange
            var data = new UpdateAccountRequest
            {
                Name = "Hallo1",
            };

            // Act
            var response = await HttpClient.PostAsync(relativeRef, ToJson(data));

            // Assert
            response.Should().NotBeNull();
            response.StatusCode.Should().Be(HttpStatusCode.BadRequest);
        }
    }
}