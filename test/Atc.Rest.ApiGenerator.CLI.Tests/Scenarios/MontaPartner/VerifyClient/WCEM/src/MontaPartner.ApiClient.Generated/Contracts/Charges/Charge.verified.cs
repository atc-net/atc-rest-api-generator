//------------------------------------------------------------------------------
// This code was auto-generated by ApiGenerator x.x.x.x.
//
// Changes to this file may cause incorrect behavior and will be lost if
// the code is regenerated.
//------------------------------------------------------------------------------
namespace MontaPartner.ApiClient.Generated.Contracts.Charges;

/// <summary>
/// Charge.
/// </summary>
[GeneratedCode("ApiGenerator", "x.x.x.x")]
public class Charge
{
    /// <summary>
    /// Id of the charge.
    /// </summary>
    public long Id { get; set; }

    [Required]
    public PublicUser User { get; set; }

    public SimpleTeamMemberDto? TeamMember { get; set; }

    [Required]
    public ChargeType Type { get; set; }

    /// <summary>
    /// Id of the charge point related to this charge.
    /// </summary>
    public long ChargePointId { get; set; }

    [Required]
    public PublicChargePoint PublicChargePoint { get; set; }

    /// <summary>
    /// Id of the sponsored charge point related to this charge.
    /// </summary>
    public long? SponsoredChargePointId { get; set; }

    /// <summary>
    /// Id of the price group related to this charge. Note: The underlying price/costGroup models can change and you have
    /// to use other fields to get the historic data (costBreakdown, priceBreakdown, price).
    /// </summary>
    public long PriceGroupId { get; set; }

    /// <summary>
    /// Id of the cost price group related to this charge.
    /// </summary>
    public long? CostPriceGroupId { get; set; }

    /// <summary>
    /// Id of the site in which the charge point that performed this charge is.
    /// </summary>
    public long? SiteId { get; set; }

    /// <summary>
    /// Creation date.
    /// </summary>
    [Required]
    public DateTimeOffset CreatedAt { get; set; }

    /// <summary>
    /// Update date.
    /// </summary>
    [Required]
    public DateTimeOffset UpdatedAt { get; set; }

    /// <summary>
    /// Date when cable was plugged in.
    /// </summary>
    public DateTimeOffset? CablePluggedInAt { get; set; }

    /// <summary>
    /// Date when charge started.
    /// </summary>
    public DateTimeOffset? StartedAt { get; set; }

    /// <summary>
    /// Date when charge stopped.
    /// </summary>
    public DateTimeOffset? StoppedAt { get; set; }

    /// <summary>
    /// Date when EV was fully charged.
    /// </summary>
    public DateTimeOffset? FullyChargedAt { get; set; }

    /// <summary>
    /// Date when cable was released.
    /// </summary>
    public DateTimeOffset? ReleasedAt { get; set; }

    /// <summary>
    /// Date when charge failed.
    /// </summary>
    public DateTimeOffset? FailedAt { get; set; }

    /// <summary>
    /// Date when charge timed out.
    /// </summary>
    public DateTimeOffset? TimeoutAt { get; set; }

    /// <summary>
    /// Date when charge was considered completed.
    /// </summary>
    public DateTimeOffset? CompletedAt { get; set; }

    [Required]
    public ChargeStateDto State { get; set; }

    /// <summary>
    /// Indicates the starting source for this charge, e.g app-ios, app-android &lt;br /&gt;Note: This is an ever-growing list, new values might be added. Please make sure to implement appropriate fallbacks.
    /// </summary>
    public string? StartSource { get; set; }

    /// <summary>
    /// Consumed Kwh.
    /// </summary>
    public double? ConsumedKwh { get; set; }

    /// <summary>
    /// Configured Kwh limit for this charge.
    /// </summary>
    public double? KwhLimit { get; set; }

    /// <summary>
    /// List of consumed Kwh split by hour.
    /// </summary>
    [Required]
    public List<KwhPerHour> KwhPerHour { get; set; }

    /// <summary>
    /// Kwh of the meter before charging started.
    /// </summary>
    public double? StartMeterKwh { get; set; }

    /// <summary>
    /// Kwh of the meter after charging stopped.
    /// </summary>
    public double? EndMeterKwh { get; set; }

    /// <summary>
    /// Price for this charge.
    /// </summary>
    public double? Price { get; set; }

    /// <summary>
    /// Configured price limit for this charge.
    /// </summary>
    public double? PriceLimit { get; set; }

    /// <summary>
    /// Average price per Kwh.
    /// </summary>
    public double? AveragePricePerKwh { get; set; }

    /// <summary>
    /// Average CO2 consumption per Kwh.
    /// </summary>
    public double? AverageCo2PerKwh { get; set; }

    /// <summary>
    /// Average percentage of renewable energy per Kwh.
    /// </summary>
    public double? AverageRenewablePerKwh { get; set; }

    /// <summary>
    /// Failure reason for this charge.
    /// </summary>
    public string? FailureReason { get; set; }

    /// <summary>
    /// Reason why this charge stopped.
    /// </summary>
    public string? StopReason { get; set; }

    /// <summary>
    /// Payment method for this charge.
    /// </summary>
    public string? PaymentMethod { get; set; }

    /// <summary>
    /// A note taken for this charge.
    /// </summary>
    public string? Note { get; set; }

    public Currency? Currency { get; set; }

    public PayingTeam? PayingTeam { get; set; }

    public SponsorTeam? SponsorTeam { get; set; }

    public Operator? Operator { get; set; }

    public ChargeAuthentication? ChargeAuth { get; set; }

    public StateOfCharge? Soc { get; set; }

    /// <summary>
    /// Configured SoC limit for this charge.
    /// </summary>
    public double? SocLimit { get; set; }

    public GenericPaymentSession? GenericPaymentSession { get; set; }

    /// <summary>
    /// External Id of this entity, managed by you. **We recommend to fill this always with a unique identifier from your side,since it allows you to find a started charge later, even if this requests'response was not captured by you or something went wrong.**.
    /// </summary>
    public string? PartnerExternalId { get; set; }

    /// <summary>
    /// Custom JSON payload for this entity, managed by you.
    /// </summary>
    public List<Object>? PartnerCustomPayload { get; set; } = new List<Object>();

    /// <summary>
    /// The charge point KW recorded during the charge.
    /// </summary>
    public double? ChargePointKw { get; set; }

    /// <inheritdoc />
    public override string ToString()
        => $"{nameof(Id)}: {Id}, {nameof(User)}: ({User}), {nameof(TeamMember)}: ({TeamMember}), {nameof(Type)}: ({Type}), {nameof(ChargePointId)}: {ChargePointId}, {nameof(PublicChargePoint)}: ({PublicChargePoint}), {nameof(SponsoredChargePointId)}: {SponsoredChargePointId}, {nameof(PriceGroupId)}: {PriceGroupId}, {nameof(CostPriceGroupId)}: {CostPriceGroupId}, {nameof(SiteId)}: {SiteId}, {nameof(CreatedAt)}: ({CreatedAt}), {nameof(UpdatedAt)}: ({UpdatedAt}), {nameof(CablePluggedInAt)}: ({CablePluggedInAt}), {nameof(StartedAt)}: ({StartedAt}), {nameof(StoppedAt)}: ({StoppedAt}), {nameof(FullyChargedAt)}: ({FullyChargedAt}), {nameof(ReleasedAt)}: ({ReleasedAt}), {nameof(FailedAt)}: ({FailedAt}), {nameof(TimeoutAt)}: ({TimeoutAt}), {nameof(CompletedAt)}: ({CompletedAt}), {nameof(State)}: ({State}), {nameof(StartSource)}: {StartSource}, {nameof(ConsumedKwh)}: {ConsumedKwh}, {nameof(KwhLimit)}: {KwhLimit}, {nameof(KwhPerHour)}.Count: {KwhPerHour?.Count ?? 0}, {nameof(StartMeterKwh)}: {StartMeterKwh}, {nameof(EndMeterKwh)}: {EndMeterKwh}, {nameof(Price)}: {Price}, {nameof(PriceLimit)}: {PriceLimit}, {nameof(AveragePricePerKwh)}: {AveragePricePerKwh}, {nameof(AverageCo2PerKwh)}: {AverageCo2PerKwh}, {nameof(AverageRenewablePerKwh)}: {AverageRenewablePerKwh}, {nameof(FailureReason)}: {FailureReason}, {nameof(StopReason)}: {StopReason}, {nameof(PaymentMethod)}: {PaymentMethod}, {nameof(Note)}: {Note}, {nameof(Currency)}: ({Currency}), {nameof(PayingTeam)}: ({PayingTeam}), {nameof(SponsorTeam)}: ({SponsorTeam}), {nameof(Operator)}: ({Operator}), {nameof(ChargeAuth)}: ({ChargeAuth}), {nameof(Soc)}: ({Soc}), {nameof(SocLimit)}: {SocLimit}, {nameof(GenericPaymentSession)}: ({GenericPaymentSession}), {nameof(PartnerExternalId)}: {PartnerExternalId}, {nameof(PartnerCustomPayload)}.Count: {PartnerCustomPayload?.Count ?? 0}, {nameof(ChargePointKw)}: {ChargePointKw}";
}