//------------------------------------------------------------------------------
// This code was auto-generated by ApiGenerator x.x.x.x.
//
// Changes to this file may cause incorrect behavior and will be lost if
// the code is regenerated.
//------------------------------------------------------------------------------
namespace ExampleWithAllResponseTypes.ApiClient.Generated.Endpoints.Example;

/// <summary>
/// Client Endpoint.
/// Description: Example endpoint.
/// Operation: GetExample.
/// </summary>
[GeneratedCode("ApiGenerator", "x.x.x.x")]
public class GetExampleEndpoint : IGetExampleEndpoint
{
    private readonly IHttpClientFactory factory;
    private readonly IHttpMessageFactory httpMessageFactory;

    public GetExampleEndpoint(
        IHttpClientFactory factory,
        IHttpMessageFactory httpMessageFactory)
    {
        this.factory = factory;
        this.httpMessageFactory = httpMessageFactory;
    }

    public async Task<IGetExampleEndpointResult> ExecuteAsync(
        GetExampleParameters parameters,
        string httpClientName = "ExampleWithAllResponseTypes-ApiClient",
        CancellationToken cancellationToken = default)
    {
        var client = factory.CreateClient(httpClientName);

        var requestBuilder = httpMessageFactory.FromTemplate("/api/v1/example");
        requestBuilder.WithQueryParameter("myEmail", parameters.MyEmail);

        using var requestMessage = requestBuilder.Build(HttpMethod.Get);
        using var response = await client.SendAsync(requestMessage, cancellationToken);

        var responseBuilder = httpMessageFactory.FromResponse(response);
        responseBuilder.AddSuccessResponse(HttpStatusCode.);
        responseBuilder.AddErrorResponse(HttpStatusCode.MultipleChoices);
        responseBuilder.AddErrorResponse(HttpStatusCode.MovedPermanently);
        responseBuilder.AddErrorResponse(HttpStatusCode.Found);
        responseBuilder.AddErrorResponse(HttpStatusCode.SeeOther);
        responseBuilder.AddErrorResponse(HttpStatusCode.NotModified);
        responseBuilder.AddErrorResponse(HttpStatusCode.UseProxy);
        responseBuilder.AddErrorResponse(HttpStatusCode.Unused);
        responseBuilder.AddErrorResponse(HttpStatusCode.RedirectKeepVerb);
        responseBuilder.AddErrorResponse(HttpStatusCode.PermanentRedirect);
        responseBuilder.AddErrorResponse<ValidationProblemDetails>(HttpStatusCode.BadRequest);
        responseBuilder.AddErrorResponse(HttpStatusCode.Unauthorized);
        responseBuilder.AddErrorResponse(HttpStatusCode.PaymentRequired);
        responseBuilder.AddErrorResponse(HttpStatusCode.Forbidden);
        responseBuilder.AddErrorResponse(HttpStatusCode.NotFound);
        responseBuilder.AddErrorResponse(HttpStatusCode.MethodNotAllowed);
        responseBuilder.AddErrorResponse(HttpStatusCode.NotAcceptable);
        responseBuilder.AddErrorResponse(HttpStatusCode.ProxyAuthenticationRequired);
        responseBuilder.AddErrorResponse(HttpStatusCode.RequestTimeout);
        responseBuilder.AddErrorResponse(HttpStatusCode.Conflict);
        responseBuilder.AddErrorResponse(HttpStatusCode.Gone);
        responseBuilder.AddErrorResponse(HttpStatusCode.LengthRequired);
        responseBuilder.AddErrorResponse(HttpStatusCode.PreconditionFailed);
        responseBuilder.AddErrorResponse(HttpStatusCode.RequestEntityTooLarge);
        responseBuilder.AddErrorResponse(HttpStatusCode.RequestUriTooLong);
        responseBuilder.AddErrorResponse(HttpStatusCode.UnsupportedMediaType);
        responseBuilder.AddErrorResponse(HttpStatusCode.RequestedRangeNotSatisfiable);
        responseBuilder.AddErrorResponse(HttpStatusCode.ExpectationFailed);
        responseBuilder.AddErrorResponse(HttpStatusCode.418);
        responseBuilder.AddErrorResponse(HttpStatusCode.MisdirectedRequest);
        responseBuilder.AddErrorResponse(HttpStatusCode.UnprocessableEntity);
        responseBuilder.AddErrorResponse(HttpStatusCode.Locked);
        responseBuilder.AddErrorResponse(HttpStatusCode.FailedDependency);
        responseBuilder.AddErrorResponse(HttpStatusCode.425);
        responseBuilder.AddErrorResponse(HttpStatusCode.UpgradeRequired);
        responseBuilder.AddErrorResponse(HttpStatusCode.PreconditionRequired);
        responseBuilder.AddErrorResponse(HttpStatusCode.TooManyRequests);
        responseBuilder.AddErrorResponse(HttpStatusCode.RequestHeaderFieldsTooLarge);
        responseBuilder.AddErrorResponse(HttpStatusCode.UnavailableForLegalReasons);
        responseBuilder.AddErrorResponse<string>(HttpStatusCode.InternalServerError);
        responseBuilder.AddErrorResponse(HttpStatusCode.NotImplemented);
        responseBuilder.AddErrorResponse(HttpStatusCode.BadGateway);
        responseBuilder.AddErrorResponse(HttpStatusCode.ServiceUnavailable);
        responseBuilder.AddErrorResponse(HttpStatusCode.GatewayTimeout);
        responseBuilder.AddErrorResponse(HttpStatusCode.HttpVersionNotSupported);
        responseBuilder.AddErrorResponse(HttpStatusCode.VariantAlsoNegotiates);
        responseBuilder.AddErrorResponse(HttpStatusCode.InsufficientStorage);
        responseBuilder.AddErrorResponse(HttpStatusCode.LoopDetected);
        responseBuilder.AddErrorResponse(HttpStatusCode.NotExtended);
        responseBuilder.AddErrorResponse(HttpStatusCode.NetworkAuthenticationRequired);

        return await responseBuilder.BuildResponseAsync(x => new GetExampleEndpointResult(x), cancellationToken);
    }
}
