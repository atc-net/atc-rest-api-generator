//------------------------------------------------------------------------------
// This code was auto-generated by ApiGenerator x.x.x.x.
//
// Changes to this file may cause incorrect behavior and will be lost if
// the code is regenerated.
//------------------------------------------------------------------------------
namespace Monta.ApiClient.Generated.Contracts.PriceGroups;

/// <summary>
/// CreateOrUpdatePricingDto.
/// </summary>
[GeneratedCode("ApiGenerator", "x.x.x.x")]
public class CreateOrUpdatePricingDto
{
    /// <summary>
    /// Name of the pricing. It is null when it's the master price.
    /// </summary>
    public string? Description { get; set; }

    /// <summary>
    /// Type of the pricing. `minute` is used for Minute fee. `min` is used for the master price.
    /// </summary>
    [Required]
    public PricingType Type { get; set; }

    /// <summary>
    /// Used by the Minute fee. True means it will stop charging the fee when the charge is complete. False means it will stop charging the fee when the cable is unplugged.
    /// </summary>
    [Required]
    public bool EndAtFullyCharged { get; set; }

    /// <summary>
    /// Used by Spot Price. True means it will add 25% VAT in the price calculations.
    /// </summary>
    [Required]
    public bool Vat { get; set; }

    /// <summary>
    /// Used by Spot Price. It will multiply the fallback price by this percentage.
    /// </summary>
    public double? Percentage { get; set; } = 100.000;

    /// <summary>
    /// The id of the selected Tariff.
    /// </summary>
    [Range(0, int.MaxValue)]
    public long? TariffId { get; set; }

    /// <summary>
    /// The id of the selected charge pricing tag.
    /// </summary>
    [Range(0, int.MaxValue)]
    public long? TagId { get; set; }

    /// <summary>
    /// Used by Charging, Minute and Idle Fees. After how many minutes the fee should start being applied.
    /// </summary>
    public int? ApplyAfterMinutes { get; set; }

    /// <summary>
    /// The price of this Fee or Master price, &lt;br /&gt;**Note**: the master price cannot be a negative value.
    /// </summary>
    [Required]
    public double Price { get; set; }

    /// <summary>
    /// Used by spot price. The minimum that the raw spot price can be. This will be used in calculations if spot price is lower than this.
    /// </summary>
    public double? PriceMin { get; set; }

    /// <summary>
    /// Used by spot price. The maximum that the raw spot price can be. This will be used in calculations if spot price is higher than this.
    /// </summary>
    public double? PriceMax { get; set; }

    /// <summary>
    /// Used by Idle fee. The maximum the user will be charged for the idle fee.
    /// </summary>
    public double? FeePriceMax { get; set; }

    /// <summary>
    /// Used by spot price. Additional absolute money or percentages values to be added on top of the previous calculations.
    /// </summary>
    public List<CreateAdditionalPricingDto>? Additional { get; set; } = new List<CreateAdditionalPricingDto>();

    /// <summary>
    /// DateTime "from" time to which this pricing should apply from.
    /// </summary>
    public DateTimeOffset? From { get; set; }

    /// <summary>
    /// DateTime "to" time to which this pricing should apply to.
    /// </summary>
    public DateTimeOffset? To { get; set; }

    /// <inheritdoc />
    public override string ToString()
        => $"{nameof(Description)}: {Description}, {nameof(Type)}: ({Type}), {nameof(EndAtFullyCharged)}: {EndAtFullyCharged}, {nameof(Vat)}: {Vat}, {nameof(Percentage)}: {Percentage}, {nameof(TariffId)}: {TariffId}, {nameof(TagId)}: {TagId}, {nameof(ApplyAfterMinutes)}: {ApplyAfterMinutes}, {nameof(Price)}: {Price}, {nameof(PriceMin)}: {PriceMin}, {nameof(PriceMax)}: {PriceMax}, {nameof(FeePriceMax)}: {FeePriceMax}, {nameof(Additional)}.Count: {Additional?.Count ?? 0}, {nameof(From)}: ({From}), {nameof(To)}: ({To})";
}