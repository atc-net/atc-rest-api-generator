//------------------------------------------------------------------------------
// This code was auto-generated by ApiGenerator x.x.x.x.
//
// Changes to this file may cause incorrect behavior and will be lost if
// the code is regenerated.
//------------------------------------------------------------------------------
namespace Monta.ApiClient.Generated.Contracts.TeamMembers;

/// <summary>
/// TeamMember.
/// </summary>
[GeneratedCode("ApiGenerator", "x.x.x.x")]
public class TeamMember
{
    /// <summary>
    /// Id of the team member.
    /// </summary>
    [Required]
    public long Id { get; set; }

    /// <summary>
    /// Team id of team member.
    /// </summary>
    public long TeamId { get; set; }

    /// <summary>
    /// The team member display name, formats can be: `First and Last Name`, `User: #id`, `email`, or `phone`.
    /// </summary>
    public string? DisplayName { get; set; }

    /// <summary>
    /// Operator of this team member.
    /// </summary>
    public Operator? Operator { get; set; }

    /// <summary>
    /// The partner external id for the team.
    /// </summary>
    public string? PartnerExternalTeamId { get; set; }

    /// <summary>
    /// User id of team member. If the user does not exist yet, it will be null.
    /// </summary>
    public long? UserId { get; set; }

    /// <summary>
    /// Role of the this member within the team.
    /// </summary>
    [Required]
    public TeamMemberRole Role { get; set; }

    /// <summary>
    /// Indicates if the user has access to all charge points or only to selected charge points.
    /// </summary>
    [Required]
    public TeamMemberAccess1 Access { get; set; }

    /// <summary>
    /// State of the invitation.
    /// </summary>
    [Required]
    public TeamMemberState1 State { get; set; }

    /// <summary>
    /// Note for team member.
    /// </summary>
    public string? Note { get; set; }

    /// <summary>
    /// Date of team member was invited to join the team.
    /// </summary>
    public DateTimeOffset? InvitedAt { get; set; }

    /// <summary>
    /// Date of team member accepted the invitation.
    /// </summary>
    public DateTimeOffset? AcceptedAt { get; set; }

    /// <summary>
    /// Date of team member rejected the invitation.
    /// </summary>
    public DateTimeOffset? RejectedAt { get; set; }

    /// <summary>
    /// Date the team member was created.
    /// </summary>
    public DateTimeOffset? CreatedAt { get; set; }

    /// <summary>
    /// Date the team member was updated.
    /// </summary>
    public DateTimeOffset? UpdatedAt { get; set; }

    /// <summary>
    /// Date the team member was deleted.
    /// </summary>
    public DateTimeOffset? DeletedAt { get; set; }

    /// <summary>
    /// The charge points ids this team member has access.
    /// </summary>
    [Required]
    public List<long> ChargePointIds { get; set; }

    /// <summary>
    /// The price group for this team member.
    /// </summary>
    public long? PriceGroupId { get; set; }

    /// <summary>
    /// The cost group for this team member.
    /// </summary>
    public long? CostGroupId { get; set; }

    /// <summary>
    /// The team member profile id to apply to this team member.
    /// </summary>
    public long? TeamMemberProfileId { get; set; }

    /// <summary>
    /// Indicates if the team member access to pay with team wallet when charging.
    /// </summary>
    public bool CanConfigureChargePoints { get; set; } = false;

    /// <summary>
    /// Indicates if the team member access to pay with team wallet when charging.
    /// </summary>
    public bool CanPayWithTeamWallet { get; set; } = false;

    /// <summary>
    /// Indicates if team member has access to withdraw and deposit from your team wallet to your bank account.
    /// </summary>
    public bool CanManageTeamWallet { get; set; } = false;

    /// <summary>
    /// Indicates if the team member is allowed to request sponsoring from this team for their charge point.
    /// </summary>
    public bool CanRequestSponsoring { get; set; } = false;

    /// <summary>
    /// Indicates that the team member can view and manage other members settings.
    /// </summary>
    public bool CanManageTeamMembers { get; set; } = false;

    /// <summary>
    /// List of country ids for which the team member can pay for charges.
    /// </summary>
    [Required]
    public List<int> CanPayForChargesCountryIds { get; set; }

    /// <summary>
    /// Who can pay the charging with Wallet?.
    /// </summary>
    [Required]
    public TeamWalletChargePaymentType TeamWalletChargePaymentType { get; set; } = TeamWalletChargePaymentType.None;

    /// <summary>
    /// External Id of this entity, managed by you.
    /// </summary>
    public string? PartnerExternalId { get; set; }

    /// <summary>
    /// Custom JSON payload for this entity, managed by you.
    /// </summary>
    public List<object>? PartnerCustomPayload { get; set; } = new List<object>();

    /// <inheritdoc />
    public override string ToString()
        => $"{nameof(Id)}: {Id}, {nameof(TeamId)}: {TeamId}, {nameof(DisplayName)}: {DisplayName}, {nameof(Operator)}: ({Operator}), {nameof(PartnerExternalTeamId)}: {PartnerExternalTeamId}, {nameof(UserId)}: {UserId}, {nameof(Role)}: ({Role}), {nameof(Access)}: ({Access}), {nameof(State)}: ({State}), {nameof(Note)}: {Note}, {nameof(InvitedAt)}: ({InvitedAt}), {nameof(AcceptedAt)}: ({AcceptedAt}), {nameof(RejectedAt)}: ({RejectedAt}), {nameof(CreatedAt)}: ({CreatedAt}), {nameof(UpdatedAt)}: ({UpdatedAt}), {nameof(DeletedAt)}: ({DeletedAt}), {nameof(ChargePointIds)}.Count: {ChargePointIds?.Count ?? 0}, {nameof(PriceGroupId)}: {PriceGroupId}, {nameof(CostGroupId)}: {CostGroupId}, {nameof(TeamMemberProfileId)}: {TeamMemberProfileId}, {nameof(CanConfigureChargePoints)}: {CanConfigureChargePoints}, {nameof(CanPayWithTeamWallet)}: {CanPayWithTeamWallet}, {nameof(CanManageTeamWallet)}: {CanManageTeamWallet}, {nameof(CanRequestSponsoring)}: {CanRequestSponsoring}, {nameof(CanManageTeamMembers)}: {CanManageTeamMembers}, {nameof(CanPayForChargesCountryIds)}.Count: {CanPayForChargesCountryIds?.Count ?? 0}, {nameof(TeamWalletChargePaymentType)}: {TeamWalletChargePaymentType}, {nameof(PartnerExternalId)}: {PartnerExternalId}, {nameof(PartnerCustomPayload)}.Count: {PartnerCustomPayload?.Count ?? 0}";
}