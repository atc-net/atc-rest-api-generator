//------------------------------------------------------------------------------
// This code was auto-generated by ApiGenerator x.x.x.x.
//
// Changes to this file may cause incorrect behavior and will be lost if
// the code is regenerated.
//------------------------------------------------------------------------------
namespace Monta.ApiClient.Generated.Contracts.WalletTransactions;

/// <summary>
/// WalletTransaction.
/// </summary>
[GeneratedCode("ApiGenerator", "x.x.x.x")]
public class WalletTransaction
{
    /// <summary>
    /// Id of the transaction.
    /// </summary>
    public long Id { get; set; }

    /// <summary>
    /// Amount sent, incl. VAT.
    /// </summary>
    public double FromAmount { get; set; }

    /// <summary>
    /// Amount sent, excl. VAT.
    /// </summary>
    public double FromSubAmount { get; set; }

    /// <summary>
    /// VAT amount sent.
    /// </summary>
    public double FromVatAmount { get; set; }

    [Required]
    public Currency FromCurrency { get; set; }

    /// <summary>
    /// Type of sender: operator, team.
    /// </summary>
    public string? FromType { get; set; }

    public TeamOrOperator? From { get; set; }

    /// <summary>
    /// Id of the wallet where the amount was sent from. Can be `null` if the transaction did not originate from a wallet.
    /// </summary>
    public long? FromWalletId { get; set; }

    /// <summary>
    /// Amount received, incl. VAT.
    /// </summary>
    public double ToAmount { get; set; }

    /// <summary>
    /// Amount received, excl. VAT.
    /// </summary>
    public double ToSubAmount { get; set; }

    /// <summary>
    /// VAT amount received.
    /// </summary>
    public double ToVatAmount { get; set; }

    [Required]
    public Currency ToCurrency { get; set; }

    /// <summary>
    /// Type of receiver: operator, team.
    /// </summary>
    public string? ToType { get; set; }

    public TeamOrOperator? To { get; set; }

    /// <summary>
    /// Id of the wallet where the amount was sent to. Can be `null` if the transaction did not target a wallet.
    /// </summary>
    public long? ToWalletId { get; set; }

    /// <summary>
    /// Exchange rate used for currency conversion.
    /// </summary>
    public double ExchangeRate { get; set; }

    /// <summary>
    /// Creation date of transaction.
    /// </summary>
    [Required]
    public DateTimeOffset CreatedAt { get; set; }

    /// <summary>
    /// Update date of transaction.
    /// </summary>
    public DateTimeOffset? UpdatedAt { get; set; }

    /// <summary>
    /// Reference id of this transaction. e.g the charge id.
    /// </summary>
    public string? ReferenceId { get; set; }

    public WalletTransactionReferenceType? ReferenceType { get; set; }

    [Required]
    public WalletTransactionGroup Group { get; set; }

    /// <summary>
    /// Kind of this transaction, ie 'charge-sponsored'.
    /// &lt;br/&gt;
    /// **Note:** This is an open field and therefore more kinds will be added moving forward.
    /// </summary>
    [Required]
    public string Kind { get; set; }

    /// <summary>
    /// VAT percentage included in this transaction.
    /// </summary>
    public double VatPercentage { get; set; }

    [Required]
    public WalletTransactionState State { get; set; }

    /// <summary>
    /// A note that has been entered for this transaction.
    /// </summary>
    public string? Note { get; set; }

    /// <summary>
    /// External Id of this entity, managed by you.
    /// </summary>
    public string? PartnerExternalId { get; set; }

    /// <summary>
    /// Custom JSON payload for this entity, managed by you.
    /// </summary>
    public List<Object>? PartnerCustomPayload { get; set; } = new List<Object>();

    public MetadataDto? Metadata { get; set; }

    /// <inheritdoc />
    public override string ToString()
        => $"{nameof(Id)}: {Id}, {nameof(FromAmount)}: {FromAmount}, {nameof(FromSubAmount)}: {FromSubAmount}, {nameof(FromVatAmount)}: {FromVatAmount}, {nameof(FromCurrency)}: ({FromCurrency}), {nameof(FromType)}: {FromType}, {nameof(From)}: ({From}), {nameof(FromWalletId)}: {FromWalletId}, {nameof(ToAmount)}: {ToAmount}, {nameof(ToSubAmount)}: {ToSubAmount}, {nameof(ToVatAmount)}: {ToVatAmount}, {nameof(ToCurrency)}: ({ToCurrency}), {nameof(ToType)}: {ToType}, {nameof(To)}: ({To}), {nameof(ToWalletId)}: {ToWalletId}, {nameof(ExchangeRate)}: {ExchangeRate}, {nameof(CreatedAt)}: ({CreatedAt}), {nameof(UpdatedAt)}: ({UpdatedAt}), {nameof(ReferenceId)}: {ReferenceId}, {nameof(ReferenceType)}: ({ReferenceType}), {nameof(Group)}: ({Group}), {nameof(Kind)}: {Kind}, {nameof(VatPercentage)}: {VatPercentage}, {nameof(State)}: ({State}), {nameof(Note)}: {Note}, {nameof(PartnerExternalId)}: {PartnerExternalId}, {nameof(PartnerCustomPayload)}.Count: {PartnerCustomPayload?.Count ?? 0}, {nameof(Metadata)}: ({Metadata})";
}