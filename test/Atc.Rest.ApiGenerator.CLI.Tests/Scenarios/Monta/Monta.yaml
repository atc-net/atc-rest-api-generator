openapi: 3.0.1
info:
  title: MONTA Partner API
  description: "\n            see https://docs.partner-api.monta.com\n        "
  contact:
    name: Partner API Support
    url: https://www.monta.com/uk/contact
    email: partner-api@monta.com
  version: 2024-01-18
servers:
- url: https://partner-api.monta.com
  description: Production
paths:
  /api/v1/auth/me:
    get:
      tags:
      - Authentication
      summary: Obtain information about current API Consumer
      description: "Deprecated, will be removed by 01.04.24, use `/api/v1/consumers/me`\
        \ instead."
      operationId: get-auth-information
      responses:
        "200":
          description: Successfully retrieved current consumer
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Consumer'
        "401":
          description: Unauthorized access
          content:
            application/json:
              schema:
                type: object
                example:
                  status: UNAUTHORIZED
                  message: Invalid or expired `accessToken`.
                  errorCode: INVALID_ACCESS_TOKEN
        "400":
          description: The request is invalid
          content:
            application/json:
              schema:
                type: object
                example:
                  status: BAD_REQUEST
                  message: Invalid request
                  errorCode: BAD_REQUEST
      deprecated: true
      security:
      - BearerAccessToken: []
      x-sunset: 2024-04-01
  /api/v1/auth/refresh:
    post:
      tags:
      - Authentication
      summary: Obtain your `accessToken` with a `refreshToken`
      operationId: get-access-token-with-refresh-token
      requestBody:
        content:
          application/json:
            schema:
              required:
              - refreshToken
              type: object
              properties:
                refreshToken:
                  type: string
        required: true
      responses:
        "200":
          description: Successfully refreshed access token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Token'
        "401":
          description: Unauthorized access
          content:
            application/json:
              schema:
                type: object
                example:
                  status: UNAUTHORIZED
                  message: Invalid or expired `accessToken`.
                  errorCode: INVALID_ACCESS_TOKEN
        "400":
          description: The request is invalid
          content:
            application/json:
              schema:
                type: object
                example:
                  status: BAD_REQUEST
                  message: Invalid request
                  errorCode: BAD_REQUEST
  /api/v1/auth/token:
    post:
      tags:
      - Authentication
      summary: Obtain your `accessToken`
      operationId: get-access-token-with-client-credentials
      requestBody:
        content:
          application/json:
            schema:
              required:
              - clientId
              - clientSecret
              type: object
              properties:
                clientId:
                  type: string
                clientSecret:
                  type: string
        required: true
      responses:
        "200":
          description: Successfully created access token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Token'
        "401":
          description: Consumer with provided credentials was not found
          content:
            application/json:
              schema:
                type: object
                example:
                  status: UNAUTHORIZED
                  message: Consumer with given `clientId` and `clientSecret` not found
                  errorCode: CONSUMER_NOT_FOUND
        "400":
          description: The request is invalid
          content:
            application/json:
              schema:
                type: object
                example:
                  status: BAD_REQUEST
                  message: Invalid request
                  errorCode: BAD_REQUEST
  /api/v1/charge-auth-tokens:
    get:
      tags:
      - Charge Auth Tokens
      summary: Retrieve list of charge auth tokens.
      description: "Required scope: `charge-auth-tokens:read`"
      operationId: get-charge-auth-tokens
      parameters:
      - name: teamId
        in: query
        description: Filter to retrieve charges auth tokens with specified teamId
        schema:
          type: integer
          format: int64
      - name: partnerExternalId
        in: query
        description: "Filter charge auth tokens by partnerExternalId, to filter only\
          \ resources without `partnerExternalId` *use* `partnerExternalId=\"\"`"
        schema:
          type: string
      - name: page
        in: query
        description: page number to retrieve (starts with 0)
        schema:
          type: integer
          format: int32
          default: 0
        example: "1"
      - name: perPage
        in: query
        description: "number of items per page (between 1 and 100, default 10)"
        schema:
          type: integer
          format: int32
          default: 10
        example: "10"
      responses:
        "200":
          description: List of charge auth tokens that match the criteria
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MontaPage_ChargeAuthTokenDto_'
        "401":
          description: Unauthorized access
          content:
            application/json:
              schema:
                type: object
                example:
                  status: UNAUTHORIZED
                  message: Invalid or expired `accessToken`.
                  errorCode: INVALID_ACCESS_TOKEN
        "400":
          description: The request is invalid
          content:
            application/json:
              schema:
                type: object
                example:
                  status: BAD_REQUEST
                  message: Invalid request
                  errorCode: BAD_REQUEST
      security:
      - BearerAccessToken: []
    post:
      tags:
      - Charge Auth Tokens
      summary: Create a new charge auth token
      description: "Required scope: `charge-auth-tokens:write`"
      operationId: create-charge-auth-token
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateChargeAuthToken'
        required: true
      responses:
        "201":
          description: Charge Auth Token Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ChargeAuthToken'
        "403":
          description: Operator doesn't have access to resource
          content:
            application/json:
              schema:
                type: object
                example:
                  status: FORBIDDEN
                  message: Operator doesn't have access to resource
                  errorCode: ACCESS_FORBIDDEN
        "400":
          description: The request is invalid
          content:
            application/json:
              schema:
                type: object
                example:
                  status: BAD_REQUEST
                  message: Invalid request
                  errorCode: BAD_REQUEST
        "401":
          description: Unauthorized access
          content:
            application/json:
              schema:
                type: object
                example:
                  status: UNAUTHORIZED
                  message: Invalid or expired `accessToken`.
                  errorCode: INVALID_ACCESS_TOKEN
      security:
      - BearerAccessToken: []
  /api/v1/charge-auth-tokens/{chargeAuthTokenId}:
    get:
      tags:
      - Charge Auth Tokens
      summary: Retrieve a charge auth token.
      description: "Required scope: `charge-auth-tokens:read`"
      operationId: get-charge-auth-token
      parameters:
      - name: chargeAuthTokenId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: Charge Auth Token with provided id
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ChargeAuthToken'
        "403":
          description: Operator doesn't have access to resource
          content:
            application/json:
              schema:
                type: object
                example:
                  status: FORBIDDEN
                  message: Operator doesn't have access to resource
                  errorCode: ACCESS_FORBIDDEN
        "404":
          description: Entity with the provided id was not found
          content:
            application/json:
              schema:
                type: object
                example:
                  status: NOT_FOUND
                  message: Requested entity/entity provided in body was not found
                  readableMessage: user friendly message
                  errorCode: RESOURCE_NOT_FOUND
                  context: context
        "400":
          description: The request is invalid
          content:
            application/json:
              schema:
                type: object
                example:
                  status: BAD_REQUEST
                  message: Invalid request
                  errorCode: BAD_REQUEST
        "401":
          description: Unauthorized access
          content:
            application/json:
              schema:
                type: object
                example:
                  status: UNAUTHORIZED
                  message: Invalid or expired `accessToken`.
                  errorCode: INVALID_ACCESS_TOKEN
      security:
      - BearerAccessToken: []
    delete:
      tags:
      - Charge Auth Tokens
      summary: Deletes a charge auth token.
      description: "Required scope: `charge-auth-tokens:delete`"
      operationId: delete-charge-auth-token
      parameters:
      - name: chargeAuthTokenId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: Deleted charge auth token successfully
        "403":
          description: Operator doesn't have access to resource
          content:
            application/json:
              schema:
                type: object
                example:
                  status: FORBIDDEN
                  message: Operator doesn't have access to resource
                  errorCode: ACCESS_FORBIDDEN
        "404":
          description: Entity with the provided id was not found
          content:
            application/json:
              schema:
                type: object
                example:
                  status: NOT_FOUND
                  message: Requested entity/entity provided in body was not found
                  readableMessage: user friendly message
                  errorCode: RESOURCE_NOT_FOUND
                  context: context
        "400":
          description: The request is invalid
          content:
            application/json:
              schema:
                type: object
                example:
                  status: BAD_REQUEST
                  message: Invalid request
                  errorCode: BAD_REQUEST
        "401":
          description: Unauthorized access
          content:
            application/json:
              schema:
                type: object
                example:
                  status: UNAUTHORIZED
                  message: Invalid or expired `accessToken`.
                  errorCode: INVALID_ACCESS_TOKEN
      security:
      - BearerAccessToken: []
    patch:
      tags:
      - Charge Auth Tokens
      summary: Patch an existing charge auth token
      description: "Required scope: `charge-auth-tokens:write`"
      operationId: patch-charge-auth-token
      parameters:
      - name: chargeAuthTokenId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchChargeAuthToken'
        required: true
      responses:
        "200":
          description: Charge auth token updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ChargeAuthToken'
        "403":
          description: Operator doesn't have access to resource
          content:
            application/json:
              schema:
                type: object
                example:
                  status: FORBIDDEN
                  message: Operator doesn't have access to resource
                  errorCode: ACCESS_FORBIDDEN
        "400":
          description: The request is invalid
          content:
            application/json:
              schema:
                type: object
                example:
                  status: BAD_REQUEST
                  message: Invalid request
                  errorCode: BAD_REQUEST
        "401":
          description: Unauthorized access
          content:
            application/json:
              schema:
                type: object
                example:
                  status: UNAUTHORIZED
                  message: Invalid or expired `accessToken`.
                  errorCode: INVALID_ACCESS_TOKEN
      security:
      - BearerAccessToken: []
  /api/v1/charge-auth-tokens/{chargeAuthTokenId}/block:
    post:
      tags:
      - Charge Auth Tokens
      summary: Block a charge auth token
      description: "Required scope: `charge-auth-tokens:write`"
      operationId: block-charge-auth-token
      parameters:
      - name: chargeAuthTokenId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: Charge auth token blocked
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ChargeAuthToken'
        "403":
          description: Operator doesn't have access to resource
          content:
            application/json:
              schema:
                type: object
                example:
                  status: FORBIDDEN
                  message: Operator doesn't have access to resource
                  errorCode: ACCESS_FORBIDDEN
        "400":
          description: The request is invalid
          content:
            application/json:
              schema:
                type: object
                example:
                  status: BAD_REQUEST
                  message: Invalid request
                  errorCode: BAD_REQUEST
        "401":
          description: Unauthorized access
          content:
            application/json:
              schema:
                type: object
                example:
                  status: UNAUTHORIZED
                  message: Invalid or expired `accessToken`.
                  errorCode: INVALID_ACCESS_TOKEN
      security:
      - BearerAccessToken: []
  /api/v1/charge-auth-tokens/{chargeAuthTokenId}/unblock:
    post:
      tags:
      - Charge Auth Tokens
      summary: Unblock a charge auth token
      description: "Required scope: `charge-auth-tokens:write`"
      operationId: unblock-charge-auth-token
      parameters:
      - name: chargeAuthTokenId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: Charge auth token unblocked
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ChargeAuthToken'
        "403":
          description: Operator doesn't have access to resource
          content:
            application/json:
              schema:
                type: object
                example:
                  status: FORBIDDEN
                  message: Operator doesn't have access to resource
                  errorCode: ACCESS_FORBIDDEN
        "400":
          description: The request is invalid
          content:
            application/json:
              schema:
                type: object
                example:
                  status: BAD_REQUEST
                  message: Invalid request
                  errorCode: BAD_REQUEST
        "401":
          description: Unauthorized access
          content:
            application/json:
              schema:
                type: object
                example:
                  status: UNAUTHORIZED
                  message: Invalid or expired `accessToken`.
                  errorCode: INVALID_ACCESS_TOKEN
      security:
      - BearerAccessToken: []
  /api/v1/charge-point-brands:
    get:
      tags:
      - Charge Point Brands
      summary: Retrieve list of charge point brands.
      operationId: get-charge-point-brands
      parameters:
      - name: search
        in: query
        description: Optional filter to search brands by name
        schema:
          type: string
      - name: page
        in: query
        description: page number to retrieve (starts with 0)
        schema:
          type: integer
          format: int32
          default: 0
        example: "1"
      - name: perPage
        in: query
        description: "number of items per page (between 1 and 100, default 10)"
        schema:
          type: integer
          format: int32
          default: 10
        example: "10"
      responses:
        "200":
          description: List of charge point brands that match the criteria
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MontaPage_ChargePointBrandDto_'
        "401":
          description: Unauthorized access
          content:
            application/json:
              schema:
                type: object
                example:
                  status: UNAUTHORIZED
                  message: Invalid or expired `accessToken`.
                  errorCode: INVALID_ACCESS_TOKEN
        "400":
          description: The request is invalid
          content:
            application/json:
              schema:
                type: object
                example:
                  status: BAD_REQUEST
                  message: Invalid request
                  errorCode: BAD_REQUEST
      security:
      - BearerAccessToken: []
  /api/v1/charge-point-brands/{chargePointBrandId}:
    get:
      tags:
      - Charge Point Brands
      summary: Retrieve a charge point brand.
      operationId: get-charge-point-brand
      parameters:
      - name: chargePointBrandId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: Charge Point Brand with provided id
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ChargePointBrand'
        "403":
          description: Operator doesn't have access to resource
          content:
            application/json:
              schema:
                type: object
                example:
                  status: FORBIDDEN
                  message: Operator doesn't have access to resource
                  errorCode: ACCESS_FORBIDDEN
        "404":
          description: Entity with the provided id was not found
          content:
            application/json:
              schema:
                type: object
                example:
                  status: NOT_FOUND
                  message: Requested entity/entity provided in body was not found
                  readableMessage: user friendly message
                  errorCode: RESOURCE_NOT_FOUND
                  context: context
        "400":
          description: The request is invalid
          content:
            application/json:
              schema:
                type: object
                example:
                  status: BAD_REQUEST
                  message: Invalid request
                  errorCode: BAD_REQUEST
        "401":
          description: Unauthorized access
          content:
            application/json:
              schema:
                type: object
                example:
                  status: UNAUTHORIZED
                  message: Invalid or expired `accessToken`.
                  errorCode: INVALID_ACCESS_TOKEN
      security:
      - BearerAccessToken: []
  /api/v1/charge-point-connectors:
    get:
      tags:
      - Charge Point Connectors
      summary: Retrieve a list of charge point connectors.
      operationId: get-connectors
      responses:
        "200":
          description: List of all charge point connectors
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MontaPage_ChargePointConnectorDto_'
        "400":
          description: The request is invalid
          content:
            application/json:
              schema:
                type: object
                example:
                  status: BAD_REQUEST
                  message: Invalid request
                  errorCode: BAD_REQUEST
        "401":
          description: Unauthorized access
          content:
            application/json:
              schema:
                type: object
                example:
                  status: UNAUTHORIZED
                  message: Invalid or expired `accessToken`.
                  errorCode: INVALID_ACCESS_TOKEN
      security:
      - BearerAccessToken: []
  /api/v1/charge-point-connectors/{connectorId}:
    get:
      tags:
      - Charge Point Connectors
      summary: Retrieve a single charge point connector.
      operationId: get-connector
      parameters:
      - name: connectorId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: Connector with provided id
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ChargePointConnector'
        "403":
          description: Operator doesn't have access to resource
          content:
            application/json:
              schema:
                type: object
                example:
                  status: FORBIDDEN
                  message: Operator doesn't have access to resource
                  errorCode: ACCESS_FORBIDDEN
        "404":
          description: Entity with the provided id was not found
          content:
            application/json:
              schema:
                type: object
                example:
                  status: NOT_FOUND
                  message: Requested entity/entity provided in body was not found
                  readableMessage: user friendly message
                  errorCode: RESOURCE_NOT_FOUND
                  context: context
        "400":
          description: The request is invalid
          content:
            application/json:
              schema:
                type: object
                example:
                  status: BAD_REQUEST
                  message: Invalid request
                  errorCode: BAD_REQUEST
        "401":
          description: Unauthorized access
          content:
            application/json:
              schema:
                type: object
                example:
                  status: UNAUTHORIZED
                  message: Invalid or expired `accessToken`.
                  errorCode: INVALID_ACCESS_TOKEN
      security:
      - BearerAccessToken: []
  /api/v1/charge-point-integrations:
    get:
      tags:
      - Charge Point Integrations
      summary: Retrieve a list of charge points integrations
      description: "Required scope: `charge-points:read`"
      operationId: get-charge-point-integrations
      parameters:
      - name: page
        in: query
        description: page number to retrieve (starts with 0)
        schema:
          type: integer
          format: int32
          default: 0
        example: "1"
      - name: perPage
        in: query
        description: "number of items per page (between 1 and 100, default 10)"
        schema:
          type: integer
          format: int32
          default: 10
        example: "10"
      - name: chargePointId
        in: query
        required: true
        schema:
          minimum: 0
          exclusiveMinimum: true
          required:
          - "true"
          type: integer
          description: Allows to filter list of charge points integrations by a charge
            point id
          format: int64
          example: 30
      - name: includeDeleted
        in: query
        schema:
          required:
          - "false"
          type: boolean
          description: Includes deleted resources in the response
          nullable: true
          example: true
      responses:
        "200":
          description: List of charges points integrations that match the criteria
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MontaPage_ChargePointIntegrationDto_'
        "400":
          description: The request is invalid
          content:
            application/json:
              schema:
                type: object
                example:
                  status: BAD_REQUEST
                  message: Invalid request
                  errorCode: BAD_REQUEST
        "401":
          description: Unauthorized access
          content:
            application/json:
              schema:
                type: object
                example:
                  status: UNAUTHORIZED
                  message: Invalid or expired `accessToken`.
                  errorCode: INVALID_ACCESS_TOKEN
      security:
      - BearerAccessToken: []
    put:
      tags:
      - Charge Point Integrations
      summary: Create or update a charge point integration
      description: "Note: This endpoint will create or update an existing integration,meaning\
        \ that the existing integration will be replaced by a new one</br>Required\
        \ scope: `charge-points:write`"
      operationId: post-or-put-charge-point-integration
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateOrUpdateChargePointIntegration'
        required: true
      responses:
        "200":
          description: Charge point integration created/updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ChargePointIntegration'
        "403":
          description: Operator doesn't have access to resource
          content:
            application/json:
              schema:
                type: object
                example:
                  status: FORBIDDEN
                  message: Operator doesn't have access to resource
                  errorCode: ACCESS_FORBIDDEN
        "400":
          description: The request is invalid
          content:
            application/json:
              schema:
                type: object
                example:
                  status: BAD_REQUEST
                  message: Invalid request
                  errorCode: BAD_REQUEST
        "401":
          description: Unauthorized access
          content:
            application/json:
              schema:
                type: object
                example:
                  status: UNAUTHORIZED
                  message: Invalid or expired `accessToken`.
                  errorCode: INVALID_ACCESS_TOKEN
      security:
      - BearerAccessToken: []
  /api/v1/charge-point-integrations/{chargePointIntegrationId}:
    get:
      tags:
      - Charge Point Integrations
      summary: Retrieve a single charge point integration
      description: "Required scope: `charge-points:read`"
      operationId: get-charge-point-integration
      parameters:
      - name: chargePointIntegrationId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: Charge point integration with provided id
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ChargePointIntegration'
        "403":
          description: Operator doesn't have access to resource
          content:
            application/json:
              schema:
                type: object
                example:
                  status: FORBIDDEN
                  message: Operator doesn't have access to resource
                  errorCode: ACCESS_FORBIDDEN
        "404":
          description: Entity with the provided id was not found
          content:
            application/json:
              schema:
                type: object
                example:
                  status: NOT_FOUND
                  message: Requested entity/entity provided in body was not found
                  readableMessage: user friendly message
                  errorCode: RESOURCE_NOT_FOUND
                  context: context
        "400":
          description: The request is invalid
          content:
            application/json:
              schema:
                type: object
                example:
                  status: BAD_REQUEST
                  message: Invalid request
                  errorCode: BAD_REQUEST
        "401":
          description: Unauthorized access
          content:
            application/json:
              schema:
                type: object
                example:
                  status: UNAUTHORIZED
                  message: Invalid or expired `accessToken`.
                  errorCode: INVALID_ACCESS_TOKEN
      security:
      - BearerAccessToken: []
    delete:
      tags:
      - Charge Point Integrations
      summary: Delete a charge point integration
      description: "Required scope: `charge-points:delete`"
      operationId: delete-charge-point-integration
      parameters:
      - name: chargePointIntegrationId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "204":
          description: Charge point integration deleted
        "403":
          description: Operator doesn't have access to resource
          content:
            application/json:
              schema:
                type: object
                example:
                  status: FORBIDDEN
                  message: Operator doesn't have access to resource
                  errorCode: ACCESS_FORBIDDEN
        "404":
          description: Entity with the provided id was not found
          content:
            application/json:
              schema:
                type: object
                example:
                  status: NOT_FOUND
                  message: Requested entity/entity provided in body was not found
                  readableMessage: user friendly message
                  errorCode: RESOURCE_NOT_FOUND
                  context: context
        "400":
          description: The request is invalid
          content:
            application/json:
              schema:
                type: object
                example:
                  status: BAD_REQUEST
                  message: Invalid request
                  errorCode: BAD_REQUEST
        "401":
          description: Unauthorized access
          content:
            application/json:
              schema:
                type: object
                example:
                  status: UNAUTHORIZED
                  message: Invalid or expired `accessToken`.
                  errorCode: INVALID_ACCESS_TOKEN
      security:
      - BearerAccessToken: []
  /api/v1/charge-point-models:
    get:
      tags:
      - Charge Point Models
      summary: Retrieve list of charge point models.
      operationId: get-charge-point-models
      parameters:
      - name: search
        in: query
        description: Optional filter to search models by model name or brand name
        schema:
          type: string
      - name: brandId
        in: query
        description: Optional filter to filter models by `brandId`
        schema:
          type: integer
          format: int64
      - name: page
        in: query
        description: page number to retrieve (starts with 0)
        schema:
          type: integer
          format: int32
          default: 0
        example: "1"
      - name: perPage
        in: query
        description: "number of items per page (between 1 and 100, default 10)"
        schema:
          type: integer
          format: int32
          default: 10
        example: "10"
      responses:
        "200":
          description: List of charge point models that match the criteria
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MontaPage_ChargePointModelDto_'
        "401":
          description: Unauthorized access
          content:
            application/json:
              schema:
                type: object
                example:
                  status: UNAUTHORIZED
                  message: Invalid or expired `accessToken`.
                  errorCode: INVALID_ACCESS_TOKEN
        "400":
          description: The request is invalid
          content:
            application/json:
              schema:
                type: object
                example:
                  status: BAD_REQUEST
                  message: Invalid request
                  errorCode: BAD_REQUEST
      security:
      - BearerAccessToken: []
  /api/v1/charge-point-models/{chargePointModelId}:
    get:
      tags:
      - Charge Point Models
      summary: Retrieve a charge point model.
      operationId: get-charge-point-model
      parameters:
      - name: chargePointModelId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: Charge Point model with provided id
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ChargePointModel'
        "403":
          description: Operator doesn't have access to resource
          content:
            application/json:
              schema:
                type: object
                example:
                  status: FORBIDDEN
                  message: Operator doesn't have access to resource
                  errorCode: ACCESS_FORBIDDEN
        "404":
          description: Entity with the provided id was not found
          content:
            application/json:
              schema:
                type: object
                example:
                  status: NOT_FOUND
                  message: Requested entity/entity provided in body was not found
                  readableMessage: user friendly message
                  errorCode: RESOURCE_NOT_FOUND
                  context: context
        "400":
          description: The request is invalid
          content:
            application/json:
              schema:
                type: object
                example:
                  status: BAD_REQUEST
                  message: Invalid request
                  errorCode: BAD_REQUEST
        "401":
          description: Unauthorized access
          content:
            application/json:
              schema:
                type: object
                example:
                  status: UNAUTHORIZED
                  message: Invalid or expired `accessToken`.
                  errorCode: INVALID_ACCESS_TOKEN
      security:
      - BearerAccessToken: []
  /api/v1/charge-points:
    get:
      tags:
      - Charge Points
      summary: Retrieve a list of charge points.
      description: "Required scope: `charge-points:read`"
      operationId: get-charge-points
      parameters:
      - name: page
        in: query
        description: page number to retrieve (starts with 0)
        schema:
          type: integer
          format: int32
          default: 0
        example: "1"
      - name: perPage
        in: query
        description: "number of items per page (between 1 and 100, default 10)"
        schema:
          type: integer
          format: int32
          default: 10
        example: "10"
      - name: siteId
        in: query
        schema:
          required:
          - "false"
          type: integer
          description: Allows to filter list of charge points by a site id
          format: int64
          nullable: true
          example: 13
      - name: teamId
        in: query
        schema:
          required:
          - "false"
          type: integer
          description: Allows to filter list of charge points by a team id.
          format: int64
          nullable: true
          example: 19
      - name: partnerExternalId
        in: query
        schema:
          required:
          - "false"
          type: string
          description: "Filter charge points by partnerExternalId, to filter only\
            \ resources without `partnerExternalId` *use* `partnerExternalId=\"\"`"
          nullable: true
          example: "1"
      - name: sortByLocation
        in: query
        schema:
          pattern: "^(-?\\d*\\.\\d+|\\d+\\.\\d*)(,)(-?\\d*\\.\\d+|\\d+\\.\\d*)$"
          required:
          - "false"
          type: string
          description: "lat,long coordinates. If supplied, the Charge Points will\
            \ be sorted in nearest first order relativeto this point. (Format: 55.7096,12.5856,\
            \ -8.050000, -34.900002)"
          nullable: true
          example: "55.7096,12.5856"
      - name: includeDeleted
        in: query
        schema:
          required:
          - "false"
          type: boolean
          description: Includes deleted resources in the response
          nullable: true
          example: false
      - name: state
        in: query
        schema:
          nullable: true
          allOf:
          - $ref: '#/components/schemas/ChargePointState'
          - description: Allows filtering charge points by their state
            example: busy
      responses:
        "200":
          description: List of charges points that match the criteria
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MontaPage_ChargePointDto_'
        "400":
          description: The request is invalid
          content:
            application/json:
              schema:
                type: object
                example:
                  status: BAD_REQUEST
                  message: Invalid request
                  errorCode: BAD_REQUEST
        "401":
          description: Unauthorized access
          content:
            application/json:
              schema:
                type: object
                example:
                  status: UNAUTHORIZED
                  message: Invalid or expired `accessToken`.
                  errorCode: INVALID_ACCESS_TOKEN
      security:
      - BearerAccessToken: []
    post:
      tags:
      - Charge Points
      summary: Create a charge point
      description: "Required scope: `charge-points:write`"
      operationId: post-charge-point
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateChargePoint'
        required: true
      responses:
        "201":
          description: Charge point created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ChargePoint'
        "403":
          description: Operator doesn't have access to resource
          content:
            application/json:
              schema:
                type: object
                example:
                  status: FORBIDDEN
                  message: Operator doesn't have access to resource
                  errorCode: ACCESS_FORBIDDEN
        "400":
          description: The request is invalid
          content:
            application/json:
              schema:
                type: object
                example:
                  status: BAD_REQUEST
                  message: Invalid request
                  errorCode: BAD_REQUEST
        "401":
          description: Unauthorized access
          content:
            application/json:
              schema:
                type: object
                example:
                  status: UNAUTHORIZED
                  message: Invalid or expired `accessToken`.
                  errorCode: INVALID_ACCESS_TOKEN
      security:
      - BearerAccessToken: []
  /api/v1/charge-points/map:
    get:
      tags:
      - Charge Points
      summary: Retrieve charge points / sites for map.
      description: "Required scope: `map:read`"
      operationId: get-charge-point-map
      parameters:
      - name: topLatitude
        in: query
        required: true
        schema:
          maximum: 90
          minimum: -90
          required:
          - "true"
          type: number
          description: top (north) latitude value (between `-90`-`90`)
          format: double
          example: 90
      - name: rightLongitude
        in: query
        required: true
        schema:
          maximum: 180
          minimum: -180
          required:
          - "true"
          type: number
          description: right (east) longitude value (between `-180`-`180`)
          format: double
          example: 180
      - name: bottomLatitude
        in: query
        required: true
        schema:
          maximum: 90
          minimum: -90
          required:
          - "true"
          type: number
          description: bottom (south) latitude value (between `-90`-`90`)
          format: double
          example: -90
      - name: leftLongitude
        in: query
        required: true
        schema:
          maximum: 180
          minimum: -180
          required:
          - "true"
          type: number
          description: left (west) longitude value (between `-180`-`180`)
          format: double
          example: -180
      - name: centerLatitude
        in: query
        required: true
        schema:
          maximum: 90
          minimum: -90
          required:
          - "true"
          type: number
          description: latitude value of the center coordinate of your map (between
            `-90`-`90`)
          format: double
          example: 90
      - name: centerLongitude
        in: query
        required: true
        schema:
          maximum: 180
          minimum: -180
          required:
          - "true"
          type: number
          description: longitude value of the center coordinate of your map (between
            `-180`-`180`)
          format: double
          example: 180
      - name: zoom
        in: query
        required: true
        schema:
          maximum: 15
          minimum: 1
          required:
          - "true"
          type: number
          description: zoom level of the map (between `1`-`15`)
          format: double
          example: 1
      - name: includeBusy
        in: query
        required: true
        schema:
          required:
          - "true"
          type: boolean
          description: "If true, busy charge points are returned as well. Otherwise,\
            \ only charge points that are active and not in use are returned."
          nullable: true
          example: true
          default: true
      - name: includeAllOperators
        in: query
        required: true
        schema:
          required:
          - "true"
          type: boolean
          description: "If true, all public charge points are returned. Otherwise,\
            \ only charge points owned by the operator/teams matching the request\
            \ credentials."
          nullable: true
          example: false
          default: false
      responses:
        "200":
          description: List of charges points /sites that match the criteria
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MapResult'
        "400":
          description: The request is invalid
          content:
            application/json:
              schema:
                type: object
                example:
                  status: BAD_REQUEST
                  message: Invalid request
                  errorCode: BAD_REQUEST
        "401":
          description: Unauthorized access
          content:
            application/json:
              schema:
                type: object
                example:
                  status: UNAUTHORIZED
                  message: Invalid or expired `accessToken`.
                  errorCode: INVALID_ACCESS_TOKEN
      security:
      - BearerAccessToken: []
  /api/v1/charge-points/{chargePointId}:
    get:
      tags:
      - Charge Points
      summary: Retrieve a single charge point.
      description: "Required scope: `charge-points:read`"
      operationId: get-charge-point
      parameters:
      - name: chargePointId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: Charge point with provided id
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ChargePoint'
        "403":
          description: Operator doesn't have access to resource
          content:
            application/json:
              schema:
                type: object
                example:
                  status: FORBIDDEN
                  message: Operator doesn't have access to resource
                  errorCode: ACCESS_FORBIDDEN
        "404":
          description: Entity with the provided id was not found
          content:
            application/json:
              schema:
                type: object
                example:
                  status: NOT_FOUND
                  message: Requested entity/entity provided in body was not found
                  readableMessage: user friendly message
                  errorCode: RESOURCE_NOT_FOUND
                  context: context
        "400":
          description: The request is invalid
          content:
            application/json:
              schema:
                type: object
                example:
                  status: BAD_REQUEST
                  message: Invalid request
                  errorCode: BAD_REQUEST
        "401":
          description: Unauthorized access
          content:
            application/json:
              schema:
                type: object
                example:
                  status: UNAUTHORIZED
                  message: Invalid or expired `accessToken`.
                  errorCode: INVALID_ACCESS_TOKEN
      security:
      - BearerAccessToken: []
    delete:
      tags:
      - Charge Points
      summary: Delete an existing charge point
      description: "Required scope: `charge-points:delete`"
      operationId: delete-charge-point
      parameters:
      - name: chargePointId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "204":
          description: Charge point deleted
        "403":
          description: Operator doesn't have access to resource
          content:
            application/json:
              schema:
                type: object
                example:
                  status: FORBIDDEN
                  message: Operator doesn't have access to resource
                  errorCode: ACCESS_FORBIDDEN
        "400":
          description: The request is invalid
          content:
            application/json:
              schema:
                type: object
                example:
                  status: BAD_REQUEST
                  message: Invalid request
                  errorCode: BAD_REQUEST
        "401":
          description: Unauthorized access
          content:
            application/json:
              schema:
                type: object
                example:
                  status: UNAUTHORIZED
                  message: Invalid or expired `accessToken`.
                  errorCode: INVALID_ACCESS_TOKEN
      security:
      - BearerAccessToken: []
    patch:
      tags:
      - Charge Points
      summary: Patch an existing charge point
      description: "Required scope: `charge-points:write`"
      operationId: patch-charge-point
      parameters:
      - name: chargePointId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchChargePoint'
        required: true
      responses:
        "200":
          description: Charge point updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ChargePoint'
        "403":
          description: Operator doesn't have access to resource
          content:
            application/json:
              schema:
                type: object
                example:
                  status: FORBIDDEN
                  message: Operator doesn't have access to resource
                  errorCode: ACCESS_FORBIDDEN
        "400":
          description: The request is invalid
          content:
            application/json:
              schema:
                type: object
                example:
                  status: BAD_REQUEST
                  message: Invalid request
                  errorCode: BAD_REQUEST
        "401":
          description: Unauthorized access
          content:
            application/json:
              schema:
                type: object
                example:
                  status: UNAUTHORIZED
                  message: Invalid or expired `accessToken`.
                  errorCode: INVALID_ACCESS_TOKEN
      security:
      - BearerAccessToken: []
  /api/v1/charges:
    get:
      tags:
      - Charges
      summary: Retrieve a list of charges.
      description: "Required scope: `charge-transactions:read`"
      operationId: get-charges
      parameters:
      - name: page
        in: query
        description: page number to retrieve (starts with 0)
        schema:
          type: integer
          format: int32
          default: 0
        example: "1"
      - name: perPage
        in: query
        description: "number of items per page (between 1 and 100, default 10)"
        schema:
          type: integer
          format: int32
          default: 10
        example: "10"
      - name: teamId
        in: query
        schema:
          type: integer
          description: Filter to retrieve charges with specified `teamId`
          format: int64
          nullable: true
          example: 13
      - name: chargePointId
        in: query
        schema:
          type: integer
          description: Filter to retrieve charges with specified `chargePointId`
          format: int64
          nullable: true
          example: 10
      - name: siteId
        in: query
        schema:
          type: integer
          description: Filter to retrieve charges with specified `siteId`
          format: int64
          nullable: true
          example: 5
      - name: state
        in: query
        schema:
          type: string
          description: Filter to retrieve charges by `state`
          nullable: true
          example: charging
          enum:
          - reserved
          - starting
          - charging
          - stopping
          - paused
          - scheduled
          - stopped
          - completed
      - name: fromDate
        in: query
        schema:
          type: string
          description: "Filter to retrieve charges where `createdAt` >= `fromDate`\
            \ (ISO8601: yyyy-MM-ddTHH:mm:ssZ)"
          format: date-time
          nullable: true
          example: 2022-05-22T09:30:03Z
      - name: toDate
        in: query
        schema:
          type: string
          description: "Filter to retrieve charges where `createdAt` <= `toDate` (ISO8601:\
            \ yyyy-MM-ddTHH:mm:ssZ)"
          format: date-time
          nullable: true
          example: 2022-05-22T09:30:03Z
      - name: chargeAuthType
        in: query
        schema:
          nullable: true
          allOf:
          - $ref: '#/components/schemas/ChargeAuthenticationType'
          - description: "Filter to retrieve charges by the charge authentication\
              \ type, must be combined with `chargeAuthId`"
            example: vehicleId
      - name: chargeAuthId
        in: query
        schema:
          type: string
          description: "Filter to retrieve charges by the charge authentication id,\
            \ must be combined with `chargeAuthType`</br>*Note*: for type vehicleId\
            \ `chargeAuthId` must not include the VID: prefix"
          nullable: true
          example: 38C58DB85XXX
      - name: partnerExternalId
        in: query
        schema:
          type: string
          description: "Filter charges by `partnerExternalId`, to filter only resources\
            \ without `partnerExternalId` *use* `partnerExternalId=\"\"`"
          nullable: true
          example: "10001"
      - name: operatorRole
        in: query
        schema:
          nullable: true
          allOf:
          - $ref: '#/components/schemas/OperatorRole'
          - description: Filter to indicate the desired role to list charges</br>e.g
              owner will always deliver charges from the operator charge points</br>payer
              will deliver charges paid by the operator
            example: owner
            default: owner
      responses:
        "200":
          description: List of charges that match the criteria
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MontaPage_ChargeDto_'
        "401":
          description: Unauthorized access
          content:
            application/json:
              schema:
                type: object
                example:
                  status: UNAUTHORIZED
                  message: Invalid or expired `accessToken`.
                  errorCode: INVALID_ACCESS_TOKEN
        "400":
          description: The request is invalid
          content:
            application/json:
              schema:
                type: object
                example:
                  status: BAD_REQUEST
                  message: Invalid request
                  errorCode: BAD_REQUEST
      security:
      - BearerAccessToken: []
    post:
      tags:
      - Charges
      summary: Start a charge.
      description: "Required scope: `control-charging:write`"
      operationId: start-charge
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/StartChargeRequest'
        required: true
      responses:
        "200":
          description: Charge successfully started
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Charge'
        "404":
          description: Entity with the provided id was not found
          content:
            application/json:
              schema:
                type: object
                example:
                  status: NOT_FOUND
                  message: Requested entity/entity provided in body was not found
                  readableMessage: user friendly message
                  errorCode: RESOURCE_NOT_FOUND
                  context: context
        "400":
          description: The request is invalid
          content:
            application/json:
              schema:
                type: object
                example:
                  status: BAD_REQUEST
                  message: Invalid request
                  errorCode: BAD_REQUEST
        "401":
          description: Unauthorized access
          content:
            application/json:
              schema:
                type: object
                example:
                  status: UNAUTHORIZED
                  message: Invalid or expired `accessToken`.
                  errorCode: INVALID_ACCESS_TOKEN
      security:
      - BearerAccessToken: []
  /api/v1/charges/insights:
    get:
      tags:
      - Charges Insights
      summary: Retrieve insights about charges.
      description: |-
        Required scope: `charge-transactions:read`.
        **Deprecated, use `/insights/charges/driver-report` and `/insights/charges/charger-report` instead.**
      operationId: get-charges-insights
      parameters:
      - name: fromDate
        in: query
        required: true
        schema:
          pattern: "^(\\d{4}-\\d{2}-\\d{2})$"
          type: string
          description: "Filter to retrieve charge insights created from date (YYYY-MM-DD),\
            \ we expect a date in UTC</br>The maximum gap between from and to data\
            \ cannot be longer than 31 days"
          format: date
          example: 2022-05-01
      - name: toDate
        in: query
        required: true
        schema:
          pattern: "^(\\d{4}-\\d{2}-\\d{2})$"
          type: string
          description: "Filter to retrieve charge insights created to date (YYYY-MM-DD),\
            \ we expect a date in UTC</br>The maximum gap between from and to data\
            \ cannot be longer than 31 days"
          format: date
          example: 2022-05-30
      - name: teamId
        in: query
        schema:
          type: integer
          description: Filter to retrieve charges insights by the specified `teamId`
          format: int64
          nullable: true
          example: 13
      - name: chargePointId
        in: query
        schema:
          type: integer
          description: Filter to retrieve charges insights by the specified `chargePointId`
          format: int64
          nullable: true
          example: 13
      - name: siteId
        in: query
        schema:
          type: integer
          description: Filter to retrieve charges insights by the specified `siteId`
          format: int64
          nullable: true
          example: 13
      - name: teamMemberId
        in: query
        schema:
          type: integer
          description: Filter to retrieve charges insights by the specified `teamMemberId`
          format: int64
          nullable: true
          example: 13
      responses:
        "200":
          description: Charge insights for the given filter
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ChargesInsight'
        "401":
          description: Unauthorized access
          content:
            application/json:
              schema:
                type: object
                example:
                  status: UNAUTHORIZED
                  message: Invalid or expired `accessToken`.
                  errorCode: INVALID_ACCESS_TOKEN
        "400":
          description: The request is invalid
          content:
            application/json:
              schema:
                type: object
                example:
                  status: BAD_REQUEST
                  message: Invalid request
                  errorCode: BAD_REQUEST
      deprecated: true
      security:
      - BearerAccessToken: []
      x-sunset: 2024-04-01
  /api/v1/charges/{chargeId}:
    get:
      tags:
      - Charges
      summary: Retrieve a single charge.
      description: "Required scope: `charge-transactions:read`"
      operationId: get-charge
      parameters:
      - name: chargeId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: Charge with provided id
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Charge'
        "403":
          description: Operator doesn't have access to resource
          content:
            application/json:
              schema:
                type: object
                example:
                  status: FORBIDDEN
                  message: Operator doesn't have access to resource
                  errorCode: ACCESS_FORBIDDEN
        "404":
          description: Entity with the provided id was not found
          content:
            application/json:
              schema:
                type: object
                example:
                  status: NOT_FOUND
                  message: Requested entity/entity provided in body was not found
                  readableMessage: user friendly message
                  errorCode: RESOURCE_NOT_FOUND
                  context: context
        "400":
          description: The request is invalid
          content:
            application/json:
              schema:
                type: object
                example:
                  status: BAD_REQUEST
                  message: Invalid request
                  errorCode: BAD_REQUEST
        "401":
          description: Unauthorized access
          content:
            application/json:
              schema:
                type: object
                example:
                  status: UNAUTHORIZED
                  message: Invalid or expired `accessToken`.
                  errorCode: INVALID_ACCESS_TOKEN
      security:
      - BearerAccessToken: []
    patch:
      tags:
      - Charges
      summary: Patch an existing charge
      description: "Required scope: `charges:write`"
      operationId: patch-charge
      parameters:
      - name: chargeId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchCharge'
        required: true
      responses:
        "200":
          description: Charge updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Charge'
        "403":
          description: Operator doesn't have access to resource
          content:
            application/json:
              schema:
                type: object
                example:
                  status: FORBIDDEN
                  message: Operator doesn't have access to resource
                  errorCode: ACCESS_FORBIDDEN
        "400":
          description: The request is invalid
          content:
            application/json:
              schema:
                type: object
                example:
                  status: BAD_REQUEST
                  message: Invalid request
                  errorCode: BAD_REQUEST
        "401":
          description: Unauthorized access
          content:
            application/json:
              schema:
                type: object
                example:
                  status: UNAUTHORIZED
                  message: Invalid or expired `accessToken`.
                  errorCode: INVALID_ACCESS_TOKEN
      security:
      - BearerAccessToken: []
  /api/v1/charges/{chargeId}/breakdown:
    get:
      tags:
      - Charges
      summary: Retrieve a charge price and cost breakdown
      description: "Required scope: `charges:read`*Note*: Please be aware that this\
        \ endpoint is currently in the BETA phase,calculations may return slightly\
        \ varying results, and the payload can change."
      operationId: get-charge-breakdown
      parameters:
      - name: chargeId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: Charge Breakdown for the given id
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ChargeBreakdown'
        "403":
          description: Operator doesn't have access to resource
          content:
            application/json:
              schema:
                type: object
                example:
                  status: FORBIDDEN
                  message: Operator doesn't have access to resource
                  errorCode: ACCESS_FORBIDDEN
        "400":
          description: The request is invalid
          content:
            application/json:
              schema:
                type: object
                example:
                  status: BAD_REQUEST
                  message: Invalid request
                  errorCode: BAD_REQUEST
        "401":
          description: Unauthorized access
          content:
            application/json:
              schema:
                type: object
                example:
                  status: UNAUTHORIZED
                  message: Invalid or expired `accessToken`.
                  errorCode: INVALID_ACCESS_TOKEN
      security:
      - BearerAccessToken: []
  /api/v1/charges/{chargeId}/restart:
    get:
      tags:
      - Charges
      summary: Restart or start a reserved charge.
      description: "Required scope: `control-charging:write`"
      operationId: restart-charge
      parameters:
      - name: chargeId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: Successfully restarted charge/started reserved charge
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Charge'
        "404":
          description: Entity with the provided id was not found
          content:
            application/json:
              schema:
                type: object
                example:
                  status: NOT_FOUND
                  message: Requested entity/entity provided in body was not found
                  readableMessage: user friendly message
                  errorCode: RESOURCE_NOT_FOUND
                  context: context
        "403":
          description: Operator doesn't have access to resource
          content:
            application/json:
              schema:
                type: object
                example:
                  status: FORBIDDEN
                  message: Operator doesn't have access to resource
                  errorCode: ACCESS_FORBIDDEN
        "400":
          description: The request is invalid
          content:
            application/json:
              schema:
                type: object
                example:
                  status: BAD_REQUEST
                  message: Invalid request
                  errorCode: BAD_REQUEST
        "401":
          description: Unauthorized access
          content:
            application/json:
              schema:
                type: object
                example:
                  status: UNAUTHORIZED
                  message: Invalid or expired `accessToken`.
                  errorCode: INVALID_ACCESS_TOKEN
      security:
      - BearerAccessToken: []
  /api/v1/charges/{chargeId}/stop:
    get:
      tags:
      - Charges
      summary: Stop a charge.
      description: "Required scope: `control-charging:write`"
      operationId: stop-charge
      parameters:
      - name: chargeId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: Successfully stopped a charge
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Charge'
        "404":
          description: Entity with the provided id was not found
          content:
            application/json:
              schema:
                type: object
                example:
                  status: NOT_FOUND
                  message: Requested entity/entity provided in body was not found
                  readableMessage: user friendly message
                  errorCode: RESOURCE_NOT_FOUND
                  context: context
        "403":
          description: Operator doesn't have access to resource
          content:
            application/json:
              schema:
                type: object
                example:
                  status: FORBIDDEN
                  message: Operator doesn't have access to resource
                  errorCode: ACCESS_FORBIDDEN
        "400":
          description: The request is invalid
          content:
            application/json:
              schema:
                type: object
                example:
                  status: BAD_REQUEST
                  message: Invalid request
                  errorCode: BAD_REQUEST
        "401":
          description: Unauthorized access
          content:
            application/json:
              schema:
                type: object
                example:
                  status: UNAUTHORIZED
                  message: Invalid or expired `accessToken`.
                  errorCode: INVALID_ACCESS_TOKEN
      security:
      - BearerAccessToken: []
  /api/v1/consumers/me:
    get:
      tags:
      - Consumer
      summary: Obtain information about current API Consumer
      operationId: get-current-consumer
      responses:
        "200":
          description: Successfully retrieved current consumer
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Consumer'
        "401":
          description: Unauthorized access
          content:
            application/json:
              schema:
                type: object
                example:
                  status: UNAUTHORIZED
                  message: Invalid or expired `accessToken`.
                  errorCode: INVALID_ACCESS_TOKEN
        "400":
          description: The request is invalid
          content:
            application/json:
              schema:
                type: object
                example:
                  status: BAD_REQUEST
                  message: Invalid request
                  errorCode: BAD_REQUEST
      security:
      - BearerAccessToken: []
  /api/v1/countries:
    get:
      tags:
      - Countries
      summary: 'Retrieve a countries. '
      description: "Note: no pagination support"
      operationId: getCountries
      parameters: []
      responses:
        "200":
          description: List of countries
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MontaPage_CountryDto_'
        "400":
          description: The request is invalid
          content:
            application/json:
              schema:
                type: object
                example:
                  status: BAD_REQUEST
                  message: Invalid request
                  errorCode: BAD_REQUEST
        "401":
          description: Unauthorized access
          content:
            application/json:
              schema:
                type: object
                example:
                  status: UNAUTHORIZED
                  message: Invalid or expired `accessToken`.
                  errorCode: INVALID_ACCESS_TOKEN
      security:
      - BearerAccessToken: []
  /api/v1/countries/{id}:
    get:
      tags:
      - Countries
      summary: Retrieve a country.
      operationId: getCountry
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: Country with provided id
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Country'
        "400":
          description: The request is invalid
          content:
            application/json:
              schema:
                type: object
                example:
                  status: BAD_REQUEST
                  message: Invalid request
                  errorCode: BAD_REQUEST
        "401":
          description: Unauthorized access
          content:
            application/json:
              schema:
                type: object
                example:
                  status: UNAUTHORIZED
                  message: Invalid or expired `accessToken`.
                  errorCode: INVALID_ACCESS_TOKEN
      security:
      - BearerAccessToken: []
  /api/v1/country-areas:
    get:
      tags:
      - Country Areas
      summary: Retrieve a country areas.
      description: "Note: no pagination support"
      operationId: getCountriesAreas
      parameters:
      - name: countryId
        in: query
        required: true
        schema:
          minimum: 0
          exclusiveMinimum: true
          required:
          - "true"
          type: integer
          description: Allows to filter country areas by country Id
          format: int64
          example: 13
      responses:
        "200":
          description: List of country areas
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MontaPage_CountryAreaDto_'
        "400":
          description: The request is invalid
          content:
            application/json:
              schema:
                type: object
                example:
                  status: BAD_REQUEST
                  message: Invalid request
                  errorCode: BAD_REQUEST
        "401":
          description: Unauthorized access
          content:
            application/json:
              schema:
                type: object
                example:
                  status: UNAUTHORIZED
                  message: Invalid or expired `accessToken`.
                  errorCode: INVALID_ACCESS_TOKEN
        "404":
          description: Entity with the provided id was not found
          content:
            application/json:
              schema:
                type: object
                example:
                  status: NOT_FOUND
                  message: Requested entity/entity provided in body was not found
                  readableMessage: user friendly message
                  errorCode: RESOURCE_NOT_FOUND
                  context: context
      security:
      - BearerAccessToken: []
  /api/v1/country-areas/{id}:
    get:
      tags:
      - Country Areas
      summary: Retrieve a country area.
      operationId: getCountryArea
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: Country area with provided id
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CountryArea'
        "400":
          description: The request is invalid
          content:
            application/json:
              schema:
                type: object
                example:
                  status: BAD_REQUEST
                  message: Invalid request
                  errorCode: BAD_REQUEST
        "401":
          description: Unauthorized access
          content:
            application/json:
              schema:
                type: object
                example:
                  status: UNAUTHORIZED
                  message: Invalid or expired `accessToken`.
                  errorCode: INVALID_ACCESS_TOKEN
        "404":
          description: Entity with the provided id was not found
          content:
            application/json:
              schema:
                type: object
                example:
                  status: NOT_FOUND
                  message: Requested entity/entity provided in body was not found
                  readableMessage: user friendly message
                  errorCode: RESOURCE_NOT_FOUND
                  context: context
      security:
      - BearerAccessToken: []
  /api/v1/currencies:
    get:
      tags:
      - Currencies
      summary: Retrieve a list of currencies
      operationId: get-currencies
      parameters:
      - name: page
        in: query
        description: page number to retrieve (starts with 0)
        schema:
          type: integer
          format: int32
          default: 0
        example: "1"
      - name: perPage
        in: query
        description: "number of items per page (between 1 and 100, default 10)"
        schema:
          type: integer
          format: int32
          default: 10
        example: "10"
      - name: identifier
        in: query
        schema:
          required:
          - "false"
          type: string
          description: Allows to filter by ISO Alpha-3 currency code
          nullable: true
          example: eur
      responses:
        "200":
          description: List of currencies that match the criteria
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MontaPage_CurrencyDto_'
        "400":
          description: The request is invalid
          content:
            application/json:
              schema:
                type: object
                example:
                  status: BAD_REQUEST
                  message: Invalid request
                  errorCode: BAD_REQUEST
        "401":
          description: Unauthorized access
          content:
            application/json:
              schema:
                type: object
                example:
                  status: UNAUTHORIZED
                  message: Invalid or expired `accessToken`.
                  errorCode: INVALID_ACCESS_TOKEN
      security:
      - BearerAccessToken: []
  /api/v1/currencies/{currencyId}:
    get:
      tags:
      - Currencies
      summary: Retrieve a single currency
      operationId: get-currency
      parameters:
      - name: currencyId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: Currency with provided id
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CurrencyDto_4'
        "403":
          description: Operator doesn't have access to resource
          content:
            application/json:
              schema:
                type: object
                example:
                  status: FORBIDDEN
                  message: Operator doesn't have access to resource
                  errorCode: ACCESS_FORBIDDEN
        "404":
          description: Entity with the provided id was not found
          content:
            application/json:
              schema:
                type: object
                example:
                  status: NOT_FOUND
                  message: Requested entity/entity provided in body was not found
                  readableMessage: user friendly message
                  errorCode: RESOURCE_NOT_FOUND
                  context: context
        "400":
          description: The request is invalid
          content:
            application/json:
              schema:
                type: object
                example:
                  status: BAD_REQUEST
                  message: Invalid request
                  errorCode: BAD_REQUEST
        "401":
          description: Unauthorized access
          content:
            application/json:
              schema:
                type: object
                example:
                  status: UNAUTHORIZED
                  message: Invalid or expired `accessToken`.
                  errorCode: INVALID_ACCESS_TOKEN
      security:
      - BearerAccessToken: []
  /api/v1/insights/charges/charger-report:
    get:
      tags:
      - Insights
      summary: Retrieve insights about charge points.
      description: |-
        Required scope: `insights:read`

        Returns a list of charge points (owned by that `teamId`) with the number of charging sessions and the total Kwh consumed.
      operationId: get-insights-charges-charger-report
      parameters:
      - name: teamId
        in: query
        required: true
        schema:
          required:
          - "true"
          type: integer
          description: Filter to retrieve charge point insights by the specified `teamId`
          format: int64
          example: 13
      - name: chargePointIds
        in: query
        schema:
          required:
          - "false"
          type: string
          description: Filter to retrieve charges insights by the specified (comma-separated)
            list of `chargePointId`
          nullable: true
          example: "13,14,15"
      - name: fromDate
        in: query
        required: true
        schema:
          type: string
          description: "Filter to retrieve charge insights created from date, we expecta\
            \ date in UTC and ISO8601 (YYYY-MM-DD'T'HH:MM:SS'Z')</br>The maximum gap\
            \ between from and to data cannot be longer than 31 days"
          format: date
      - name: toDate
        in: query
        required: true
        schema:
          type: string
          description: "Filter to retrieve charge insights created to date, we expecta\
            \ date in UTC and ISO8601 (YYYY-MM-DD'T'HH:MM:SS'Z')</br>The maximum gap\
            \ between from and to data cannot be longer than 31 days"
          format: date
      responses:
        "200":
          description: Charger report for the given filter
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MontaPage_ChargesInsightChargerReportDto_'
        "401":
          description: Unauthorized access
          content:
            application/json:
              schema:
                type: object
                example:
                  status: UNAUTHORIZED
                  message: Invalid or expired `accessToken`.
                  errorCode: INVALID_ACCESS_TOKEN
        "400":
          description: The request is invalid
          content:
            application/json:
              schema:
                type: object
                example:
                  status: BAD_REQUEST
                  message: Invalid request
                  errorCode: BAD_REQUEST
      security:
      - BearerAccessToken: []
  /api/v1/insights/charges/driver-report:
    get:
      tags:
      - Insights
      summary: Retrieve insights about charges broken down by team members of a team.
      description: |-
        Required scope: `insights:read`

        Returns charge insights for the given teamId (and optionally `teamMemberIds`) broken down by team member.
        Takes only charges into consideration that were paid for by the provided `teamId`.

        Note: Any values related to money are in the teams' currency. You can fetch them from `GET /api/v1/teams/{teamId}`
      operationId: get-insights-charges-driver-report
      parameters:
      - name: teamId
        in: query
        required: true
        schema:
          required:
          - "true"
          type: integer
          description: Filter to retrieve charges insights by the specified `teamId`
          format: int64
          example: 13
      - name: teamMemberIds
        in: query
        schema:
          required:
          - "false"
          type: string
          description: Filter to retrieve charges insights by the specified (comma-separated)
            list of `teamMemberId`
          nullable: true
          example: "13,14,15"
      - name: fromDate
        in: query
        required: true
        schema:
          type: string
          description: "Filter to retrieve charge insights created from date, we expecta\
            \ date in UTC and ISO8601 (YYYY-MM-DD'T'HH:MM:SS'Z')</br>The maximum gap\
            \ between from and to data cannot be longer than 31 days"
          format: date
      - name: toDate
        in: query
        required: true
        schema:
          type: string
          description: "Filter to retrieve charge insights created to date, we expecta\
            \ date in UTC and ISO8601 (YYYY-MM-DD'T'HH:MM:SS'Z')</br>The maximum gap\
            \ between from and to data cannot be longer than 31 days"
          format: date
      - name: datesFilteredBy
        in: query
        schema:
          nullable: true
          allOf:
          - $ref: '#/components/schemas/DriverReportDatesFilteredBy'
          - type: string
            description: "Use this to determine if the report should be filtered based\
              \ on completion dates of charges or wallet transactions.</br></br>Accepted\
              \ values:</br>- `charge-transaction`: Generates report based on charges'\
              \ `completedAt`. Default.- `wallet-transaction`: Generates report based\
              \ on wallet transactions' `completedAt`. Will not include any charges\
              \ without wallet transactions."
            example: charge-transaction
            default: charge-transaction
      responses:
        "200":
          description: Driver report for the given filter
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MontaPage_ChargesInsightDriverReportDto_'
        "401":
          description: Unauthorized access
          content:
            application/json:
              schema:
                type: object
                example:
                  status: UNAUTHORIZED
                  message: Invalid or expired `accessToken`.
                  errorCode: INVALID_ACCESS_TOKEN
        "400":
          description: The request is invalid
          content:
            application/json:
              schema:
                type: object
                example:
                  status: BAD_REQUEST
                  message: Invalid request
                  errorCode: BAD_REQUEST
      security:
      - BearerAccessToken: []
  /api/v1/installer-jobs:
    get:
      tags:
      - Installer Jobs
      summary: Retrieve a list of installer jobs
      description: "Required scope: `installer-jobs:read`"
      operationId: get-installer-jobs
      parameters:
      - name: page
        in: query
        description: page number to retrieve (starts with 0)
        schema:
          type: integer
          format: int32
          default: 0
        example: "1"
      - name: perPage
        in: query
        description: "number of items per page (between 1 and 100, default 10)"
        schema:
          type: integer
          format: int32
          default: 10
        example: "10"
      - name: siteId
        in: query
        schema:
          required:
          - "false"
          type: integer
          description: Allows to filter list of installer jobs by a site id
          format: int64
          nullable: true
          example: 13
      - name: teamId
        in: query
        schema:
          required:
          - "false"
          type: integer
          description: Allows to filter list of installer jobs by a team id.
          format: int64
          nullable: true
          example: 19
      - name: includeDeleted
        in: query
        schema:
          required:
          - "false"
          type: boolean
          description: "If true, deleted installer jobs will be included in the response."
          nullable: true
          example: true
      responses:
        "200":
          description: List of installer jobs that match the criteria
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MontaPage_InstallerJobDto_'
        "400":
          description: The request is invalid
          content:
            application/json:
              schema:
                type: object
                example:
                  status: BAD_REQUEST
                  message: Invalid request
                  errorCode: BAD_REQUEST
        "401":
          description: Unauthorized access
          content:
            application/json:
              schema:
                type: object
                example:
                  status: UNAUTHORIZED
                  message: Invalid or expired `accessToken`.
                  errorCode: INVALID_ACCESS_TOKEN
      security:
      - BearerAccessToken: []
    post:
      tags:
      - Installer Jobs
      summary: Create an installer job
      description: "Create an installer job for a charge point site.<br>Required scope:\
        \ `installer-jobs:write`"
      operationId: post-installer-job
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateInstallerJobDto'
        required: true
      responses:
        "201":
          description: Installer job created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InstallerJob'
        "403":
          description: Operator doesn't have access to resource
          content:
            application/json:
              schema:
                type: object
                example:
                  status: FORBIDDEN
                  message: Operator doesn't have access to resource
                  errorCode: ACCESS_FORBIDDEN
        "400":
          description: The request is invalid
          content:
            application/json:
              schema:
                type: object
                example:
                  status: BAD_REQUEST
                  message: Invalid request
                  errorCode: BAD_REQUEST
        "401":
          description: Unauthorized access
          content:
            application/json:
              schema:
                type: object
                example:
                  status: UNAUTHORIZED
                  message: Invalid or expired `accessToken`.
                  errorCode: INVALID_ACCESS_TOKEN
      security:
      - BearerAccessToken: []
  /api/v1/installer-jobs/{installerJobId}:
    get:
      tags:
      - Installer Jobs
      summary: Retrieve a single installer job
      description: "Required scope: `installer-jobs:read`"
      operationId: get-installer-job
      parameters:
      - name: installerJobId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: Installer job with provided id
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InstallerJob'
        "403":
          description: Operator doesn't have access to resource
          content:
            application/json:
              schema:
                type: object
                example:
                  status: FORBIDDEN
                  message: Operator doesn't have access to resource
                  errorCode: ACCESS_FORBIDDEN
        "404":
          description: Entity with the provided id was not found
          content:
            application/json:
              schema:
                type: object
                example:
                  status: NOT_FOUND
                  message: Requested entity/entity provided in body was not found
                  readableMessage: user friendly message
                  errorCode: RESOURCE_NOT_FOUND
                  context: context
        "400":
          description: The request is invalid
          content:
            application/json:
              schema:
                type: object
                example:
                  status: BAD_REQUEST
                  message: Invalid request
                  errorCode: BAD_REQUEST
        "401":
          description: Unauthorized access
          content:
            application/json:
              schema:
                type: object
                example:
                  status: UNAUTHORIZED
                  message: Invalid or expired `accessToken`.
                  errorCode: INVALID_ACCESS_TOKEN
      security:
      - BearerAccessToken: []
    delete:
      tags:
      - Installer Jobs
      summary: Delete an existing installer job
      description: "Required scope: `installer-jobs:delete`"
      operationId: delete-installer-job
      parameters:
      - name: installerJobId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "204":
          description: Installer Job deleted
        "403":
          description: Operator doesn't have access to resource
          content:
            application/json:
              schema:
                type: object
                example:
                  status: FORBIDDEN
                  message: Operator doesn't have access to resource
                  errorCode: ACCESS_FORBIDDEN
        "400":
          description: The request is invalid
          content:
            application/json:
              schema:
                type: object
                example:
                  status: BAD_REQUEST
                  message: Invalid request
                  errorCode: BAD_REQUEST
        "401":
          description: Unauthorized access
          content:
            application/json:
              schema:
                type: object
                example:
                  status: UNAUTHORIZED
                  message: Invalid or expired `accessToken`.
                  errorCode: INVALID_ACCESS_TOKEN
      security:
      - BearerAccessToken: []
  /api/v1/operators:
    get:
      tags:
      - Operators
      summary: Retrieve operators
      description: "Required scope: `operators`"
      operationId: get-operators
      parameters:
      - name: page
        in: query
        schema:
          type: integer
          description: page number to retrieve (starts with 0)
          format: int32
          nullable: true
          example: 1
          default: 0
      - name: perPage
        in: query
        schema:
          type: integer
          format: int32
          nullable: true
      responses:
        "200":
          description: List of operators that match the criteria
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MontaPage_OperatorDto_'
        "400":
          description: The request is invalid
          content:
            application/json:
              schema:
                type: object
                example:
                  status: BAD_REQUEST
                  message: Invalid request
                  errorCode: BAD_REQUEST
        "401":
          description: Unauthorized access
          content:
            application/json:
              schema:
                type: object
                example:
                  status: UNAUTHORIZED
                  message: Invalid or expired `accessToken`.
                  errorCode: INVALID_ACCESS_TOKEN
      security:
      - BearerAccessToken: []
  /api/v1/operators/{id}:
    get:
      tags:
      - Operators
      summary: Retrieve an operator
      description: "Required scope: `operators`"
      operationId: get-operator
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: operator with provided id
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Operator'
        "403":
          description: Operator doesn't have access to resource
          content:
            application/json:
              schema:
                type: object
                example:
                  status: FORBIDDEN
                  message: Operator doesn't have access to resource
                  errorCode: ACCESS_FORBIDDEN
        "400":
          description: The request is invalid
          content:
            application/json:
              schema:
                type: object
                example:
                  status: BAD_REQUEST
                  message: Invalid request
                  errorCode: BAD_REQUEST
        "401":
          description: Unauthorized access
          content:
            application/json:
              schema:
                type: object
                example:
                  status: UNAUTHORIZED
                  message: Invalid or expired `accessToken`.
                  errorCode: INVALID_ACCESS_TOKEN
      security:
      - BearerAccessToken: []
  /api/v1/payment-terminals:
    get:
      tags:
      - Payment Terminals
      summary: Retrieve a list of payment terminals
      description: "Required scope: `payment-terminals:read`"
      operationId: get-payment-terminals
      parameters:
      - name: page
        in: query
        description: page number to retrieve (starts with 0)
        schema:
          type: integer
          format: int32
          default: 0
        example: "1"
      - name: perPage
        in: query
        description: "number of items per page (between 1 and 100, default 10)"
        schema:
          type: integer
          format: int32
          default: 10
        example: "10"
      - name: serial
        in: query
        schema:
          required:
          - "false"
          type: string
          description: Allows to filter list of terminals by a serial
          nullable: true
          example: XYZ123-DF-123
      - name: teamId
        in: query
        schema:
          required:
          - "false"
          type: integer
          description: Allows to filter list of terminals by a team id.
          format: int64
          nullable: true
          example: 19
      - name: includeDeleted
        in: query
        schema:
          required:
          - "false"
          type: boolean
          description: "If true, deleted entities will be included in the response."
          nullable: true
          example: true
      responses:
        "200":
          description: List of payment terminals that match the criteria
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MontaPage_PaymentTerminalDto_'
        "400":
          description: The request is invalid
          content:
            application/json:
              schema:
                type: object
                example:
                  status: BAD_REQUEST
                  message: Invalid request
                  errorCode: BAD_REQUEST
        "401":
          description: Unauthorized access
          content:
            application/json:
              schema:
                type: object
                example:
                  status: UNAUTHORIZED
                  message: Invalid or expired `accessToken`.
                  errorCode: INVALID_ACCESS_TOKEN
      security:
      - BearerAccessToken: []
  /api/v1/payment-terminals/{paymentTerminalId}:
    get:
      tags:
      - Payment Terminals
      summary: Retrieve a single payment terminal
      description: "Required scope: `payment-terminals:read`"
      operationId: get-payment-terminal
      parameters:
      - name: paymentTerminalId
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: Payment Terminal with provided id
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaymentTerminal'
        "403":
          description: Operator doesn't have access to resource
          content:
            application/json:
              schema:
                type: object
                example:
                  status: FORBIDDEN
                  message: Operator doesn't have access to resource
                  errorCode: ACCESS_FORBIDDEN
        "404":
          description: Entity with the provided id was not found
          content:
            application/json:
              schema:
                type: object
                example:
                  status: NOT_FOUND
                  message: Requested entity/entity provided in body was not found
                  readableMessage: user friendly message
                  errorCode: RESOURCE_NOT_FOUND
                  context: context
        "400":
          description: The request is invalid
          content:
            application/json:
              schema:
                type: object
                example:
                  status: BAD_REQUEST
                  message: Invalid request
                  errorCode: BAD_REQUEST
        "401":
          description: Unauthorized access
          content:
            application/json:
              schema:
                type: object
                example:
                  status: UNAUTHORIZED
                  message: Invalid or expired `accessToken`.
                  errorCode: INVALID_ACCESS_TOKEN
      security:
      - BearerAccessToken: []
  /api/v1/plans:
    get:
      tags:
      - Plans
      summary: Retrieve plans
      description: "Required scope: `plans:read`"
      operationId: get-plans
      parameters:
      - name: page
        in: query
        description: page number to retrieve (starts with 0)
        schema:
          type: integer
          format: int32
          default: 0
        example: "1"
      - name: perPage
        in: query
        description: "number of items per page (between 1 and 100, default 10)"
        schema:
          type: integer
          format: int32
          default: 10
        example: "10"
      responses:
        "200":
          description: List of plans that match the criteria
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MontaPage_PlanDto_'
        "400":
          description: The request is invalid
          content:
            application/json:
              schema:
                type: object
                example:
                  status: BAD_REQUEST
                  message: Invalid request
                  errorCode: BAD_REQUEST
        "401":
          description: Unauthorized access
          content:
            application/json:
              schema:
                type: object
                example:
                  status: UNAUTHORIZED
                  message: Invalid or expired `accessToken`.
                  errorCode: INVALID_ACCESS_TOKEN
      security:
      - BearerAccessToken: []
  /api/v1/plans/{id}:
    get:
      tags:
      - Plans
      summary: Retrieve a plan
      description: "Required scope: `plans:read`"
      operationId: get-plan
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: Plan with provided id
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Plan'
        "400":
          description: The request is invalid
          content:
            application/json:
              schema:
                type: object
                example:
                  status: BAD_REQUEST
                  message: Invalid request
                  errorCode: BAD_REQUEST
        "401":
          description: Unauthorized access
          content:
            application/json:
              schema:
                type: object
                example:
                  status: UNAUTHORIZED
                  message: Invalid or expired `accessToken`.
                  errorCode: INVALID_ACCESS_TOKEN
      security:
      - BearerAccessToken: []
  /api/v1/price-group-tags:
    get:
      tags:
      - Price Groups Tags
      summary: Retrieve price group tags.
      description: "Required scope: `price-groups:read`"
      operationId: get-price-group-tags
      parameters:
      - name: name
        in: query
        schema:
          type: string
          description: Filter to retrieve resources by the specified `name`.
          nullable: true
          example: Energy
      - name: partnerExternalId
        in: query
        schema:
          required:
          - "false"
          type: string
          description: "Filter resources by partnerExternalId, to filter only resources\
            \ without `partnerExternalId` *use* `partnerExternalId=\"\"`"
          nullable: true
          example: 1A2B
      responses:
        "200":
          description: Price group tags for a given filter
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MontaPage_PriceGroupTagDto_'
        "401":
          description: Unauthorized access
          content:
            application/json:
              schema:
                type: object
                example:
                  status: UNAUTHORIZED
                  message: Invalid or expired `accessToken`.
                  errorCode: INVALID_ACCESS_TOKEN
        "400":
          description: The request is invalid
          content:
            application/json:
              schema:
                type: object
                example:
                  status: BAD_REQUEST
                  message: Invalid request
                  errorCode: BAD_REQUEST
      security:
      - BearerAccessToken: []
    post:
      tags:
      - Price Groups Tags
      summary: Create a price group tag
      description: "Required scope: `price-groups:write`"
      operationId: post-price-group-tag
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreatePriceGroupTag'
        required: true
      responses:
        "201":
          description: Price group tag created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PriceGroupTag'
        "403":
          description: Operator doesn't have access to resource
          content:
            application/json:
              schema:
                type: object
                example:
                  status: FORBIDDEN
                  message: Operator doesn't have access to resource
                  errorCode: ACCESS_FORBIDDEN
        "404":
          description: Entity with the provided id was not found
          content:
            application/json:
              schema:
                type: object
                example:
                  status: NOT_FOUND
                  message: Requested entity/entity provided in body was not found
                  readableMessage: user friendly message
                  errorCode: RESOURCE_NOT_FOUND
                  context: context
        "400":
          description: The request is invalid
          content:
            application/json:
              schema:
                type: object
                example:
                  status: BAD_REQUEST
                  message: Invalid request
                  errorCode: BAD_REQUEST
        "401":
          description: Unauthorized access
          content:
            application/json:
              schema:
                type: object
                example:
                  status: UNAUTHORIZED
                  message: Invalid or expired `accessToken`.
                  errorCode: INVALID_ACCESS_TOKEN
      security:
      - BearerAccessToken: []
  /api/v1/price-group-tags/{id}:
    get:
      tags:
      - Price Groups Tags
      summary: Retrieve a single price group tag
      description: "Required scope: `price-groups:read`"
      operationId: get-price-group-tag
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: Price group tag with provided id
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PriceGroupTag'
        "403":
          description: Operator doesn't have access to resource
          content:
            application/json:
              schema:
                type: object
                example:
                  status: FORBIDDEN
                  message: Operator doesn't have access to resource
                  errorCode: ACCESS_FORBIDDEN
        "404":
          description: Entity with the provided id was not found
          content:
            application/json:
              schema:
                type: object
                example:
                  status: NOT_FOUND
                  message: Requested entity/entity provided in body was not found
                  readableMessage: user friendly message
                  errorCode: RESOURCE_NOT_FOUND
                  context: context
        "400":
          description: The request is invalid
          content:
            application/json:
              schema:
                type: object
                example:
                  status: BAD_REQUEST
                  message: Invalid request
                  errorCode: BAD_REQUEST
        "401":
          description: Unauthorized access
          content:
            application/json:
              schema:
                type: object
                example:
                  status: UNAUTHORIZED
                  message: Invalid or expired `accessToken`.
                  errorCode: INVALID_ACCESS_TOKEN
      security:
      - BearerAccessToken: []
    delete:
      tags:
      - Price Groups Tags
      summary: Delete an existing price group tag
      description: "Required scope: `price-groups:delete`"
      operationId: delete-price-group-tag
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: Price group tag deleted
        "403":
          description: Operator doesn't have access to resource
          content:
            application/json:
              schema:
                type: object
                example:
                  status: FORBIDDEN
                  message: Operator doesn't have access to resource
                  errorCode: ACCESS_FORBIDDEN
        "404":
          description: Entity with the provided id was not found
          content:
            application/json:
              schema:
                type: object
                example:
                  status: NOT_FOUND
                  message: Requested entity/entity provided in body was not found
                  readableMessage: user friendly message
                  errorCode: RESOURCE_NOT_FOUND
                  context: context
        "400":
          description: The request is invalid
          content:
            application/json:
              schema:
                type: object
                example:
                  status: BAD_REQUEST
                  message: Invalid request
                  errorCode: BAD_REQUEST
        "401":
          description: Unauthorized access
          content:
            application/json:
              schema:
                type: object
                example:
                  status: UNAUTHORIZED
                  message: Invalid or expired `accessToken`.
                  errorCode: INVALID_ACCESS_TOKEN
      security:
      - BearerAccessToken: []
    patch:
      tags:
      - Price Groups Tags
      summary: Update a price group tag
      description: "Required scope: `price-groups:write`"
      operationId: patch-price-group-tag
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchPriceGroupTag'
        required: true
      responses:
        "200":
          description: Price group tag updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PriceGroupTag'
        "403":
          description: Operator doesn't have access to resource
          content:
            application/json:
              schema:
                type: object
                example:
                  status: FORBIDDEN
                  message: Operator doesn't have access to resource
                  errorCode: ACCESS_FORBIDDEN
        "404":
          description: Entity with the provided id was not found
          content:
            application/json:
              schema:
                type: object
                example:
                  status: NOT_FOUND
                  message: Requested entity/entity provided in body was not found
                  readableMessage: user friendly message
                  errorCode: RESOURCE_NOT_FOUND
                  context: context
        "400":
          description: The request is invalid
          content:
            application/json:
              schema:
                type: object
                example:
                  status: BAD_REQUEST
                  message: Invalid request
                  errorCode: BAD_REQUEST
        "401":
          description: Unauthorized access
          content:
            application/json:
              schema:
                type: object
                example:
                  status: UNAUTHORIZED
                  message: Invalid or expired `accessToken`.
                  errorCode: INVALID_ACCESS_TOKEN
      security:
      - BearerAccessToken: []
  /api/v1/price-groups:
    get:
      tags:
      - Price Groups
      summary: Retrieve a list of price groups.
      description: "Required scope: `price-groups:read`"
      operationId: getPriceGroups
      parameters:
      - name: teamId
        in: query
        description: Filter to retrieve price groups with specified team id
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: List of price groups that match the criteria
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MontaPage_PriceGroupDto_'
        "400":
          description: The request is invalid
          content:
            application/json:
              schema:
                type: object
                example:
                  status: BAD_REQUEST
                  message: Invalid request
                  errorCode: BAD_REQUEST
        "401":
          description: Unauthorized access
          content:
            application/json:
              schema:
                type: object
                example:
                  status: UNAUTHORIZED
                  message: Invalid or expired `accessToken`.
                  errorCode: INVALID_ACCESS_TOKEN
      security:
      - BearerAccessToken: []
    post:
      tags:
      - Price Groups
      summary: Creates a price group
      description: "Required scope: `price-groups:write`"
      operationId: create-price-group
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateOrUpdatePriceGroupDto'
        required: true
      responses:
        "404":
          description: Team not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MontaAppResponse'
        "201":
          description: Price group successfully created
        "400":
          description: The request is invalid
          content:
            application/json:
              schema:
                type: object
                example:
                  status: BAD_REQUEST
                  message: Invalid request
                  errorCode: BAD_REQUEST
        "401":
          description: Unauthorized access
          content:
            application/json:
              schema:
                type: object
                example:
                  status: UNAUTHORIZED
                  message: Invalid or expired `accessToken`.
                  errorCode: INVALID_ACCESS_TOKEN
      security:
      - BearerAccessToken: []
  /api/v1/price-groups/{id}:
    get:
      tags:
      - Price Groups
      summary: Retrieve a price group.
      description: "Required scope: `price-groups:read`"
      operationId: getPriceGroup
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: Price group with provided id
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PriceGroup'
        "400":
          description: The request is invalid
          content:
            application/json:
              schema:
                type: object
                example:
                  status: BAD_REQUEST
                  message: Invalid request
                  errorCode: BAD_REQUEST
        "401":
          description: Unauthorized access
          content:
            application/json:
              schema:
                type: object
                example:
                  status: UNAUTHORIZED
                  message: Invalid or expired `accessToken`.
                  errorCode: INVALID_ACCESS_TOKEN
      security:
      - BearerAccessToken: []
    put:
      tags:
      - Price Groups
      summary: Updates a price group
      description: "Required scope: `price-groups:write`"
      operationId: update-price-group
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateOrUpdatePriceGroupDto'
        required: true
      responses:
        "404":
          description: Price group not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MontaAppResponse'
        "200":
          description: Price group successfully updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PriceGroup'
        "400":
          description: The request is invalid
          content:
            application/json:
              schema:
                type: object
                example:
                  status: BAD_REQUEST
                  message: Invalid request
                  errorCode: BAD_REQUEST
        "401":
          description: Unauthorized access
          content:
            application/json:
              schema:
                type: object
                example:
                  status: UNAUTHORIZED
                  message: Invalid or expired `accessToken`.
                  errorCode: INVALID_ACCESS_TOKEN
      security:
      - BearerAccessToken: []
    delete:
      tags:
      - Price Groups
      summary: Deletes a price group
      description: "Required scope: `price-groups:delete`"
      operationId: delete-price-group
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "404":
          description: Price group not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MontaAppResponse'
        "204":
          description: Price group successfully deleted
        "400":
          description: The request is invalid
          content:
            application/json:
              schema:
                type: object
                example:
                  status: BAD_REQUEST
                  message: Invalid request
                  errorCode: BAD_REQUEST
        "401":
          description: Unauthorized access
          content:
            application/json:
              schema:
                type: object
                example:
                  status: UNAUTHORIZED
                  message: Invalid or expired `accessToken`.
                  errorCode: INVALID_ACCESS_TOKEN
      security:
      - BearerAccessToken: []
  /api/v1/price-groups/{id}/apply:
    put:
      tags:
      - Price Groups
      summary: "Apply price group to charge points, sites or team members"
      description: "Required scope: `price-groups:write`"
      operationId: apply-price-group
      parameters:
      - name: id
        in: path
        required: true
        schema:
          minimum: 0
          exclusiveMinimum: true
          type: integer
          format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ApplyPriceGroup'
        required: true
      responses:
        "404":
          description: Price group not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MontaAppResponse'
        "200":
          description: Price group successfully applied to the selected entities
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PriceGroup'
        "400":
          description: The request is invalid
          content:
            application/json:
              schema:
                type: object
                example:
                  status: BAD_REQUEST
                  message: Invalid request
                  errorCode: BAD_REQUEST
        "401":
          description: Unauthorized access
          content:
            application/json:
              schema:
                type: object
                example:
                  status: UNAUTHORIZED
                  message: Invalid or expired `accessToken`.
                  errorCode: INVALID_ACCESS_TOKEN
      security:
      - BearerAccessToken: []
  /api/v1/price-groups/{id}/default:
    put:
      tags:
      - Price Groups
      summary: Sets a price group as default
      description: "Required scope: `price-groups:write`"
      operationId: set-default-price-group
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "404":
          description: Price group not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MontaAppResponse'
        "200":
          description: Price group successfully set as default
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PriceGroup'
        "400":
          description: The request is invalid
          content:
            application/json:
              schema:
                type: object
                example:
                  status: BAD_REQUEST
                  message: Invalid request
                  errorCode: BAD_REQUEST
        "401":
          description: Unauthorized access
          content:
            application/json:
              schema:
                type: object
                example:
                  status: UNAUTHORIZED
                  message: Invalid or expired `accessToken`.
                  errorCode: INVALID_ACCESS_TOKEN
      security:
      - BearerAccessToken: []
  /api/v1/prices/forecast:
    get:
      tags:
      - Prices Forecast
      summary: Retrieve prices forecast.
      description: "Prices can be forecasted for a charge point and optionally a price\
        \ group, when `priceGroupId` is not provided the charge point price group\
        \ will be used. </br> *Note*: This endpoint is in BETA phase and is subject\
        \ to changes in a near future release</br> </br>Required scope: `prices-forecast:read`"
      operationId: get-prices-forecast
      parameters:
      - name: chargePointId
        in: query
        schema:
          minimum: 0
          exclusiveMinimum: true
          type: integer
          description: Filter to retrieve prices forecast for the specified `chargePointId`
          format: int64
          example: 13
      - name: priceGroupId
        in: query
        schema:
          minimum: 0
          exclusiveMinimum: true
          type: integer
          description: Filter to retrieve prices forecast for the specified `priceGroupId`
          format: int64
          nullable: true
          example: 130
      - name: teamMemberId
        in: query
        schema:
          type: integer
          description: Filter to retrieve prices forecast for the specified `teamMemberId`
          format: int64
          nullable: true
          example: 13
      responses:
        "200":
          description: Prices Forecast for the given filter
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PricesForecast'
        "401":
          description: Unauthorized access
          content:
            application/json:
              schema:
                type: object
                example:
                  status: UNAUTHORIZED
                  message: Invalid or expired `accessToken`.
                  errorCode: INVALID_ACCESS_TOKEN
        "400":
          description: The request is invalid
          content:
            application/json:
              schema:
                type: object
                example:
                  status: BAD_REQUEST
                  message: Invalid request
                  errorCode: BAD_REQUEST
      security:
      - BearerAccessToken: []
  /api/v1/sites:
    get:
      tags:
      - Sites
      summary: Retrieve your (charge) sites.
      description: "Required scope: `charge-points:read`"
      operationId: get-sites
      parameters:
      - name: page
        in: query
        description: page number to retrieve (starts with 0)
        schema:
          type: integer
          format: int32
          default: 0
        example: "1"
      - name: perPage
        in: query
        description: "number of items per page (between 1 and 100, default 10)"
        schema:
          type: integer
          format: int32
          default: 10
        example: "10"
      - name: teamId
        in: query
        description: The team id from which sites will be filtered by
        schema:
          type: integer
          format: int64
        example: "13"
      - name: partnerExternalId
        in: query
        description: "Filter sites by partnerExternalId, to filter only resources\
          \ without `partnerExternalId` *use* `partnerExternalId=\"\"`"
        schema:
          type: string
      - name: sortByLocation
        in: query
        description: |-
          lat,long coordinates. If supplied, the Charge Points will be sorted in nearest first order relative
                              to this point. (Format: 55.7096,12.5856)
        schema:
          type: string
        example: "55.7096,12.5856"
      - name: includeDeleted
        in: query
        description: Includes deleted resources in the response
        required: false
        schema:
          type: boolean
          default: false
      responses:
        "200":
          description: List of sites that match the criteria
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MontaPage_SiteDto_'
        "400":
          description: The request is invalid
          content:
            application/json:
              schema:
                type: object
                example:
                  status: BAD_REQUEST
                  message: Invalid request
                  errorCode: BAD_REQUEST
        "401":
          description: Unauthorized access
          content:
            application/json:
              schema:
                type: object
                example:
                  status: UNAUTHORIZED
                  message: Invalid or expired `accessToken`.
                  errorCode: INVALID_ACCESS_TOKEN
      security:
      - BearerAccessToken: []
    post:
      tags:
      - Sites
      summary: Create a (charge) site
      description: "Required scope: `charge-points:write`"
      operationId: post-site
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateSite'
        required: true
      responses:
        "201":
          description: Site created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Site'
        "403":
          description: Operator doesn't have access to resource
          content:
            application/json:
              schema:
                type: object
                example:
                  status: FORBIDDEN
                  message: Operator doesn't have access to resource
                  errorCode: ACCESS_FORBIDDEN
        "400":
          description: The request is invalid
          content:
            application/json:
              schema:
                type: object
                example:
                  status: BAD_REQUEST
                  message: Invalid request
                  errorCode: BAD_REQUEST
        "401":
          description: Unauthorized access
          content:
            application/json:
              schema:
                type: object
                example:
                  status: UNAUTHORIZED
                  message: Invalid or expired `accessToken`.
                  errorCode: INVALID_ACCESS_TOKEN
      security:
      - BearerAccessToken: []
  /api/v1/sites/{siteId}:
    get:
      tags:
      - Sites
      summary: Retrieve a single (charge) site.
      description: "Required scope: `charge-points:read`"
      operationId: get-site
      parameters:
      - name: siteId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: Site with provided id
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Site'
        "403":
          description: Operator doesn't have access to resource
          content:
            application/json:
              schema:
                type: object
                example:
                  status: FORBIDDEN
                  message: Operator doesn't have access to resource
                  errorCode: ACCESS_FORBIDDEN
        "404":
          description: Entity with the provided id was not found
          content:
            application/json:
              schema:
                type: object
                example:
                  status: NOT_FOUND
                  message: Requested entity/entity provided in body was not found
                  readableMessage: user friendly message
                  errorCode: RESOURCE_NOT_FOUND
                  context: context
        "400":
          description: The request is invalid
          content:
            application/json:
              schema:
                type: object
                example:
                  status: BAD_REQUEST
                  message: Invalid request
                  errorCode: BAD_REQUEST
        "401":
          description: Unauthorized access
          content:
            application/json:
              schema:
                type: object
                example:
                  status: UNAUTHORIZED
                  message: Invalid or expired `accessToken`.
                  errorCode: INVALID_ACCESS_TOKEN
      security:
      - BearerAccessToken: []
    delete:
      tags:
      - Sites
      summary: Delete an existing (charge) site
      description: "*Note:* This action will also remove `Charge Points` from the\
        \ `Site`.</br></br>Required scope: `charge-points:delete`"
      operationId: delete-site
      parameters:
      - name: siteId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "204":
          description: Site deleted
        "403":
          description: Operator doesn't have access to resource
          content:
            application/json:
              schema:
                type: object
                example:
                  status: FORBIDDEN
                  message: Operator doesn't have access to resource
                  errorCode: ACCESS_FORBIDDEN
        "400":
          description: The request is invalid
          content:
            application/json:
              schema:
                type: object
                example:
                  status: BAD_REQUEST
                  message: Invalid request
                  errorCode: BAD_REQUEST
        "401":
          description: Unauthorized access
          content:
            application/json:
              schema:
                type: object
                example:
                  status: UNAUTHORIZED
                  message: Invalid or expired `accessToken`.
                  errorCode: INVALID_ACCESS_TOKEN
      security:
      - BearerAccessToken: []
    patch:
      tags:
      - Sites
      summary: Patch an existing (charge) site
      description: "Required scope: `charge-points:write`"
      operationId: patch-site
      parameters:
      - name: siteId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchSite'
        required: true
      responses:
        "200":
          description: Site updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Site'
        "403":
          description: Operator doesn't have access to resource
          content:
            application/json:
              schema:
                type: object
                example:
                  status: FORBIDDEN
                  message: Operator doesn't have access to resource
                  errorCode: ACCESS_FORBIDDEN
        "400":
          description: The request is invalid
          content:
            application/json:
              schema:
                type: object
                example:
                  status: BAD_REQUEST
                  message: Invalid request
                  errorCode: BAD_REQUEST
        "401":
          description: Unauthorized access
          content:
            application/json:
              schema:
                type: object
                example:
                  status: UNAUTHORIZED
                  message: Invalid or expired `accessToken`.
                  errorCode: INVALID_ACCESS_TOKEN
      security:
      - BearerAccessToken: []
  /api/v1/sponsored-charge-points:
    get:
      tags:
      - Sponsored Charge Points
      summary: Retrieve a list of sponsored charge points
      description: "Required scope: `sponsored-charge-points:read`"
      operationId: get-sponsored-charge-points
      parameters:
      - name: page
        in: query
        description: page number to retrieve (starts with 0)
        schema:
          type: integer
          format: int32
          default: 0
        example: "1"
      - name: perPage
        in: query
        description: "number of items per page (between 1 and 100, default 10)"
        schema:
          type: integer
          format: int32
          default: 10
        example: "10"
      - name: chargePointId
        in: query
        schema:
          required:
          - "false"
          type: integer
          description: Allows to filter list of sponsored charge points by a charge
            point id
          format: int64
          nullable: true
          example: 13
      - name: teamId
        in: query
        schema:
          required:
          - "false"
          type: integer
          description: Allows to filter list of sponsored charge points by a team
            id.
          format: int64
          nullable: true
          example: 19
      - name: includeDeleted
        in: query
        schema:
          type: boolean
          description: Filter to include deleted entities in the response
          example: false
      responses:
        "200":
          description: List of sponsored charges points that match the criteria
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MontaPage_SponsoredChargePointDto_'
        "400":
          description: The request is invalid
          content:
            application/json:
              schema:
                type: object
                example:
                  status: BAD_REQUEST
                  message: Invalid request
                  errorCode: BAD_REQUEST
        "401":
          description: Unauthorized access
          content:
            application/json:
              schema:
                type: object
                example:
                  status: UNAUTHORIZED
                  message: Invalid or expired `accessToken`.
                  errorCode: INVALID_ACCESS_TOKEN
      security:
      - BearerAccessToken: []
    post:
      tags:
      - Sponsored Charge Points
      summary: Create a sponsored charge point
      description: "Creates a sponsored charge point for a given user, the sponsorship\
        \ is automatically approved.</br></br>*Note:* a charge point can only be sponsored\
        \ to one user_id</br>Required scope: `sponsored-charge-points:write`"
      operationId: post-sponsored-charge-point
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateSponsoredChargePointDto'
        required: true
      responses:
        "201":
          description: Sponsored charge point created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SponsoredChargePoint'
        "403":
          description: Operator doesn't have access to resource
          content:
            application/json:
              schema:
                type: object
                example:
                  status: FORBIDDEN
                  message: Operator doesn't have access to resource
                  errorCode: ACCESS_FORBIDDEN
        "400":
          description: The request is invalid
          content:
            application/json:
              schema:
                type: object
                example:
                  status: BAD_REQUEST
                  message: Invalid request
                  errorCode: BAD_REQUEST
        "401":
          description: Unauthorized access
          content:
            application/json:
              schema:
                type: object
                example:
                  status: UNAUTHORIZED
                  message: Invalid or expired `accessToken`.
                  errorCode: INVALID_ACCESS_TOKEN
      security:
      - BearerAccessToken: []
  /api/v1/sponsored-charge-points/{sponsoredChargePointId}:
    get:
      tags:
      - Sponsored Charge Points
      summary: Retrieve a single sponsored charge point
      description: "Required scope: `sponsored-charge-points:read`"
      operationId: get-sponsored-charge-point
      parameters:
      - name: sponsoredChargePointId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: Sponsored charge point with provided id
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SponsoredChargePoint'
        "403":
          description: Operator doesn't have access to resource
          content:
            application/json:
              schema:
                type: object
                example:
                  status: FORBIDDEN
                  message: Operator doesn't have access to resource
                  errorCode: ACCESS_FORBIDDEN
        "404":
          description: Entity with the provided id was not found
          content:
            application/json:
              schema:
                type: object
                example:
                  status: NOT_FOUND
                  message: Requested entity/entity provided in body was not found
                  readableMessage: user friendly message
                  errorCode: RESOURCE_NOT_FOUND
                  context: context
        "400":
          description: The request is invalid
          content:
            application/json:
              schema:
                type: object
                example:
                  status: BAD_REQUEST
                  message: Invalid request
                  errorCode: BAD_REQUEST
        "401":
          description: Unauthorized access
          content:
            application/json:
              schema:
                type: object
                example:
                  status: UNAUTHORIZED
                  message: Invalid or expired `accessToken`.
                  errorCode: INVALID_ACCESS_TOKEN
      security:
      - BearerAccessToken: []
    delete:
      tags:
      - Sponsored Charge Points
      summary: Delete an existing sponsored charge point
      description: "Required scope: `sponsored-charge-points:delete`"
      operationId: delete-sponsored-charge-point
      parameters:
      - name: sponsoredChargePointId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "204":
          description: Sponsored Charge Point deleted
        "403":
          description: Operator doesn't have access to resource
          content:
            application/json:
              schema:
                type: object
                example:
                  status: FORBIDDEN
                  message: Operator doesn't have access to resource
                  errorCode: ACCESS_FORBIDDEN
        "400":
          description: The request is invalid
          content:
            application/json:
              schema:
                type: object
                example:
                  status: BAD_REQUEST
                  message: Invalid request
                  errorCode: BAD_REQUEST
        "401":
          description: Unauthorized access
          content:
            application/json:
              schema:
                type: object
                example:
                  status: UNAUTHORIZED
                  message: Invalid or expired `accessToken`.
                  errorCode: INVALID_ACCESS_TOKEN
      security:
      - BearerAccessToken: []
    patch:
      tags:
      - Sponsored Charge Points
      summary: Update a sponsored charge point
      description: "Required scope: `sponsored-charge-points:write`"
      operationId: patch-sponsored-charge-point
      parameters:
      - name: sponsoredChargePointId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchSponsoredChargePoint'
        required: true
      responses:
        "200":
          description: Updated sponsored charge point with provided id
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SponsoredChargePoint'
        "400":
          description: The request is invalid
          content:
            application/json:
              schema:
                type: object
                example:
                  status: BAD_REQUEST
                  message: Invalid request
                  errorCode: BAD_REQUEST
        "401":
          description: Unauthorized access
          content:
            application/json:
              schema:
                type: object
                example:
                  status: UNAUTHORIZED
                  message: Invalid or expired `accessToken`.
                  errorCode: INVALID_ACCESS_TOKEN
      security:
      - BearerAccessToken: []
  /api/v1/subscription-purchases:
    get:
      tags:
      - Subscription Purchases
      summary: Retrieve a list of subscription purchases
      description: "Required scope: `subscriptions:read`"
      operationId: get-subscription-purchases
      parameters:
      - name: page
        in: query
        description: page number to retrieve (starts with 0)
        schema:
          type: integer
          format: int32
          default: 0
        example: "1"
      - name: perPage
        in: query
        description: "number of items per page (between 1 and 100, default 10)"
        schema:
          type: integer
          format: int32
          default: 10
        example: "10"
      - name: subscriptionId
        in: query
        schema:
          required:
          - "false"
          type: integer
          description: Filter subscription purchases by subscription id
          format: int64
          nullable: true
          example: 1
      - name: includeDeleted
        in: query
        schema:
          required:
          - "false"
          type: boolean
          description: Includes deleted resources in the response
          nullable: true
          example: true
      responses:
        "200":
          description: List of subscription purchases that match the criteria
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MontaPage_SubscriptionPurchaseDto_'
        "400":
          description: The request is invalid
          content:
            application/json:
              schema:
                type: object
                example:
                  status: BAD_REQUEST
                  message: Invalid request
                  errorCode: BAD_REQUEST
        "401":
          description: Unauthorized access
          content:
            application/json:
              schema:
                type: object
                example:
                  status: UNAUTHORIZED
                  message: Invalid or expired `accessToken`.
                  errorCode: INVALID_ACCESS_TOKEN
      security:
      - BearerAccessToken: []
  /api/v1/subscription-purchases/{subscriptionPurchaseId}:
    get:
      tags:
      - Subscription Purchases
      summary: Retrieve a subscription purchase
      description: "Required scope: `subscriptions:read`"
      operationId: get-subscription-purchase
      parameters:
      - name: subscriptionPurchaseId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: Subscription purchase with provided id
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SubscriptionPurchase'
        "400":
          description: The request is invalid
          content:
            application/json:
              schema:
                type: object
                example:
                  status: BAD_REQUEST
                  message: Invalid request
                  errorCode: BAD_REQUEST
        "401":
          description: Unauthorized access
          content:
            application/json:
              schema:
                type: object
                example:
                  status: UNAUTHORIZED
                  message: Invalid or expired `accessToken`.
                  errorCode: INVALID_ACCESS_TOKEN
      security:
      - BearerAccessToken: []
  /api/v1/subscriptions:
    get:
      tags:
      - Subscriptions
      summary: Retrieve a list of subscriptions
      description: "Required scope: `subscriptions:read`"
      operationId: get-subscriptions
      parameters:
      - name: page
        in: query
        description: page number to retrieve (starts with 0)
        schema:
          type: integer
          format: int32
          default: 0
        example: "1"
      - name: perPage
        in: query
        description: "number of items per page (between 1 and 100, default 10)"
        schema:
          type: integer
          format: int32
          default: 10
        example: "10"
      - name: planId
        in: query
        schema:
          required:
          - "false"
          type: integer
          description: Filter subscription by plan
          format: int64
          nullable: true
          example: 1
      - name: chargePointId
        in: query
        schema:
          required:
          - "false"
          type: integer
          description: Filter subscriptions by charge point
          format: int64
          nullable: true
          example: 1
      - name: subscriptionPurchaseId
        in: query
        schema:
          required:
          - "false"
          type: integer
          description: Filter subscriptions by subscription purchase id. Should return
            max. 1 subscription.
          format: int64
          nullable: true
          example: 42
      responses:
        "200":
          description: List of Charge Point subscriptions that match the criteria
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MontaPage_SubscriptionDto_'
        "400":
          description: The request is invalid
          content:
            application/json:
              schema:
                type: object
                example:
                  status: BAD_REQUEST
                  message: Invalid request
                  errorCode: BAD_REQUEST
        "401":
          description: Unauthorized access
          content:
            application/json:
              schema:
                type: object
                example:
                  status: UNAUTHORIZED
                  message: Invalid or expired `accessToken`.
                  errorCode: INVALID_ACCESS_TOKEN
      security:
      - BearerAccessToken: []
    post:
      tags:
      - Subscriptions
      summary: Create subscription
      description: "Required scope: `subscriptions:write`"
      operationId: create-subscription
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateSubscription'
        required: true
      responses:
        "201":
          description: The created subscription
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Subscription'
        "400":
          description: The request is invalid
          content:
            application/json:
              schema:
                type: object
                example:
                  status: BAD_REQUEST
                  message: Invalid request
                  errorCode: BAD_REQUEST
        "401":
          description: Unauthorized access
          content:
            application/json:
              schema:
                type: object
                example:
                  status: UNAUTHORIZED
                  message: Invalid or expired `accessToken`.
                  errorCode: INVALID_ACCESS_TOKEN
      security:
      - BearerAccessToken: []
  /api/v1/subscriptions/{subscriptionId}:
    get:
      tags:
      - Subscriptions
      summary: Retrieve a subscription
      description: "Required scope: `subscriptions:read`"
      operationId: get-subscription
      parameters:
      - name: subscriptionId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: Subscription with provided ID
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Subscription'
        "400":
          description: The request is invalid
          content:
            application/json:
              schema:
                type: object
                example:
                  status: BAD_REQUEST
                  message: Invalid request
                  errorCode: BAD_REQUEST
        "401":
          description: Unauthorized access
          content:
            application/json:
              schema:
                type: object
                example:
                  status: UNAUTHORIZED
                  message: Invalid or expired `accessToken`.
                  errorCode: INVALID_ACCESS_TOKEN
      security:
      - BearerAccessToken: []
    delete:
      tags:
      - Subscriptions
      summary: Cancel subscription
      description: "Required scope: `subscriptions:delete`"
      operationId: delete-subscription
      parameters:
      - name: subscriptionId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "204":
          description: Subscription successfully canceled
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Unit'
        "400":
          description: The request is invalid
          content:
            application/json:
              schema:
                type: object
                example:
                  status: BAD_REQUEST
                  message: Invalid request
                  errorCode: BAD_REQUEST
        "401":
          description: Unauthorized access
          content:
            application/json:
              schema:
                type: object
                example:
                  status: UNAUTHORIZED
                  message: Invalid or expired `accessToken`.
                  errorCode: INVALID_ACCESS_TOKEN
      security:
      - BearerAccessToken: []
  /api/v1/subscriptions/{subscriptionId}/approve:
    post:
      tags:
      - Subscriptions
      summary: Approve subscription
      description: "Required scope: `subscriptions:write`"
      operationId: approve-subscription
      parameters:
      - name: subscriptionId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ApproveSubscription'
        required: true
      responses:
        "200":
          description: The updated subscription
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Subscription'
        "400":
          description: The request is invalid
          content:
            application/json:
              schema:
                type: object
                example:
                  status: BAD_REQUEST
                  message: Invalid request
                  errorCode: BAD_REQUEST
        "401":
          description: Unauthorized access
          content:
            application/json:
              schema:
                type: object
                example:
                  status: UNAUTHORIZED
                  message: Invalid or expired `accessToken`.
                  errorCode: INVALID_ACCESS_TOKEN
      security:
      - BearerAccessToken: []
  /api/v1/tariff-period-groups:
    get:
      tags:
      - Tariff Period Groups
      summary: Retrieve Tariff Period Groups by tariff id
      description: "Required scope: `tariff:read`"
      operationId: get-period-groups
      parameters:
      - name: tariffId
        in: query
        description: Filter to retrieve tariff period groups by tariff id
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: Tariff period group with provided tariff id
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/TariffPeriodGroup'
        "403":
          description: Operator doesn't have access to resource
          content:
            application/json:
              schema:
                type: object
                example:
                  status: FORBIDDEN
                  message: Operator doesn't have access to resource
                  errorCode: ACCESS_FORBIDDEN
        "404":
          description: Entity with the provided id was not found
          content:
            application/json:
              schema:
                type: object
                example:
                  status: NOT_FOUND
                  message: Requested entity/entity provided in body was not found
                  readableMessage: user friendly message
                  errorCode: RESOURCE_NOT_FOUND
                  context: context
        "400":
          description: The request is invalid
          content:
            application/json:
              schema:
                type: object
                example:
                  status: BAD_REQUEST
                  message: Invalid request
                  errorCode: BAD_REQUEST
        "401":
          description: Unauthorized access
          content:
            application/json:
              schema:
                type: object
                example:
                  status: UNAUTHORIZED
                  message: Invalid or expired `accessToken`.
                  errorCode: INVALID_ACCESS_TOKEN
      security:
      - BearerAccessToken: []
    post:
      tags:
      - Tariff Period Groups
      summary: Create a new Tariff Period Group.
      description: "Required scope: `tariffs:write`"
      operationId: create-tariff-period-group
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TariffPeriodGroup'
        required: true
      responses:
        "201":
          description: New Tariff Period Group
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TariffPeriodGroup'
        "400":
          description: The request is invalid
          content:
            application/json:
              schema:
                type: object
                example:
                  status: BAD_REQUEST
                  message: Invalid request
                  errorCode: BAD_REQUEST
        "401":
          description: Unauthorized access
          content:
            application/json:
              schema:
                type: object
                example:
                  status: UNAUTHORIZED
                  message: Invalid or expired `accessToken`.
                  errorCode: INVALID_ACCESS_TOKEN
      security:
      - BearerAccessToken: []
  /api/v1/tariff-period-groups/{id}:
    get:
      tags:
      - Tariff Period Groups
      summary: Retrieve Tariff Period Groups by id
      description: "Required scope: `tariff:read`"
      operationId: get-period-group
      parameters:
      - name: id
        in: path
        description: Filter to retrieve tariff period groups by id
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: Tariff period group with provided group id
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TariffPeriodGroup'
        "403":
          description: Operator doesn't have access to resource
          content:
            application/json:
              schema:
                type: object
                example:
                  status: FORBIDDEN
                  message: Operator doesn't have access to resource
                  errorCode: ACCESS_FORBIDDEN
        "404":
          description: Entity with the provided id was not found
          content:
            application/json:
              schema:
                type: object
                example:
                  status: NOT_FOUND
                  message: Requested entity/entity provided in body was not found
                  readableMessage: user friendly message
                  errorCode: RESOURCE_NOT_FOUND
                  context: context
        "400":
          description: The request is invalid
          content:
            application/json:
              schema:
                type: object
                example:
                  status: BAD_REQUEST
                  message: Invalid request
                  errorCode: BAD_REQUEST
        "401":
          description: Unauthorized access
          content:
            application/json:
              schema:
                type: object
                example:
                  status: UNAUTHORIZED
                  message: Invalid or expired `accessToken`.
                  errorCode: INVALID_ACCESS_TOKEN
      security:
      - BearerAccessToken: []
    delete:
      tags:
      - Tariff Period Groups
      summary: "Delete an existing Tariff Period Group, and all contained recurring\
        \ periods and prices."
      description: "Required scope: `tariffs:delete`"
      operationId: delete-tariff-period-group
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "204":
          description: Tariff Period Group deleted
        "400":
          description: The request is invalid
          content:
            application/json:
              schema:
                type: object
                example:
                  status: BAD_REQUEST
                  message: Invalid request
                  errorCode: BAD_REQUEST
        "401":
          description: Unauthorized access
          content:
            application/json:
              schema:
                type: object
                example:
                  status: UNAUTHORIZED
                  message: Invalid or expired `accessToken`.
                  errorCode: INVALID_ACCESS_TOKEN
      security:
      - BearerAccessToken: []
    patch:
      tags:
      - Tariff Period Groups
      summary: Update existing Tariff Period Group.
      description: "Required scope: `tariffs:write`"
      operationId: update-tariff-period-group
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TariffPeriodGroup'
        required: true
      responses:
        "200":
          description: Updated Tariff Period Group
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TariffPeriodGroup'
        "400":
          description: The request is invalid
          content:
            application/json:
              schema:
                type: object
                example:
                  status: BAD_REQUEST
                  message: Invalid request
                  errorCode: BAD_REQUEST
        "401":
          description: Unauthorized access
          content:
            application/json:
              schema:
                type: object
                example:
                  status: UNAUTHORIZED
                  message: Invalid or expired `accessToken`.
                  errorCode: INVALID_ACCESS_TOKEN
      security:
      - BearerAccessToken: []
  /api/v1/tariff-recurring-periods:
    get:
      tags:
      - Tariff Recurring Periods
      summary: Retrieve recurring periods.
      description: "Required scope: `tariffs:read`"
      operationId: get-tariff-recurring-periods
      parameters:
      - name: page
        in: query
        description: page number to retrieve (starts with 0)
        schema:
          type: integer
          format: int32
          default: 0
        example: "1"
      - name: perPage
        in: query
        description: "number of items per page (between 1 and 100, default 10)"
        schema:
          type: integer
          format: int32
          default: 10
        example: "10"
      - name: tariffId
        in: query
        required: true
        schema:
          type: integer
          format: int64
      - name: tariffPeriodGroupId
        in: query
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: Tariff recurring periods with provided tariffId & tariffPeriodGroupId
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Page_TariffRecurringPeriodDto_'
        "400":
          description: The request is invalid
          content:
            application/json:
              schema:
                type: object
                example:
                  status: BAD_REQUEST
                  message: Invalid request
                  errorCode: BAD_REQUEST
        "401":
          description: Unauthorized access
          content:
            application/json:
              schema:
                type: object
                example:
                  status: UNAUTHORIZED
                  message: Invalid or expired `accessToken`.
                  errorCode: INVALID_ACCESS_TOKEN
      security:
      - BearerAccessToken: []
    post:
      tags:
      - Tariff Recurring Periods
      summary: Create new recurring period.
      description: "Required scope: `tariffs:write`"
      operationId: create-tariff-recurring-periods
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TariffRecurringPeriodCreateRequestDto'
        required: true
      responses:
        "201":
          description: Tariff recurring period that was created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TariffRecurringPeriod'
        "400":
          description: The request is invalid
          content:
            application/json:
              schema:
                type: object
                example:
                  status: BAD_REQUEST
                  message: Invalid request
                  errorCode: BAD_REQUEST
        "401":
          description: Unauthorized access
          content:
            application/json:
              schema:
                type: object
                example:
                  status: UNAUTHORIZED
                  message: Invalid or expired `accessToken`.
                  errorCode: INVALID_ACCESS_TOKEN
      security:
      - BearerAccessToken: []
  /api/v1/tariff-recurring-periods/{id}:
    delete:
      tags:
      - Tariff Recurring Periods
      summary: "Delete an existing Tariff Recurring Period , and all contained prices."
      description: "Required scope: `tariffs:delete`"
      operationId: delete-tariff-recurring-period
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "204":
          description: Tariff Recurring Period deleted
        "400":
          description: The request is invalid
          content:
            application/json:
              schema:
                type: object
                example:
                  status: BAD_REQUEST
                  message: Invalid request
                  errorCode: BAD_REQUEST
        "401":
          description: Unauthorized access
          content:
            application/json:
              schema:
                type: object
                example:
                  status: UNAUTHORIZED
                  message: Invalid or expired `accessToken`.
                  errorCode: INVALID_ACCESS_TOKEN
      security:
      - BearerAccessToken: []
  /api/v1/tariff-recurring-periods/{periodId}:
    get:
      tags:
      - Tariff Recurring Periods
      summary: Retrieve a tariff recurring period.
      description: "Required scope: `tariffs:read`"
      operationId: get-tariff-recurring-period
      parameters:
      - name: periodId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: Tariff recurring period with provided id
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TariffRecurringPeriod'
        "404":
          description: Entity with the provided id was not found
          content:
            application/json:
              schema:
                type: object
                example:
                  status: NOT_FOUND
                  message: Requested entity/entity provided in body was not found
                  readableMessage: user friendly message
                  errorCode: RESOURCE_NOT_FOUND
                  context: context
        "400":
          description: The request is invalid
          content:
            application/json:
              schema:
                type: object
                example:
                  status: BAD_REQUEST
                  message: Invalid request
                  errorCode: BAD_REQUEST
        "401":
          description: Unauthorized access
          content:
            application/json:
              schema:
                type: object
                example:
                  status: UNAUTHORIZED
                  message: Invalid or expired `accessToken`.
                  errorCode: INVALID_ACCESS_TOKEN
      security:
      - BearerAccessToken: []
    patch:
      tags:
      - Tariff Recurring Periods
      summary: Update existing recurring period.
      description: "Required scope: `tariffs:write`"
      operationId: update-tariff-recurring-periods
      parameters:
      - name: periodId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TariffRecurringPeriodUpdateRequestDto'
        required: true
      responses:
        "200":
          description: Tariff recurring period that was updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TariffRecurringPeriod'
        "400":
          description: The request is invalid
          content:
            application/json:
              schema:
                type: object
                example:
                  status: BAD_REQUEST
                  message: Invalid request
                  errorCode: BAD_REQUEST
        "401":
          description: Unauthorized access
          content:
            application/json:
              schema:
                type: object
                example:
                  status: UNAUTHORIZED
                  message: Invalid or expired `accessToken`.
                  errorCode: INVALID_ACCESS_TOKEN
      security:
      - BearerAccessToken: []
  /api/v1/tariffs:
    get:
      tags:
      - Tariff
      summary: Retrieve all tariffs.
      description: "Required scope: `tariffs:read`"
      operationId: get-all-tariffs
      parameters:
      - name: countryId
        in: query
        description: Country id of the tariff
        schema:
          type: integer
          format: int64
      - name: countryAreaId
        in: query
        description: Country area id of the tariff
        schema:
          type: integer
          format: int64
      - name: externalId
        in: query
        description: External id of the tariff
        schema:
          type: string
      - name: operatorId
        in: query
        description: Operator id of the tariff (taken from the consumer)
        schema:
          type: integer
          format: int64
      - name: teamId
        in: query
        description: Team id of the tariff
        schema:
          type: integer
          format: int64
      - name: zip
        in: query
        description: Zip code of the tariff
        schema:
          type: string
      responses:
        "200":
          description: All tariffs
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/TariffDto'
        "403":
          description: Operator doesn't have access to resource
          content:
            application/json:
              schema:
                type: object
                example:
                  status: FORBIDDEN
                  message: Operator doesn't have access to resource
                  errorCode: ACCESS_FORBIDDEN
        "404":
          description: Entity with the provided id was not found
          content:
            application/json:
              schema:
                type: object
                example:
                  status: NOT_FOUND
                  message: Requested entity/entity provided in body was not found
                  readableMessage: user friendly message
                  errorCode: RESOURCE_NOT_FOUND
                  context: context
        "400":
          description: The request is invalid
          content:
            application/json:
              schema:
                type: object
                example:
                  status: BAD_REQUEST
                  message: Invalid request
                  errorCode: BAD_REQUEST
        "401":
          description: Unauthorized access
          content:
            application/json:
              schema:
                type: object
                example:
                  status: UNAUTHORIZED
                  message: Invalid or expired `accessToken`.
                  errorCode: INVALID_ACCESS_TOKEN
      security:
      - BearerAccessToken: []
    post:
      tags:
      - Tariff
      summary: Create a new Tariff.
      description: "Required scope: `tariffs:write`"
      operationId: create-tariff
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateTariffRequest'
        required: true
      responses:
        "201":
          description: New Tariff
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TariffDto'
        "400":
          description: The request is invalid
          content:
            application/json:
              schema:
                type: object
                example:
                  status: BAD_REQUEST
                  message: Invalid request
                  errorCode: BAD_REQUEST
        "401":
          description: Unauthorized access
          content:
            application/json:
              schema:
                type: object
                example:
                  status: UNAUTHORIZED
                  message: Invalid or expired `accessToken`.
                  errorCode: INVALID_ACCESS_TOKEN
      security:
      - BearerAccessToken: []
  /api/v1/tariffs/{tariffId}:
    get:
      tags:
      - Tariff
      summary: Retrieve your tariff and prices.
      description: "Required scope: `tariffs:read`"
      operationId: get-tariff
      parameters:
      - name: start
        in: query
        description: "Filter to retrieve tariffs where `createdAt` >= `start` (ISO8601:\
          \ yyyy-MM-ddTHH:mm:ssZ)"
        schema:
          type: string
          format: date-time
          example: 2022-05-22T09:30:03Z
      - name: end
        in: query
        description: "Filter to retrieve charges where `createdAt` <= `end` (ISO8601:\
          \ yyyy-MM-ddTHH:mm:ssZ)"
        schema:
          type: string
          format: date-time
          example: 2022-05-22T09:30:03Z
      - name: tariffId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: Tariff with provided id
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FullTariff'
        "403":
          description: Operator doesn't have access to resource
          content:
            application/json:
              schema:
                type: object
                example:
                  status: FORBIDDEN
                  message: Operator doesn't have access to resource
                  errorCode: ACCESS_FORBIDDEN
        "404":
          description: Entity with the provided id was not found
          content:
            application/json:
              schema:
                type: object
                example:
                  status: NOT_FOUND
                  message: Requested entity/entity provided in body was not found
                  readableMessage: user friendly message
                  errorCode: RESOURCE_NOT_FOUND
                  context: context
        "400":
          description: The request is invalid
          content:
            application/json:
              schema:
                type: object
                example:
                  status: BAD_REQUEST
                  message: Invalid request
                  errorCode: BAD_REQUEST
        "401":
          description: Unauthorized access
          content:
            application/json:
              schema:
                type: object
                example:
                  status: UNAUTHORIZED
                  message: Invalid or expired `accessToken`.
                  errorCode: INVALID_ACCESS_TOKEN
      security:
      - BearerAccessToken: []
    put:
      tags:
      - Tariff
      summary: Update an existing Tariff.
      description: "Required scope: `tariffs:write`"
      operationId: update-tariff
      parameters:
      - name: tariffId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateTariffRequest'
        required: true
      responses:
        "200":
          description: Updated Tariff
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TariffDto'
        "400":
          description: The request is invalid
          content:
            application/json:
              schema:
                type: object
                example:
                  status: BAD_REQUEST
                  message: Invalid request
                  errorCode: BAD_REQUEST
        "401":
          description: Unauthorized access
          content:
            application/json:
              schema:
                type: object
                example:
                  status: UNAUTHORIZED
                  message: Invalid or expired `accessToken`.
                  errorCode: INVALID_ACCESS_TOKEN
      security:
      - BearerAccessToken: []
  /api/v1/tariffs/{tariffId}/create-prices:
    post:
      tags:
      - Tariff
      summary: Create the prices for a given tariff within a given period of time.
      description: "Required scope: `tariffs:write`"
      operationId: create-tariff-prices
      parameters:
      - name: tariffId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateTariffPricesRequest'
        required: true
      responses:
        "201":
          description: Tariff prices created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FullTariff'
        "403":
          description: Operator doesn't have access to resource
          content:
            application/json:
              schema:
                type: object
                example:
                  status: FORBIDDEN
                  message: Operator doesn't have access to resource
                  errorCode: ACCESS_FORBIDDEN
        "404":
          description: Entity with the provided id was not found
          content:
            application/json:
              schema:
                type: object
                example:
                  status: NOT_FOUND
                  message: Requested entity/entity provided in body was not found
                  readableMessage: user friendly message
                  errorCode: RESOURCE_NOT_FOUND
                  context: context
        "400":
          description: The request is invalid
          content:
            application/json:
              schema:
                type: object
                example:
                  status: BAD_REQUEST
                  message: Invalid request
                  errorCode: BAD_REQUEST
        "401":
          description: Unauthorized access
          content:
            application/json:
              schema:
                type: object
                example:
                  status: UNAUTHORIZED
                  message: Invalid or expired `accessToken`.
                  errorCode: INVALID_ACCESS_TOKEN
      security:
      - BearerAccessToken: []
  /api/v1/team-members:
    get:
      tags:
      - Team Members
      summary: Retrieve a list of team members.
      description: "Required scope: `team-members:read`"
      operationId: getTeamMembers
      parameters:
      - name: page
        in: query
        description: page number to retrieve (starts with 0)
        schema:
          type: integer
          format: int32
          default: 0
        example: "1"
      - name: perPage
        in: query
        description: "number of items per page (between 1 and 100, default 10)"
        schema:
          type: integer
          format: int32
          default: 10
        example: "10"
      - name: teamId
        in: query
        schema:
          required:
          - "false"
          type: integer
          description: Filter team members by `teamId`
          format: int64
          nullable: true
          example: 1
      - name: includeDeleted
        in: query
        schema:
          required:
          - "false"
          type: boolean
          description: Includes deleted resources in the response
          example: true
          default: false
      - name: role
        in: query
        schema:
          nullable: true
          allOf:
          - $ref: '#/components/schemas/TeamMemberRole'
          - description: Filter team members by the specified `role`
            example: admin
      - name: state
        in: query
        schema:
          nullable: true
          allOf:
          - $ref: '#/components/schemas/TeamMemberState'
          - description: Filter team members by the specified `state`
            example: expired
      - name: userId
        in: query
        schema:
          minimum: 0
          exclusiveMinimum: true
          required:
          - "false"
          type: integer
          description: Filter team members with specified `userId`
          format: int64
          nullable: true
          example: 42
      - name: email
        in: query
        schema:
          required:
          - "false"
          type: string
          description: Filter team members with specified `email`
          format: email
          nullable: true
          example: user@acme.com
      - name: phone
        in: query
        schema:
          pattern: "^\\+[1-9]\\d{1,14}$"
          required:
          - "false"
          type: string
          description: Filter team members with specified `phone` number
          nullable: true
          example: "+451234567"
      - name: partnerExternalTeamId
        in: query
        schema:
          required:
          - "false"
          type: string
          description: "Filter team members by the specified `partnerExternalTeamId`Note:\
            \ partnerExternalTeamId refers to external id on the team level"
          nullable: true
          example: 1A2B3C4D5E
      - name: partnerExternalId
        in: query
        schema:
          required:
          - "false"
          type: string
          description: Filter team members with specified `partnerExternalId`
          nullable: true
          example: 1A2B3C4D5E
      responses:
        "200":
          description: List of team members that match the criteria
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MontaPage_TeamMemberDto_'
        "400":
          description: The request is invalid
          content:
            application/json:
              schema:
                type: object
                example:
                  status: BAD_REQUEST
                  message: Invalid request
                  errorCode: BAD_REQUEST
        "401":
          description: Unauthorized access
          content:
            application/json:
              schema:
                type: object
                example:
                  status: UNAUTHORIZED
                  message: Invalid or expired `accessToken`.
                  errorCode: INVALID_ACCESS_TOKEN
      security:
      - BearerAccessToken: []
    post:
      tags:
      - Team Members
      summary: Create (invite) a team member
      description: "Create (invite) a user to join a team, invitation can be done\
        \ via `userId`, `email` and/or `phone`. A user that does not exist in yet\
        \ will have a null `userId`.</br></br>Required scope: `team-members:write`"
      operationId: post-team-member
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateTeamMember'
        required: true
      responses:
        "201":
          description: Team member created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TeamMemberDto'
        "403":
          description: Operator doesn't have access to resource
          content:
            application/json:
              schema:
                type: object
                example:
                  status: FORBIDDEN
                  message: Operator doesn't have access to resource
                  errorCode: ACCESS_FORBIDDEN
        "400":
          description: The request is invalid
          content:
            application/json:
              schema:
                type: object
                example:
                  status: BAD_REQUEST
                  message: Invalid request
                  errorCode: BAD_REQUEST
        "401":
          description: Unauthorized access
          content:
            application/json:
              schema:
                type: object
                example:
                  status: UNAUTHORIZED
                  message: Invalid or expired `accessToken`.
                  errorCode: INVALID_ACCESS_TOKEN
      security:
      - BearerAccessToken: []
  /api/v1/team-members/{id}:
    get:
      tags:
      - Team Members
      summary: Retrieve a team member.
      description: "Required scope: `team-members:read`"
      operationId: getTeamMember
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: Team member with provided id
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TeamMemberDto'
        "400":
          description: The request is invalid
          content:
            application/json:
              schema:
                type: object
                example:
                  status: BAD_REQUEST
                  message: Invalid request
                  errorCode: BAD_REQUEST
        "401":
          description: Unauthorized access
          content:
            application/json:
              schema:
                type: object
                example:
                  status: UNAUTHORIZED
                  message: Invalid or expired `accessToken`.
                  errorCode: INVALID_ACCESS_TOKEN
      security:
      - BearerAccessToken: []
    patch:
      tags:
      - Team Members
      summary: Patch a team member.
      description: "Required scope: `team-members:write`"
      operationId: patchTeamMember
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchTeamMember'
        required: true
      responses:
        "200":
          description: Updated Team member with provided id
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TeamMemberDto'
        "400":
          description: The request is invalid
          content:
            application/json:
              schema:
                type: object
                example:
                  status: BAD_REQUEST
                  message: Invalid request
                  errorCode: BAD_REQUEST
        "401":
          description: Unauthorized access
          content:
            application/json:
              schema:
                type: object
                example:
                  status: UNAUTHORIZED
                  message: Invalid or expired `accessToken`.
                  errorCode: INVALID_ACCESS_TOKEN
      security:
      - BearerAccessToken: []
  /api/v1/team-members/{id}/resend-invite:
    post:
      tags:
      - Team Members
      summary: Resend an invite to a team member and reset expiry date.
      description: "Required scope: `team-members:write`"
      operationId: resendTeamMemberInvite
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: Team member with provided id
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TeamMemberDto'
        "400":
          description: The request is invalid
          content:
            application/json:
              schema:
                type: object
                example:
                  status: BAD_REQUEST
                  message: Invalid request
                  errorCode: BAD_REQUEST
        "401":
          description: Unauthorized access
          content:
            application/json:
              schema:
                type: object
                example:
                  status: UNAUTHORIZED
                  message: Invalid or expired `accessToken`.
                  errorCode: INVALID_ACCESS_TOKEN
      security:
      - BearerAccessToken: []
  /api/v1/team-members/{teamMemberId}:
    delete:
      tags:
      - Team Members
      summary: Delete an existing team member
      description: "Required scope: `team-members:delete`"
      operationId: delete-team-member
      parameters:
      - name: teamMemberId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "204":
          description: Team member deleted
        "403":
          description: Operator doesn't have access to resource
          content:
            application/json:
              schema:
                type: object
                example:
                  status: FORBIDDEN
                  message: Operator doesn't have access to resource
                  errorCode: ACCESS_FORBIDDEN
        "400":
          description: The request is invalid
          content:
            application/json:
              schema:
                type: object
                example:
                  status: BAD_REQUEST
                  message: Invalid request
                  errorCode: BAD_REQUEST
        "401":
          description: Unauthorized access
          content:
            application/json:
              schema:
                type: object
                example:
                  status: UNAUTHORIZED
                  message: Invalid or expired `accessToken`.
                  errorCode: INVALID_ACCESS_TOKEN
      security:
      - BearerAccessToken: []
  /api/v1/teams:
    get:
      tags:
      - Teams
      summary: Retrieve a list of teams
      description: "Required scope: `teams:read`"
      operationId: get-teams
      parameters:
      - name: partnerExternalId
        in: query
        description: "Filter teams by partnerExternalId, to filter only resources\
          \ without `partnerExternalId` *use* `partnerExternalId=\"\"`"
        schema:
          type: string
      - name: includeDeleted
        in: query
        description: Filter to include delete teams in the response
        required: false
        schema:
          type: boolean
          default: false
        example: "true"
      - name: page
        in: query
        description: page number to retrieve (starts with 0)
        schema:
          type: integer
          format: int32
          default: 0
        example: "1"
      - name: perPage
        in: query
        description: "number of items per page (between 1 and 100, default 10)"
        schema:
          type: integer
          format: int32
          default: 10
        example: "10"
      responses:
        "200":
          description: List of teams that match the criteria
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MontaPage_TeamDto_'
        "400":
          description: The request is invalid
          content:
            application/json:
              schema:
                type: object
                example:
                  status: BAD_REQUEST
                  message: Invalid request
                  errorCode: BAD_REQUEST
        "401":
          description: Unauthorized access
          content:
            application/json:
              schema:
                type: object
                example:
                  status: UNAUTHORIZED
                  message: Invalid or expired `accessToken`.
                  errorCode: INVALID_ACCESS_TOKEN
      security:
      - BearerAccessToken: []
    post:
      tags:
      - Teams
      summary: Create a team
      description: "Required scope: `teams:write`"
      operationId: post-team
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateTeamDto'
        required: true
      responses:
        "201":
          description: Team created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Team'
        "403":
          description: Operator doesn't have access to resource
          content:
            application/json:
              schema:
                type: object
                example:
                  status: FORBIDDEN
                  message: Operator doesn't have access to resource
                  errorCode: ACCESS_FORBIDDEN
        "400":
          description: The request is invalid
          content:
            application/json:
              schema:
                type: object
                example:
                  status: BAD_REQUEST
                  message: Invalid request
                  errorCode: BAD_REQUEST
        "401":
          description: Unauthorized access
          content:
            application/json:
              schema:
                type: object
                example:
                  status: UNAUTHORIZED
                  message: Invalid or expired `accessToken`.
                  errorCode: INVALID_ACCESS_TOKEN
      security:
      - BearerAccessToken: []
  /api/v1/teams/{id}:
    get:
      tags:
      - Teams
      summary: Retrieve a team
      description: "Required scope: `teams:read`"
      operationId: get-team
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: Team with provided id
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Team'
        "400":
          description: The request is invalid
          content:
            application/json:
              schema:
                type: object
                example:
                  status: BAD_REQUEST
                  message: Invalid request
                  errorCode: BAD_REQUEST
        "401":
          description: Unauthorized access
          content:
            application/json:
              schema:
                type: object
                example:
                  status: UNAUTHORIZED
                  message: Invalid or expired `accessToken`.
                  errorCode: INVALID_ACCESS_TOKEN
      security:
      - BearerAccessToken: []
  /api/v1/teams/{teamId}:
    delete:
      tags:
      - Teams
      summary: Delete an existing team
      description: "Required scope: `teams:delete`"
      operationId: delete-team
      parameters:
      - name: teamId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "204":
          description: Team deleted
        "403":
          description: Operator doesn't have access to resource
          content:
            application/json:
              schema:
                type: object
                example:
                  status: FORBIDDEN
                  message: Operator doesn't have access to resource
                  errorCode: ACCESS_FORBIDDEN
        "400":
          description: The request is invalid
          content:
            application/json:
              schema:
                type: object
                example:
                  status: BAD_REQUEST
                  message: Invalid request
                  errorCode: BAD_REQUEST
        "401":
          description: Unauthorized access
          content:
            application/json:
              schema:
                type: object
                example:
                  status: UNAUTHORIZED
                  message: Invalid or expired `accessToken`.
                  errorCode: INVALID_ACCESS_TOKEN
      security:
      - BearerAccessToken: []
    patch:
      tags:
      - Teams
      summary: Patch an existing team
      description: "Required scope: `teams:write`"
      operationId: patch-team
      parameters:
      - name: teamId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchTeam'
        required: true
      responses:
        "200":
          description: Team updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Team'
        "403":
          description: Operator doesn't have access to resource
          content:
            application/json:
              schema:
                type: object
                example:
                  status: FORBIDDEN
                  message: Operator doesn't have access to resource
                  errorCode: ACCESS_FORBIDDEN
        "400":
          description: The request is invalid
          content:
            application/json:
              schema:
                type: object
                example:
                  status: BAD_REQUEST
                  message: Invalid request
                  errorCode: BAD_REQUEST
        "401":
          description: Unauthorized access
          content:
            application/json:
              schema:
                type: object
                example:
                  status: UNAUTHORIZED
                  message: Invalid or expired `accessToken`.
                  errorCode: INVALID_ACCESS_TOKEN
      security:
      - BearerAccessToken: []
  /api/v1/wallet-transactions:
    get:
      tags:
      - Wallet Transactions
      summary: Retrieve your wallet transactions.
      description: "Required scope: `wallet-transactions:read`"
      operationId: get-wallet-transactions
      parameters:
      - name: page
        in: query
        description: page number to retrieve (starts with 0)
        schema:
          type: integer
          format: int32
          default: 0
        example: "1"
      - name: perPage
        in: query
        description: "number of items per page (between 1 and 100, default 10)"
        schema:
          type: integer
          format: int32
          default: 10
        example: "10"
      - name: teamId
        in: query
        schema:
          type: integer
          description: "Filter to retrieve transactions for a given team. *Note*:\
            \ When not provided the transactions for the operator will be returned\
            \ instead"
          format: int32
          nullable: true
          example: 1
      - name: fromDate
        in: query
        schema:
          pattern: "^(\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2})Z$"
          type: string
          description: "Filter to retrieve transactions where `createdAt` >= `fromDate`\
            \ (ISO8601: yyyy-MM-ddTHH:mm:ssZ)"
          format: date-time
          nullable: true
          example: 2022-05-22T09:30:03Z
      - name: toDate
        in: query
        schema:
          pattern: "^(\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2})Z$"
          type: string
          description: "Filter to retrieve transactions where `createdAt` <= `toDate`\
            \ (ISO8601: yyyy-MM-ddTHH:mm:ssZ)"
          format: date-time
          nullable: true
          example: 2022-05-22T09:30:03Z
      - name: referenceId
        in: query
        schema:
          type: string
          description: Filter to retrieve transactions by the matching referenceId
          nullable: true
          example: "1"
      - name: referenceType
        in: query
        schema:
          nullable: true
          allOf:
          - $ref: '#/components/schemas/WalletTransactionReferenceType'
          - type: string
            description: Filter to retrieve transactions by the matching referenceType
            example: CHARGE
      - name: state
        in: query
        schema:
          nullable: true
          allOf:
          - $ref: '#/components/schemas/WalletTransactionState'
          - type: string
            description: Filter to retrieve transactions by the matching state
            example: complete
      - name: group
        in: query
        schema:
          nullable: true
          allOf:
          - $ref: '#/components/schemas/WalletTransactionGroup'
          - type: string
            description: Filter to retrieve transactions by the matching group
            example: deposit
      - name: partnerExternalId
        in: query
        schema:
          required:
          - "false"
          type: string
          description: "Filter transactions by partnerExternalId, to filter only resources\
            \ without `partnerExternalId` *use* `partnerExternalId=\"\"`"
          nullable: true
          example: "1"
      responses:
        "200":
          description: List of wallet transactions that match the criteria
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MontaPage_WalletTransactionDto_'
        "400":
          description: The request is invalid
          content:
            application/json:
              schema:
                type: object
                example:
                  status: BAD_REQUEST
                  message: Invalid request
                  errorCode: BAD_REQUEST
        "401":
          description: Unauthorized access
          content:
            application/json:
              schema:
                type: object
                example:
                  status: UNAUTHORIZED
                  message: Invalid or expired `accessToken`.
                  errorCode: INVALID_ACCESS_TOKEN
      security:
      - BearerAccessToken: []
  /api/v1/wallet-transactions/operator-adjustment-transaction:
    post:
      tags:
      - Wallet Transactions
      summary: Post an operator adjustment transaction
      description: "This API endpoint is for operator to create an adjustment transaction\
        \ to their teams. Required scope: `wallet-transaction:write`"
      operationId: post-operator-adjustment-transaction
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OperatorAdjustmentTransaction'
        required: true
      responses:
        "201":
          description: Transaction created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WalletTransaction'
        "403":
          description: Operator doesn't have access to resource
          content:
            application/json:
              schema:
                type: object
                example:
                  status: FORBIDDEN
                  message: Operator doesn't have access to resource
                  errorCode: ACCESS_FORBIDDEN
        "400":
          description: The request is invalid
          content:
            application/json:
              schema:
                type: object
                example:
                  status: BAD_REQUEST
                  message: Invalid request
                  errorCode: BAD_REQUEST
        "401":
          description: Unauthorized access
          content:
            application/json:
              schema:
                type: object
                example:
                  status: UNAUTHORIZED
                  message: Invalid or expired `accessToken`.
                  errorCode: INVALID_ACCESS_TOKEN
      security:
      - BearerAccessToken: []
  /api/v1/wallet-transactions/{transactionId}:
    get:
      tags:
      - Wallet Transactions
      summary: Retrieve a single wallet transaction.
      description: "Required scope: `wallet-transactions:read`"
      operationId: get-wallet-transaction
      parameters:
      - name: transactionId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: Wallet transaction with provided id
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WalletTransaction'
        "403":
          description: Operator doesn't have access to resource
          content:
            application/json:
              schema:
                type: object
                example:
                  status: FORBIDDEN
                  message: Operator doesn't have access to resource
                  errorCode: ACCESS_FORBIDDEN
        "404":
          description: Entity with the provided id was not found
          content:
            application/json:
              schema:
                type: object
                example:
                  status: NOT_FOUND
                  message: Requested entity/entity provided in body was not found
                  readableMessage: user friendly message
                  errorCode: RESOURCE_NOT_FOUND
                  context: context
        "400":
          description: The request is invalid
          content:
            application/json:
              schema:
                type: object
                example:
                  status: BAD_REQUEST
                  message: Invalid request
                  errorCode: BAD_REQUEST
        "401":
          description: Unauthorized access
          content:
            application/json:
              schema:
                type: object
                example:
                  status: UNAUTHORIZED
                  message: Invalid or expired `accessToken`.
                  errorCode: INVALID_ACCESS_TOKEN
      security:
      - BearerAccessToken: []
    patch:
      tags:
      - Wallet Transactions
      summary: Patch an existing transaction
      description: "Required scope: `transaction:write`"
      operationId: patch-transaction
      parameters:
      - name: transactionId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchWalletTransaction'
        required: true
      responses:
        "200":
          description: Transaction updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WalletTransaction'
        "403":
          description: Operator doesn't have access to resource
          content:
            application/json:
              schema:
                type: object
                example:
                  status: FORBIDDEN
                  message: Operator doesn't have access to resource
                  errorCode: ACCESS_FORBIDDEN
        "400":
          description: The request is invalid
          content:
            application/json:
              schema:
                type: object
                example:
                  status: BAD_REQUEST
                  message: Invalid request
                  errorCode: BAD_REQUEST
        "401":
          description: Unauthorized access
          content:
            application/json:
              schema:
                type: object
                example:
                  status: UNAUTHORIZED
                  message: Invalid or expired `accessToken`.
                  errorCode: INVALID_ACCESS_TOKEN
      security:
      - BearerAccessToken: []
  /api/v1/wallets:
    get:
      tags:
      - Wallets
      summary: Retrieve your wallets.
      description: "Required scope: `wallet-transactions:read`"
      operationId: get-wallets
      parameters:
      - name: page
        in: query
        description: page number to retrieve (starts with 0)
        schema:
          type: integer
          format: int32
          default: 0
        example: "1"
      - name: perPage
        in: query
        description: "number of items per page (between 1 and 100, default 10)"
        schema:
          type: integer
          format: int32
          default: 10
        example: "10"
      - name: teamId
        in: query
        schema:
          type: integer
          description: "Filter to retrieve wallet for a given team. *Note*: You need\
            \ to either provide `teamId` or `operatorId`"
          format: int32
          nullable: true
          example: 1
      - name: operatorId
        in: query
        schema:
          type: integer
          description: "Filter to retrieve wallet for a given operator. *Note*: You\
            \ need to either provide `teamId` or `operatorId`"
          format: int32
          nullable: true
          example: 1
      responses:
        "200":
          description: List of wallets that match the criteria
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MontaPage_WalletDto_'
        "400":
          description: The request is invalid
          content:
            application/json:
              schema:
                type: object
                example:
                  status: BAD_REQUEST
                  message: Invalid request
                  errorCode: BAD_REQUEST
        "401":
          description: Unauthorized access
          content:
            application/json:
              schema:
                type: object
                example:
                  status: UNAUTHORIZED
                  message: Invalid or expired `accessToken`.
                  errorCode: INVALID_ACCESS_TOKEN
      security:
      - BearerAccessToken: []
  /api/v1/wallets/{walletId}:
    get:
      tags:
      - Wallets
      summary: Retrieve a single wallet.
      description: "Required scope: `wallet-transactions:read`"
      operationId: get-wallet
      parameters:
      - name: walletId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: Wallet with provided id
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Wallet'
        "403":
          description: Operator doesn't have access to resource
          content:
            application/json:
              schema:
                type: object
                example:
                  status: FORBIDDEN
                  message: Operator doesn't have access to resource
                  errorCode: ACCESS_FORBIDDEN
        "404":
          description: Entity with the provided id was not found
          content:
            application/json:
              schema:
                type: object
                example:
                  status: NOT_FOUND
                  message: Requested entity/entity provided in body was not found
                  readableMessage: user friendly message
                  errorCode: RESOURCE_NOT_FOUND
                  context: context
        "400":
          description: The request is invalid
          content:
            application/json:
              schema:
                type: object
                example:
                  status: BAD_REQUEST
                  message: Invalid request
                  errorCode: BAD_REQUEST
        "401":
          description: Unauthorized access
          content:
            application/json:
              schema:
                type: object
                example:
                  status: UNAUTHORIZED
                  message: Invalid or expired `accessToken`.
                  errorCode: INVALID_ACCESS_TOKEN
      security:
      - BearerAccessToken: []
  /api/v1/webhooks/config:
    get:
      tags:
      - Webhooks
      summary: Get your webhook config
      description: "Required scope: `manage-webhooks:read`"
      operationId: get-webhook-config
      responses:
        "200":
          description: Your Webhook config.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WebhookConfig'
        "404":
          description: Webhook config not found.
        "401":
          description: Consumer with provided credentials was not found
          content:
            application/json:
              schema:
                type: object
                example:
                  status: UNAUTHORIZED
                  message: Consumer with given `clientId` and `clientSecret` not found
                  errorCode: CONSUMER_NOT_FOUND
        "400":
          description: The request is invalid
          content:
            application/json:
              schema:
                type: object
                example:
                  status: BAD_REQUEST
                  message: Invalid request
                  errorCode: BAD_REQUEST
      security:
      - BearerAccessToken: []
    put:
      tags:
      - Webhooks
      summary: Update your webhook config
      description: "Required scope: `manage-webhooks:write`"
      operationId: update-webhook-config
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/WebhookConfig'
        required: true
      responses:
        "200":
          description: Webhook config successfully updated.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WebhookConfig'
        "401":
          description: Consumer with provided credentials was not found
          content:
            application/json:
              schema:
                type: object
                example:
                  status: UNAUTHORIZED
                  message: Consumer with given `clientId` and `clientSecret` not found
                  errorCode: CONSUMER_NOT_FOUND
        "400":
          description: The request is invalid
          content:
            application/json:
              schema:
                type: object
                example:
                  status: BAD_REQUEST
                  message: Invalid request
                  errorCode: BAD_REQUEST
      security:
      - BearerAccessToken: []
    delete:
      tags:
      - Webhooks
      summary: Delete webhook config
      description: "Required scope: `manage-webhooks:delete`"
      operationId: delete-webhook-config
      responses:
        "204":
          description: Successfully deleted webhook configuration
        "401":
          description: Consumer with provided credentials was not found
          content:
            application/json:
              schema:
                type: object
                example:
                  status: UNAUTHORIZED
                  message: Consumer with given `clientId` and `clientSecret` not found
                  errorCode: CONSUMER_NOT_FOUND
        "400":
          description: The request is invalid
          content:
            application/json:
              schema:
                type: object
                example:
                  status: BAD_REQUEST
                  message: Invalid request
                  errorCode: BAD_REQUEST
      security:
      - BearerAccessToken: []
  /api/v1/webhooks/entries:
    get:
      tags:
      - Webhooks
      summary: Retrieve webhook entries
      description: "This endpoint can help you debug pending/failed webhook entries.\
        \ Required scope: `webhooks:read`"
      operationId: get-webhook-entries
      parameters:
      - name: page
        in: query
        description: page number to retrieve (starts with 0)
        schema:
          type: integer
          format: int32
          default: 0
        example: "1"
      - name: perPage
        in: query
        description: "number of items per page (between 1 and 100, default 10)"
        schema:
          type: integer
          format: int32
          default: 10
        example: "10"
      - name: status
        in: query
        description: The status from which webhook entries will be filtered by
        schema:
          type: integer
          format: int64
        example: failed
      responses:
        "200":
          description: List of webhook entries for your consumer in the past 24 hours
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MontaPage_WebhookEntryDto_'
        "401":
          description: Consumer with provided credentials was not found
          content:
            application/json:
              schema:
                type: object
                example:
                  status: UNAUTHORIZED
                  message: Consumer with given `clientId` and `clientSecret` not found
                  errorCode: CONSUMER_NOT_FOUND
        "400":
          description: The request is invalid
          content:
            application/json:
              schema:
                type: object
                example:
                  status: BAD_REQUEST
                  message: Invalid request
                  errorCode: BAD_REQUEST
      security:
      - BearerAccessToken: []
  /api/v1/webhooks/entries/{entryId}:
    get:
      tags:
      - Webhooks
      summary: Retrieve a single webhook entry by id
      description: |-
        This endpoint returns a single entry by id.
        *Note that we only persist entries for past 24 hours.*
        Required scope: `webhooks:read`
      operationId: get-webhook-entries_1
      parameters:
      - name: entryId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: Webhook entry with given id
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WebhookEntry'
        "401":
          description: Consumer with provided credentials was not found
          content:
            application/json:
              schema:
                type: object
                example:
                  status: UNAUTHORIZED
                  message: Consumer with given `clientId` and `clientSecret` not found
                  errorCode: CONSUMER_NOT_FOUND
        "404":
          description: Entity with the provided id was not found
          content:
            application/json:
              schema:
                type: object
                example:
                  status: NOT_FOUND
                  message: Requested entity/entity provided in body was not found
                  readableMessage: user friendly message
                  errorCode: RESOURCE_NOT_FOUND
                  context: context
        "400":
          description: The request is invalid
          content:
            application/json:
              schema:
                type: object
                example:
                  status: BAD_REQUEST
                  message: Invalid request
                  errorCode: BAD_REQUEST
      security:
      - BearerAccessToken: []
components:
  schemas:
    AdditionalPricing:
      required:
      - type
      - value
      type: object
      properties:
        type:
          allOf:
          - $ref: '#/components/schemas/AdditionalPricingType'
          - description: Type of the additional pricing. `absolute` means the value
              is a price.
            example: percentage
        value:
          allOf:
          - $ref: '#/components/schemas/Money'
          - description: The value of this additional pricing. Both `absolute` and
              `percentage` values here are represented as a money object.
    AdditionalPricingType:
      type: string
      enum:
      - absolute
      - percentage
    Address:
      required:
      - address1
      - city
      - country
      - zip
      type: object
      properties:
        address1:
          type: string
          description: First line of address
          example: Strandboulevarden 122
        address2:
          type: string
          description: Second line of address
          nullable: true
          example: KÃ¸benhavn
        address3:
          type: string
          description: Third line of address
          nullable: true
          example: 5. sal
        zip:
          type: string
          description: Zip-code
          example: "2100"
        city:
          type: string
          description: City (readable)
          example: Copenhagen
        country:
          type: string
          description: Country (readable)
          example: Denmark
    ApplyPriceGroup:
      type: object
      properties:
        selectedChargePointIds:
          required:
          - "false"
          type: array
          description: List of charge point ids
          nullable: true
          items:
            type: integer
            format: int64
        selectedSiteIds:
          required:
          - "false"
          type: array
          description: List of site ids
          nullable: true
          items:
            type: integer
            format: int64
        selectedTeamMemberIds:
          required:
          - "false"
          type: array
          description: List of team member ids
          nullable: true
          items:
            type: integer
            format: int64
        resetCost:
          required:
          - "false"
          type: boolean
          description: Flag to indicate if costs should be reset
          nullable: true
    ApproveSubscription:
      type: object
      properties:
        firstPurchaseAt:
          type: string
          description: "Date when wallet will be charged for the first time (ISO8601:\
            \ yyyy-MM-ddTHH:mm:ssZ)"
          format: date-time
          nullable: true
          example: 2022-10-22T09:30:03Z
    Breakdown:
      required:
      - components
      - subTotalMasterPrice
      - subTotalPrice
      - subTotalSecondaryPrice
      type: object
      properties:
        from:
          required:
          - "false"
          type: string
          description: "The initial timestamp for this breakdown entry, currently\
            \ in hourly format"
          format: date-time
          nullable: true
          example: 2022-04-22T09:00:00Z
        to:
          required:
          - "false"
          type: string
          description: "The final timestamp for this breakdown entry, currently in\
            \ hourly format"
          format: date-time
          nullable: true
          example: 2022-04-22T09:59:59Z
        subTotalPrice:
          required:
          - "true"
          type: integer
          description: The total price for this breakdown entry
          format: int64
          example: 100
        subTotalMasterPrice:
          required:
          - "true"
          type: integer
          description: The total master price for this breakdown entry
          format: int64
          example: 50
        subTotalSecondaryPrice:
          required:
          - "true"
          type: integer
          description: The total secondary price for this breakdown entry
          format: int64
          example: 25
        components:
          required:
          - "true"
          type: array
          description: The list of prices and tariffs relevant for this breakdown
            entry
          items:
            $ref: '#/components/schemas/Component'
    BreakdownSummary:
      required:
      - totalAdjustments
      - totalFees
      - totalMasterPrice
      - totalPrice
      - totalSecondaryPrice
      type: object
      properties:
        totalMasterPrice:
          required:
          - "true"
          type: integer
          description: Total master price for the given charge
          format: int64
          example: 1000
        totalSecondaryPrice:
          required:
          - "true"
          type: integer
          description: Total secondary price for the given charge
          format: int64
          example: 500
        totalFees:
          required:
          - "true"
          type: integer
          description: Total fees for the given charge
          format: int64
          example: 500
        totalAdjustments:
          required:
          - "true"
          type: integer
          description: "Total adjustments for a given charge, for instance, based\
            \ on certain business rules, the final price may be adjusted to prevent\
            \ it from exceeding 1000 EUR"
          format: int64
          example: 200
        totalPrice:
          required:
          - "true"
          type: integer
          description: Total price for the given charge
          format: int64
          example: 2220
    Charge:
      required:
      - costBreakdown
      - createdAt
      - kwhPerHour
      - priceBreakdown
      - publicChargePoint
      - state
      - type
      - updatedAt
      - user
      type: object
      properties:
        id:
          type: integer
          description: Id of the charge
          format: int64
          example: 1
        user:
          allOf:
          - $ref: '#/components/schemas/PublicUser'
          - description: User that performed the charge
        teamMember:
          nullable: true
          allOf:
          - $ref: '#/components/schemas/SimpleTeamMemberDto'
          - description: "Team that performed the charge, if part of the charge points'\
              \ team"
        type:
          allOf:
          - $ref: '#/components/schemas/ChargeType'
          - description: Type of the charge
            example: "1"
        chargePointId:
          type: integer
          description: Id of the charge point related to this charge
          format: int64
          example: 21
        publicChargePoint:
          allOf:
          - $ref: '#/components/schemas/PublicChargePoint'
          - description: The public information about the charge point related to
              this charge
        sponsoredChargePointId:
          required:
          - "false"
          type: integer
          description: Id of the sponsored charge point related to this charge
          format: int64
          nullable: true
          example: 29
        priceGroupId:
          type: integer
          description: "Id of the price group related to this charge. Note: The underlying\
            \ price/costGroup models can change and you have \n            to use\
            \ other fields to get the historic data (costBreakdown, priceBreakdown,\
            \ price)"
          format: int64
          example: 21
        costPriceGroupId:
          type: integer
          description: Id of the cost price group related to this charge
          format: int64
          nullable: true
          example: 21
        siteId:
          type: integer
          description: Id of the site in which the charge point that performed this
            charge is
          format: int64
          nullable: true
          example: 21
        createdAt:
          type: string
          description: Creation date
          format: date-time
          example: 2022-05-12T15:56:45.99Z
        updatedAt:
          type: string
          description: Update date
          format: date-time
          example: 2022-05-12T16:56:45.99Z
        cablePluggedInAt:
          type: string
          description: Date when cable was plugged in
          format: date-time
          nullable: true
          example: 2022-05-12T15:56:45.99Z
        startedAt:
          type: string
          description: Date when charge started
          format: date-time
          nullable: true
          example: 2022-05-12T15:56:45.99Z
        stoppedAt:
          type: string
          description: Date when charge stopped
          format: date-time
          nullable: true
          example: 2022-05-12T15:56:45.99Z
        fullyChargedAt:
          type: string
          description: Date when EV was fully charged
          format: date-time
          nullable: true
          example: 2022-05-12T15:56:45.99Z
        releasedAt:
          type: string
          description: Date when cable was released
          format: date-time
          nullable: true
          example: 2022-05-12T15:56:45.99Z
        failedAt:
          type: string
          description: Date when charge failed
          format: date-time
          nullable: true
          example: 2022-05-12T15:56:45.91Z
        timeoutAt:
          type: string
          description: Date when charge timed out
          format: date-time
          nullable: true
          example: 2022-05-12T15:56:45.91Z
        completedAt:
          type: string
          description: Date when charge was considered completed
          format: date-time
          nullable: true
          example: 2022-05-12T16:56:45.99Z
        state:
          allOf:
          - $ref: '#/components/schemas/ChargeStateDto'
          - type: string
            description: State of the charge
            example: charging
        startSource:
          type: string
          description: "Indicates the starting source for this charge, e.g app-ios,\
            \ app-android </br>Note: This is an ever-growing list, new values might\
            \ be added. Please make sure to implement appropriate fallbacks"
          nullable: true
          example: app-ios
        consumedKwh:
          type: number
          description: Consumed Kwh
          format: double
          nullable: true
          example: 20.4
        kwhLimit:
          type: number
          description: Configured Kwh limit for this charge
          format: double
          nullable: true
          example: 21
        kwhPerHour:
          type: array
          description: List of consumed Kwh split by hour
          items:
            $ref: '#/components/schemas/KwhPerHour'
        costBreakdown:
          type: array
          description: "Detailed breakdown of the costs by hour</br></br>**Note**:\
            \ Deprecated, this field will be be removed by *01.04.2024*, Use the `charges/:chargeId/breakdown`\
            \ endpoint instead"
          deprecated: true
          items:
            $ref: '#/components/schemas/ChargeCost'
          x-sunset: 2024-04-01
        priceBreakdown:
          type: array
          description: "Detailed breakdown of the prices by hour</br></br>**Note**:\
            \ Deprecated, this field will be be removed by *01.04.2024*, Use the `charges/:chargeId/breakdown`\
            \ endpoint instead"
          deprecated: true
          items:
            $ref: '#/components/schemas/ChargePrice'
          x-sunset: 2024-04-01
        startMeterKwh:
          type: number
          description: Kwh of the meter before charging started
          format: double
          nullable: true
          example: 123.45
        endMeterKwh:
          type: number
          description: Kwh of the meter after charging stopped
          format: double
          nullable: true
          example: 163.85
        price:
          type: number
          description: Price for this charge
          format: double
          nullable: true
          example: 122.4
        priceLimit:
          type: number
          description: Configured price limit for this charge
          format: double
          nullable: true
          example: 212
        averagePricePerKwh:
          type: number
          description: Average price per Kwh
          format: double
          nullable: true
          example: 6
        averageCo2PerKwh:
          type: number
          description: Average CO2 consumption per Kwh
          format: double
          nullable: true
          example: 100
        averageRenewablePerKwh:
          type: number
          description: Average percentage of renewable energy per Kwh
          format: double
          nullable: true
          example: 72.5
        failureReason:
          type: string
          description: Failure reason for this charge
          nullable: true
          example: Some reason why we couldn't charge.
        stopReason:
          type: string
          description: Reason why this charge stopped
          nullable: true
          example: Some reason why the charge stopped.
        paymentMethod:
          type: string
          description: Payment method for this charge
          nullable: true
          example: free
          enum:
          - free
          - team-has-fund
          - team-has-auto-refill
          - source
          - payment
        note:
          type: string
          description: A note taken for this charge
          nullable: true
          example: Lorem Ipsum
        currency:
          nullable: true
          allOf:
          - $ref: '#/components/schemas/Currency'
          - description: Currency used for payment.
        payingTeam:
          nullable: true
          allOf:
          - $ref: '#/components/schemas/PayingTeam'
          - description: Team who paid for this charge
        sponsorTeam:
          nullable: true
          allOf:
          - $ref: '#/components/schemas/SponsorTeam'
          - description: Team who sponsored this charge
        operator:
          nullable: true
          allOf:
          - $ref: '#/components/schemas/Operator'
          - description: Operator this of this charge
        chargeAuth:
          nullable: true
          allOf:
          - $ref: '#/components/schemas/ChargeAuthentication'
          - description: The object used to authenticate a charge
        soc:
          nullable: true
          allOf:
          - $ref: '#/components/schemas/StateOfCharge'
          - description: Information about the state of charge if available
            example: "42"
        socLimit:
          type: number
          description: Configured SoC limit for this charge
          format: double
          nullable: true
          example: 80
        genericPaymentSession:
          nullable: true
          allOf:
          - $ref: '#/components/schemas/GenericPaymentSession'
          - description: "Generic payment session for this charge. If provided, the\
              \ charge was paid with this payment session."
        partnerExternalId:
          type: string
          description: "External Id of this entity, managed by you. **We recommend\
            \ to fill this always with a unique identifier from your side,since it\
            \ allows you to find a started charge later, even if this requests'response\
            \ was not captured by you or something went wrong.**"
          nullable: true
          example: ACME-12345
        partnerCustomPayload:
          type: array
          description: "Custom JSON payload for this entity, managed by you."
          nullable: true
          items:
            type: object
        chargePointKw:
          type: number
          description: The charge point KW recorded during the charge.
          format: double
          nullable: true
    ChargeAuthToken:
      required:
      - createdAt
      - identifier
      - type
      - updatedAt
      type: object
      properties:
        id:
          type: integer
          description: The id of the charge auth token
          format: int64
          example: 1
        identifier:
          type: string
          description: "The identifier of the charge auth token, Note: without prefix\
            \ e.g `VID:`"
          example: 38C58DB85F4
        type:
          type: string
          description: The method type used for this charge auth token
          example: vehicleId
          enum:
          - vehicleId
          - rfid
        teamId:
          type: integer
          description: Id of the team that the charge auth token belongs to
          format: int64
          example: 13
        userId:
          type: integer
          description: Id of the user that the charge auth token is associated to
          format: int64
          nullable: true
          example: 1
        partnerExternalId:
          type: string
          description: "External Id of this entity, managed by you."
          nullable: true
          example: ACME-12345
        partnerCustomPayload:
          type: array
          description: "Custom JSON payload for this entity, managed by you."
          nullable: true
          items:
            type: object
        name:
          type: string
          description: Name of the charge auth token
          nullable: true
          example: Monta Team Key
        operator:
          nullable: true
          allOf:
          - $ref: '#/components/schemas/Operator'
          - description: Operator of this charge auth token
        montaNetwork:
          type: boolean
          description: If the charge auth token is active in the Monta network
          example: true
        roamingNetwork:
          type: boolean
          description: If the charge auth token is active in the Roaming network
          example: true
        operatorNetwork:
          type: boolean
          description: Allow this charge auth token to be used on other teams charge
            points under the same operator
          example: true
        activeUntil:
          type: string
          description: "Indicates until when this charge auth token is active, null\
            \ means indefinitely"
          format: date-time
          nullable: true
          example: 2023-01-11T00:00:00Z
        blockedAt:
          type: string
          description: |
            If the charge auth token is blocked, it will not be able to charge.
            * `null` = not blocked
            * date-time = blocked since date-time
          format: date-time
          nullable: true
          example: 2023-01-11T00:00:00Z
        createdAt:
          type: string
          description: Creation date of this charge auth token
          format: date-time
          example: 2022-05-12T15:56:45.99Z
        updatedAt:
          type: string
          description: Update date of this charge auth token
          format: date-time
          example: 2022-05-12T16:56:45.99Z
    ChargeAuthentication:
      required:
      - id
      - type
      type: object
      properties:
        type:
          type: string
          description: The method type used to authenticate a charge
          example: vehicleId
          enum:
          - vehicleId
          - rfid
          - app
        id:
          type: string
          description: The id of the chosen authentication method
          example: 2C:54:91:88:C9:E3
        partnerExternalId:
          type: string
          description: "External Id of this entity, managed by you."
          nullable: true
          example: ACME-12345
    ChargeAuthenticationType:
      type: string
      enum:
      - rfid
      - vehicleId
    ChargeBreakdown:
      required:
      - chargeId
      - costBreakdown
      - priceBreakdown
      type: object
      properties:
        chargeId:
          required:
          - "true"
          type: integer
          description: The charge id associated with this charge breakdown
          format: int64
          example: 10001
        priceBreakdown:
          allOf:
          - $ref: '#/components/schemas/DetailedBreakdown'
          - description: "The price breakdown, Includes information necessary to understand\
              \ the composition of the final charge price"
        costBreakdown:
          allOf:
          - $ref: '#/components/schemas/DetailedBreakdown'
          - description: The cost breakdown is similar to the price breakdown but
              focuses on the costs incurred for the given charge
    ChargeCost:
      required:
      - time
      type: object
      properties:
        time:
          type: string
          description: Hour for the sum of the cost
          format: date-time
          example: 2022-05-12T15:00:00Z
        value:
          type: number
          description: Sum of cost for this hour
          format: double
          example: 15.8
    ChargeMetadata:
      required:
      - type
      type: object
      properties:
        id:
          type: integer
          description: The id of the the charge
          format: int64
          example: 1
        kwh:
          type: number
          description: The total kwh for the charge
          format: double
          example: 13.77
        type:
          allOf:
          - $ref: '#/components/schemas/MetadataTypeDto'
          - description: The type of this metadata
    ChargePoint:
      required:
      - connectors
      - createdAt
      - deeplinks
      - evseId
      - location
      - updatedAt
      - visibility
      type: object
      properties:
        id:
          type: integer
          description: Id of this charge point
          format: int64
          example: 1
        teamId:
          type: integer
          description: Id of the team
          format: int64
          example: 1
        partnerExternalId:
          type: string
          description: "External Id of this entity, managed by you."
          nullable: true
          example: ACME-12345
        partnerCustomPayload:
          type: array
          description: "Custom JSON payload for this entity, managed by you."
          nullable: true
          items:
            type: object
        siteId:
          type: integer
          description: Id of the site
          format: int64
          nullable: true
          example: 42
        operator:
          nullable: true
          allOf:
          - $ref: '#/components/schemas/Operator'
          - description: Operator of this charge point
        createdAt:
          type: string
          description: Creation date of this charge point
          format: date-time
          example: 2022-05-12T15:56:45.99Z
        updatedAt:
          type: string
          description: Date this charge point was last updated
          format: date-time
          example: 2022-05-12T16:56:45.99Z
        deletedAt:
          type: string
          description: Date this charge point was deleted
          format: date-time
          nullable: true
          example: 2022-05-12T16:56:45.99Z
        activeAt:
          type: string
          description: Last date when charge point was activated
          format: date-time
          nullable: true
          example: 2022-05-12T15:56:45.91Z
        serialNumber:
          type: string
          description: Serial number of this charge point
          nullable: true
        name:
          type: string
          description: Name of the charge point
          nullable: true
          example: Monta CPH HQ
        visibility:
          type: string
          description: Indicates if this charge point is `public` or `private`
          example: public
          enum:
          - private
          - public
        maxKW:
          type: number
          description: "Deprecated (will be removed by 01.04.24), use `maxKw` field\
            \ instead."
          format: double
          nullable: true
          example: 150
          deprecated: true
          x-sunset: 2024-04-01
        maxKw:
          type: number
          description: Max KW available at this charge point.
          format: double
          nullable: true
          example: 150
        type:
          type: string
          description: Type of charge point (`AC` / `DC`)
          nullable: true
          example: ac
          enum:
          - ac
          - dc
        note:
          type: string
          description: "A note you have entered for this charge point, e.g. via our\
            \ Portal."
          nullable: true
          example: In order to access this charge point enter 0000 as code at the
            gate.
        operatorNote:
          type: string
          description: "An operator note you have entered for this charge point, e.g.\
            \ via our Portal."
          nullable: true
          example: "Installer note: XYZ"
        state:
          nullable: true
          allOf:
          - $ref: '#/components/schemas/ChargePointState'
          - type: string
            description: State of the charge point
            example: available
        location:
          allOf:
          - $ref: '#/components/schemas/Location'
          - description: Location information for this charge point
        connectors:
          type: array
          description: "List of supported connector types at this charge point (e.g.\
            \ type-2, ccs, ...)"
          items:
            $ref: '#/components/schemas/ChargePointConnector'
        deeplinks:
          allOf:
          - $ref: '#/components/schemas/ChargePointDeeplinks'
          - description: Deeplinks to open charge screen in Monta app or web.
        lastMeterReadingKwh:
          type: number
          description: Last meter reading (KWH) for this charge point
          format: double
          nullable: true
          example: 913.2
        cablePluggedIn:
          type: boolean
          description: Indicates if a cable is plugged in (true)
          example: true
        chargePointModelId:
          type: integer
          description: The ID of the charge point model for this charge point.
          format: int64
          nullable: true
          example: 42
        brandName:
          type: string
          description: Brand name for this charge point
          nullable: true
          example: Easee
        modelName:
          type: string
          description: Model name for this charge point
          nullable: true
          example: Easee - Home
        firmwareVersion:
          type: string
          description: Current firmware version for this charge point
          nullable: true
          example: v1
        integrationType:
          nullable: true
          allOf:
          - $ref: '#/components/schemas/ChargePointIntegrationType'
          - description: "Indicates what kind of integration this charge point is\
              \ using (e.g oicp, ocpi, Note: null meaning not integrated)"
            example: oicp
        evseId:
          type: string
          description: The EVSE id for this charge point
          example: DK*MON*E2
        priceGroupId:
          type: integer
          description: The id of the public price group for this charge point
          format: int64
          nullable: true
          example: 42
        costGroupId:
          type: integer
          description: The id of the cost price group for this charge point
          format: int64
          nullable: true
          example: 42
        roamingPriceGroupId:
          type: integer
          description: The id of the roaming price group for this charge point
          format: int64
          nullable: true
          example: 42
        sponsoredPriceGroupId:
          type: integer
          description: The id of the sponsored price group for this charge point
          format: int64
          nullable: true
          example: 42
        isActive:
          type: boolean
          description: Indicates if this charge point is active (true) or not (false).
            Active = fully onboarded to Monta.
          example: true
        reservable:
          type: boolean
          description: Indicates if the charge point can be reserved
          example: true
        reservationTime:
          type: integer
          description: The max duration(in minutes) that this Charge Point can be
            reserved for</br>`null` indicates that reservation is not supported.
          format: int32
          nullable: true
    ChargePointBrand:
      required:
      - identifier
      - name
      type: object
      properties:
        id:
          type: integer
          description: The id of the charge point brand
          format: int64
          example: 1
        identifier:
          type: string
          description: The identifier of the charge point brand
          example: rolec
        name:
          type: string
          description: The name of the charge point brand
          example: Rolec
        createdAt:
          type: string
          description: Creation date of this charge point brand
          format: date-time
          nullable: true
          example: 2022-05-12T15:56:45.99Z
        updatedAt:
          type: string
          description: Update date of this charge point brand
          format: date-time
          nullable: true
          example: 2022-05-12T16:56:45.99Z
    ChargePointConnector:
      required:
      - identifier
      - name
      type: object
      properties:
        id:
          type: integer
          description: Id of this connector
          format: int64
          example: 1
        identifier:
          type: string
          description: Identifier of connector
          example: ccs
        name:
          type: string
          description: Readable name of connector
          example: CCS
    ChargePointDeeplinks:
      required:
      - app
      - web
      type: object
      properties:
        app:
          type: string
          description: Follow this link to open the Monta App with this charge point
          format: uri
        web:
          type: string
          description: Follow this link to open the Monta Web App with this charge
            point
          format: uri
    ChargePointIntegration:
      required:
      - chargePoint
      - createdAt
      - integrationTypeIdentifier
      - serialNumber
      - state
      type: object
      properties:
        id:
          type: integer
          description: The id of this charge point integration
          format: int64
          example: 1
        state:
          allOf:
          - $ref: '#/components/schemas/ChargePointIntegrationStateDto'
          - description: The current state of the charge point integration
            example: connected
        serialNumber:
          type: string
          description: The serial number of this charge point integration
          example: "46964534"
        integrationTypeIdentifier:
          type: string
          description: The integration type (method) used
          example: ocpp
        connectorId:
          type: integer
          description: The connector id for this charge point integration
          format: int32
          nullable: true
          example: 1
        chargePoint:
          allOf:
          - $ref: '#/components/schemas/ChargePoint'
          - description: The charge point associated to this integration
        activeAt:
          type: string
          description: The Date this charge point integration was set to active
          format: date-time
          nullable: true
          example: 2022-05-12T15:56:45.99Z
        createdAt:
          type: string
          description: The Creation date of this charge point integration
          format: date-time
          example: 2022-05-12T15:56:45.99Z
        updatedAt:
          type: string
          description: The Date this charge point integration was last updated
          format: date-time
          nullable: true
          example: 2022-05-12T16:56:45.99Z
        deletedAt:
          type: string
          description: The Date this charge point integration was deleted
          format: date-time
          nullable: true
          example: 2022-05-12T16:56:45.99Z
    ChargePointIntegrationStateDto:
      type: string
      description: Enumerate the possible states for a charge point integration
      enum:
      - pending
      - connected
      - disconnected
      - error
      - unknown
    ChargePointIntegrationType:
      type: string
      enum:
      - oicp
      - ocpi
      - ocpp
      - other
    ChargePointModel:
      required:
      - brand
      - features
      - identifier
      - name
      type: object
      properties:
        id:
          type: integer
          description: The id of the charge point model
          format: int64
          example: 1
        identifier:
          type: string
          description: The identifier of the charge point model
          example: rolec_securicharge_ev_dual
        name:
          type: string
          description: "The name of the charge point model, name is composed by (Brand\
            \ name - Model name)"
          example: SecuriCharge Dual
        brand:
          allOf:
          - $ref: '#/components/schemas/ChargePointModelDto.ChargePointBrandDto'
          - description: The brand of the charge point model
        features:
          type: array
          description: "The supported features by this charge point model, only supported\
            \ features will be included"
          items:
            $ref: '#/components/schemas/ChargePointModelFeature'
        createdAt:
          type: string
          description: Creation date of this charge point model
          format: date-time
          nullable: true
          example: 2022-05-12T15:56:45.99Z
        updatedAt:
          type: string
          description: Update date of this charge point model
          format: date-time
          nullable: true
          example: 2022-05-12T16:56:45.99Z
    ChargePointModelDto.ChargePointBrandDto:
      required:
      - name
      type: object
      properties:
        id:
          type: integer
          description: The id of the charge point brand
          format: int64
          example: 1
        name:
          type: string
          description: The name of the charge point brand
          example: Rolec
    ChargePointModelFeature:
      required:
      - key
      type: object
      properties:
        key:
          type: string
          description: The key that identifies this feature
          example: firmware_management
        description:
          type: string
          description: The description for this feature
          nullable: true
          example: Firmware updates remotely
        requirements:
          type: string
          description: The requirements for this feature
          nullable: true
          example: Support UpdateFirmware functionality
        enabled:
          type: boolean
          description: The current status of the feature
          example: true
    ChargePointState:
      type: string
      description: "Various types of Charge Point states. Definitions: \n\n* `available`\
        \ - The charge point is available for charging. \n* `busy` - The charge point\
        \ is currently in use. \n* `busy-blocked` - The charge point is currently\
        \ in use and blocked. \n* `busy-charging` - The charge point is currently\
        \ in use and charging. \n* `busy-non-charging` - The charge point is currently\
        \ in use and not charging. \n* `busy-non-released` - The charge point is currently\
        \ in use and not released. \n* `busy-reserved` - The charge point is currently\
        \ in use and reserved. \n* `busy-scheduled` - The charge point is currently\
        \ in use and scheduled. \n* `error` - The charge point is in an error state.\
        \ \n* `disconnected` - The charge point is disconnected from Monta. \n* `passive`\
        \ - The charge point is in a passive state, charging can only be controlled\
        \ locally. \n* `maintenance` - The charge point is in maintenance mode. \n\
        * `other` - Fallback value, Indicates a new type was added but is not mapped/unknown\
        \ on this API yet. \n"
      enum:
      - available
      - busy
      - busy-blocked
      - busy-charging
      - busy-non-charging
      - busy-non-released
      - busy-reserved
      - busy-scheduled
      - error
      - disconnected
      - passive
      - maintenance
      - other
    ChargePrice:
      required:
      - time
      type: object
      properties:
        time:
          type: string
          description: Hour for the sum of the price
          format: date-time
          example: 2022-05-12T15:00:00Z
        value:
          type: number
          description: Sum of price for this hour
          format: double
          example: 15.8
    ChargeStateDto:
      type: string
      description: Enumerate the various types of charge state
      enum:
      - paying
      - reserved
      - starting
      - charging
      - stopping
      - paused
      - scheduled
      - stopped
      - releasing
      - released
      - completed
      - other
    ChargeType:
      type: string
      enum:
      - external
      - operator
      - sponsored
    ChargesInsight:
      required:
      - currency
      - fromDate
      - insights
      - operator
      - title
      - toDate
      - type
      type: object
      properties:
        type:
          allOf:
          - $ref: '#/components/schemas/ChargesInsightTypeDto'
          - description: The type of charge insight
            example: completed-charges-insights
        fromDate:
          type: string
          description: "Indicates the starting period (`fromDate`) used calculate\
            \ the insights, format (YYYY-MM-DD)</br></br>*Note*: The date will be\
            \ always in UTC"
          format: date
          example: 2023-11-01
        toDate:
          type: string
          description: "Indicates the end period (`toDate`) used calculate the insights,\
            \ format (YYYY-MM-DD), always in UCT</br></br>*Note*: The date will be\
            \ always in UTC"
          format: date
          example: 2023-11-01
        title:
          type: string
          description: The title for for this charge insight
          example: Completed charge sessions insights
        operator:
          allOf:
          - $ref: '#/components/schemas/Operator'
          - description: The operator to which this charge insight belongs to
        currency:
          allOf:
          - $ref: '#/components/schemas/Currency'
          - description: The currency applicable for this charge insight
        insights:
          required:
          - "true"
          type: array
          description: The compilation of insights entries composing this charge insight
          items:
            $ref: '#/components/schemas/ChargesInsightEntry'
    ChargesInsightChargerReport:
      required:
      - chargePointId
      - consumptions
      - teamId
      type: object
      properties:
        teamId:
          required:
          - "true"
          type: integer
          description: Team ID used for this report
          format: int64
        chargePointId:
          required:
          - "true"
          type: integer
          description: ID of the Charge Point
          format: int64
        lastChargeAt:
          required:
          - "false"
          type: string
          description: Date time of the last charge at this charge point during the
            report period. Null if no charges were made.
          format: date-time
          nullable: true
        consumptions:
          required:
          - "true"
          type: array
          description: Charge consumptions
          items:
            $ref: '#/components/schemas/ChargesInsightChargerReportDto.Consumption'
    ChargesInsightChargerReportDto.Consumption:
      required:
      - totalKwh
      - totalSessions
      type: object
      properties:
        totalSessions:
          required:
          - "true"
          type: integer
          description: Number of charging sessions
          format: int64
        totalKwh:
          required:
          - "true"
          type: number
          description: Sum of all Kwh consumed
          format: double
    ChargesInsightDriverReport:
      required:
      - consumptions
      - teamId
      - teamMemberId
      - userId
      type: object
      properties:
        teamId:
          required:
          - "true"
          type: integer
          description: Team ID used for this report
          format: int64
        teamMemberId:
          required:
          - "true"
          type: integer
          description: Team Member ID of the Driver
          format: int64
        userId:
          required:
          - "true"
          type: integer
          description: User ID of the Driver
          format: int64
        consumptions:
          required:
          - "true"
          type: array
          description: Charge consumptions grouped by `chargeType`
          items:
            $ref: '#/components/schemas/ChargesInsightDriverReportDto.Consumption'
    ChargesInsightDriverReportDto.Consumption:
      required:
      - chargeType
      - totalGrossPrice
      - totalKwh
      - totalNetPrice
      - totalSessions
      - totalVat
      type: object
      properties:
        chargeType:
          required:
          - "true"
          type: string
          description: "Defines the type of charge, ie. if it was a sponsored or public\
            \ charge. \n\ndefinitions: \n* `sponsored` - Charges that have been sponsored.\
            \ \n* `team-operator` - Charges that belong to Charge Points of the same\
            \ operator as paying team operator. \n* `public` - Any charge that was\
            \ paid for by this team that does not match the other cases. \n\nNote\
            \ that more chargeTypes might be added in the future. Make sure to handle\
            \ this gracefully."
        totalSessions:
          required:
          - "true"
          type: integer
          description: Number of charging sessions
          format: int64
        totalKwh:
          required:
          - "true"
          type: number
          description: Sum of all Kwh consumed
          format: double
        totalNetPrice:
          required:
          - "true"
          type: number
          description: Sum of all charge net prices
          format: double
        totalVat:
          required:
          - "true"
          type: number
          description: Sum of all charge vat amounts
          format: double
        totalGrossPrice:
          required:
          - "true"
          type: number
          description: Sum of all charge gross prices
          format: double
    ChargesInsightEntry:
      required:
      - summary
      - type
      type: object
      properties:
        type:
          allOf:
          - $ref: '#/components/schemas/ChargesInsightEntryTypeDto'
          - description: The type for this insight entry
            example: completed-sponsored-charges-insights
        summary:
          allOf:
          - $ref: '#/components/schemas/ChargesInsightSummary'
          - description: "The summary for this insight entry, The summary contains\
              \ the compiled statistics for the entry"
    ChargesInsightEntryTypeDto:
      type: string
      description: Enumerate the various types of charge insights
      enum:
      - total-completed-sponsored-charges
      - total-completed-operator-charges
      - total-completed-external-charges
      - total-completed-charges
      - unknown
    ChargesInsightSummary:
      required:
      - totalCost
      - totalKwh
      - totalPrice
      - totalSessions
      type: object
      properties:
        totalKwh:
          required:
          - "true"
          type: number
          description: The total kWh charged for this entry
          format: double
          example: 10.5
        totalPrice:
          required:
          - "true"
          type: integer
          description: The total price for this entry
          format: int64
          example: 50
        totalCost:
          required:
          - "true"
          type: integer
          description: The total cost for this entry
          format: int64
          example: 25
        totalSessions:
          required:
          - "true"
          type: integer
          description: The total sessions for this entry
          format: int64
    ChargesInsightTypeDto:
      type: string
      description: Enumerate the various types of charges insights
      enum:
      - completed-charges-insights
      - unknown
    Component:
      required:
      - description
      - masterPricing
      - price
      - type
      type: object
      properties:
        type:
          allOf:
          - $ref: '#/components/schemas/ComponentTypeDto'
          - description: The type of price/fee for this component
            example: tariff
        price:
          required:
          - "true"
          type: integer
          description: The price of this component
          format: int64
          example: 1200
        description:
          required:
          - "true"
          type: string
          description: The readable description of this component
          example: Tariff for 10 kwh charged at 1.20 DKK
        masterPricing:
          required:
          - "true"
          type: boolean
          description: Indicates this component is master a master pricing
          example: true
        tag:
          nullable: true
          allOf:
          - $ref: '#/components/schemas/PriceGroupTag'
          - description: The tag for this component
        metadata:
          nullable: true
          allOf:
          - $ref: '#/components/schemas/ComponentMetadataDto'
          - description: "Additional information (metadata) for this component, e.g\
              \ tariffId, kwh and others"
    ComponentMetadataDto:
      required:
      - type
      type: object
      properties:
        type:
          $ref: '#/components/schemas/ComponentMetadataTypeDto'
      discriminator:
        propertyName: type
        mapping:
          spot-price-additional-price-metadata: '#/components/schemas/SpotPriceAdditionalPercentageComponentMetadata'
          spot-price-metadata: '#/components/schemas/SpotPriceComponentMetadata'
          tariff-metadata: '#/components/schemas/TariffComponentMetadata'
          default-metadata: '#/components/schemas/DefaultComponentMetadata'
          duration-fee-metadata: '#/components/schemas/DurationFeeComponentMetadata'
          idle-fee-metadata: '#/components/schemas/IdleFeeComponentMetadata'
      oneOf:
      - $ref: '#/components/schemas/SpotPriceComponentMetadata'
      - $ref: '#/components/schemas/SpotPriceAdditionalPriceComponentMetadata'
      - $ref: '#/components/schemas/SpotPriceAdditionalPercentageComponentMetadata'
      - $ref: '#/components/schemas/DurationFeeComponentMetadata'
      - $ref: '#/components/schemas/IdleFeeComponentMetadata'
      - $ref: '#/components/schemas/TariffComponentMetadata'
      - $ref: '#/components/schemas/DefaultComponentMetadata'
    ComponentMetadataTypeDto:
      type: string
      description: "Enumerate the various types of metadata.The content of metadata\
        \ payloads may differ depending on the typefor example, a tariff payload is\
        \ different from a spot-price payload. This type offers reliable means to\
        \ associate the metadata with the appropriate model class"
      enum:
      - tariff-metadata
      - spot-price-metadata
      - spot-price-additions-metadata
      - idle-fee-metadata
      - duration-fee-metadata
      - default-metadata
    ComponentTypeDto:
      type: string
      description: 'Enumerate the various component types.component types identify
        the component inside a break down '
      enum:
      - tariff
      - spot-price
      - spot-price-additions-absolute
      - spot-price-additions-percent
      - time-based-tariff
      - fixed-kwh
      - fee
      - starting-fee
      - duration-fee
      - fixed-charging-fee
      - idle-fee
      - adjustment
      - other
    Consumer:
      required:
      - clientId
      - createdAt
      - name
      - scopes
      - teamIds
      type: object
      properties:
        name:
          type: string
          description: A name for this credential (e.g. Monta Team A)
          example: Monta Team A
        operatorId:
          type: integer
          description: Your operator id
          format: int64
          example: 42
        teamIds:
          type: array
          description: "List of team ids that are unlocked for API operations. If\
            \ empty, all teams of this operator are unlocked."
          items:
            type: integer
            format: int64
            example: 3342
        clientId:
          type: string
          description: Your client id
          example: 2cae3a14-3dfd-414b-8965-7814370ec324
        rateLimit:
          type: integer
          description: Rate-limit for your account; requests per `rateLimitIntervalInSeconds`
          format: int64
          example: 1000
        rateLimitIntervalInSeconds:
          type: integer
          description: Rate-limit interval for your `rateLimit`
          format: int64
          example: 600
        scopes:
          type: array
          description: List of scopes for this account
          items:
            type: string
            example: charge-points
            enum:
            - all
            - charge-points
            - map
            - charge-transactions
            - wallet-transactions
            - control-charging
        createdAt:
          type: string
          description: Creation date of this consumer
          format: date-time
          example: 2022-05-12T15:56:45.99Z
        updatedAt:
          type: string
          description: Update date of this consumer
          format: date-time
          nullable: true
          example: 2022-05-12T16:56:45.99Z
    Coordinates:
      type: object
      properties:
        latitude:
          type: number
          description: Latitude value of coordinate
          format: double
          example: 55.6760968
        longitude:
          type: number
          description: Longitude value of coordinate
          format: double
          example: 12.5683371
    Country:
      required:
      - alpha2Code
      - id
      - name
      type: object
      properties:
        id:
          required:
          - "true"
          type: integer
          description: Id of the country
          format: int64
          example: 1
        name:
          required:
          - "true"
          type: string
          description: Name of the country
          example: Bangladesh
        alpha2Code:
          required:
          - "true"
          type: string
          description: "Country code in Alpha-2 format, following ISO-3166"
          example: dk
    CountryArea:
      required:
      - countryId
      - id
      - level
      - name
      type: object
      properties:
        id:
          required:
          - "true"
          type: integer
          description: Id of the country area
          format: int64
          example: 1
        countryId:
          required:
          - "true"
          type: integer
          description: Id of the country for the country area
          format: int64
          example: 194
        name:
          required:
          - "true"
          type: string
          description: Name of the country area
          example: United Kingdom
        externalId:
          type: string
          description: The external id of the country area
          nullable: true
          example: GB
        level:
          allOf:
          - $ref: '#/components/schemas/CountryAreaLevel'
          - description: The level of depth for this country area
            example: bidding-area
    CountryAreaLevel:
      type: string
      enum:
      - bidding-area
      - dso
      - tso
      - other
    CreateAdditionalPricingDto:
      required:
      - type
      - value
      type: object
      properties:
        type:
          allOf:
          - $ref: '#/components/schemas/AdditionalPricingType'
          - description: Type of the additional pricing. `absolute` means the value
              is a price.
            example: percentage
        value:
          required:
          - "true"
          type: number
          description: The value of this additional pricing.
    CreateChargeAuthToken:
      required:
      - identifier
      - teamId
      - type
      type: object
      properties:
        teamId:
          minimum: 0
          exclusiveMinimum: true
          required:
          - "true"
          type: integer
          description: Id of the team the charge auth token belongs
          format: int64
          example: 42
        userId:
          minimum: 0
          exclusiveMinimum: true
          type: integer
          description: Id of the user the charge auth token should be associated to
          format: int64
          nullable: true
          example: 1
        identifier:
          minLength: 1
          pattern: "^(?!VID:)[\\s\\S]*"
          required:
          - "true"
          type: string
          description: "Identifier of the the charge auth token, Note: without prefix\
            \ e.g `VID:`"
          example: 38C58DB85F4
        type:
          allOf:
          - $ref: '#/components/schemas/ChargeAuthenticationType'
          - description: Type of the charge auth token
            example: vehicleId
        name:
          type: string
          description: Name of the charge auth token
          nullable: true
          example: Monta Office Charge Key
        montaNetwork:
          type: boolean
          description: If the charge auth token should be active in the Monta network
          example: true
          default: true
        roamingNetwork:
          type: boolean
          description: If the charge auth token should be active in the Roaming network
          example: true
          default: true
        operatorNetwork:
          type: boolean
          description: Indicates that the charge auth token can be used on other teams
            charge points underthe same operator
          nullable: true
          example: true
          default: true
        activeUntil:
          type: string
          description: "Indicates until when this charge auth token should be active,\
            \ null means indefinitely"
          format: date-time
          nullable: true
          example: 2023-01-11T00:00:00Z
        blockedAt:
          type: string
          description: |
            If the charge auth token is blocked, it will not be able to charge.
            * `null` = not blocked
            * date-time = blocked since date-time
          format: date-time
          nullable: true
          example: 2023-01-11T00:00:00Z
        partnerExternalId:
          type: string
          description: "External Id of this entity, managed by you."
          nullable: true
          example: ACME-12345
        partnerCustomPayload:
          type: array
          description: "Custom JSON payload for this entity, managed by you."
          nullable: true
          items:
            type: object
    CreateChargePoint:
      required:
      - chargePointModelId
      - maxKw
      - name
      - siteId
      - teamId
      - type
      - visibility
      type: object
      properties:
        teamId:
          minimum: 0
          exclusiveMinimum: true
          required:
          - "true"
          type: integer
          description: Id of the team that the charge point belongs to
          format: int64
          example: 13
        siteId:
          minimum: 0
          exclusiveMinimum: true
          required:
          - "true"
          type: integer
          description: Id of the site the charge point belongs to
          format: int64
          example: 20
        chargePointModelId:
          minimum: 0
          exclusiveMinimum: true
          required:
          - "true"
          type: integer
          description: Id of the charge point model
          format: int64
          example: 20
        name:
          minLength: 1
          required:
          - "true"
          type: string
          description: Name of the charge point
          example: CP - CPH Office
        maxKw:
          minimum: 0
          exclusiveMinimum: true
          required:
          - "true"
          type: number
          description: Max Kw (Max Power) the charge point can output
          format: double
          example: 22
        visibility:
          allOf:
          - $ref: '#/components/schemas/VisibilityType'
          - description: Visibility type of the charge point
            example: private
        type:
          allOf:
          - $ref: '#/components/schemas/ElectricCurrentType'
          - description: Electric current type the charge point support
            example: ac
        active:
          type: boolean
          description: Indicates the charge point is active
          nullable: true
          example: true
          default: true
        showOnMap:
          type: boolean
          description: "\n            Indicates the charge point should be displayed\
            \ on map.\n            \n            By setting this to false, the charge\
            \ point will not be shown on the app's map, \n            but will still\
            \ be fully functional for users of the charge point.\n        "
          nullable: true
          example: true
          default: true
        connectorIds:
          type: array
          description: "\n           Ids of the connectors this charge point support,\
            \ \n           When not present the provide charge point model connectors\
            \ will be used instead. \n        "
          nullable: true
          example: "[1,2,3,4]"
          items:
            type: integer
            format: int64
        note:
          type: string
          description: "A note (instructions, warning, information) you have entered\
            \ for this charge point"
          nullable: true
          example: In order to access this charge point enter 0000 as code at the
            gate.
        partnerExternalId:
          type: string
          description: "External Id of this entity, managed by you."
          nullable: true
          example: ACME-12345
        partnerCustomPayload:
          type: array
          description: "Custom JSON payload for this entity, managed by you."
          nullable: true
          items:
            type: object
    CreateInstallerJobDto:
      required:
      - siteId
      type: object
      properties:
        siteId:
          required:
          - "true"
          type: integer
          description: Site id of the site where the installer job will be created.
          format: int64
          example: 13
        description:
          type: string
          description: "A description of the installer job, visible for the installer."
          nullable: true
          example: You will find the site in Parking Lot 2A. You can contact the site
            manager at 123456789.
        email:
          type: string
          description: "The email of the installer. If provided, an email will be\
            \ sent to the installerwith the description of the installer job."
          nullable: true
          example: installer@acme.com
    CreateOrUpdateChargePointIntegration:
      required:
      - chargePointId
      - chargePointModelId
      - serialNumber
      type: object
      properties:
        chargePointId:
          minimum: 0
          exclusiveMinimum: true
          required:
          - "true"
          type: integer
          description: Id of the charge point to setup the integration
          format: int64
          example: 13
        chargePointModelId:
          minimum: 0
          exclusiveMinimum: true
          required:
          - "true"
          type: integer
          description: Id of the charge point model to be integrated
          format: int64
          example: 20
        serialNumber:
          minLength: 1
          required:
          - "true"
          type: string
          description: The serial number for the charge point integration
          example: "46964534"
        connectorId:
          minimum: 0
          exclusiveMinimum: true
          required:
          - "false"
          type: integer
          description: Connector id for the charge point integration. when `null`
            the `connectorId` will default to `1`
          format: int32
          nullable: true
          example: 1
        autoConnect:
          required:
          - "false"
          type: boolean
          description: "Indicates that an attempt to connect the charge point should\
            \ happen, when `autoConnect` is set to true the Charge Point needs to\
            \ point to Monta (via OCPP websocket)</br></br>Note: when false the integration\
            \ will be create but the state will be to `pending`"
          nullable: true
          example: true
          default: true
    CreateOrUpdatePriceGroupDto:
      required:
      - masterPrice
      - name
      - teamId
      - type
      type: object
      properties:
        teamId:
          minimum: 0
          exclusiveMinimum: true
          required:
          - "true"
          type: integer
          description: Team ID
          format: int64
          example: 1
        name:
          required:
          - "true"
          type: string
          description: Name of the price group
          example: Public Price Group
        type:
          allOf:
          - $ref: '#/components/schemas/PriceGroupType'
          - description: Type of the price group
            example: public
        masterPrice:
          allOf:
          - $ref: '#/components/schemas/CreateOrUpdatePricingDto'
          - description: The master price
        fees:
          required:
          - "false"
          type: array
          description: All the fees for the price group
          nullable: true
          items:
            $ref: '#/components/schemas/CreateOrUpdatePricingDto'
    CreateOrUpdatePricingDto:
      required:
      - endAtFullyCharged
      - price
      - type
      - vat
      type: object
      properties:
        description:
          required:
          - "false"
          type: string
          description: Name of the pricing. It is null when it's the master price
          nullable: true
          example: Starting Fee
        type:
          allOf:
          - $ref: '#/components/schemas/PricingType'
          - description: Type of the pricing. `minute` is used for Minute fee. `min`
              is used for the master price.
            example: kwh
        endAtFullyCharged:
          required:
          - "true"
          type: boolean
          description: Used by the Minute fee. True means it will stop charging the
            fee when the charge is complete. False means it will stop charging the
            fee when the cable is unplugged
          example: false
        vat:
          required:
          - "true"
          type: boolean
          description: Used by Spot Price. True means it will add 25% VAT in the price
            calculations
          example: false
        percentage:
          required:
          - "false"
          type: number
          description: Used by Spot Price. It will multiply the fallback price by
            this percentage
          nullable: true
          example: 10.2
          default: 100
        tariffId:
          minimum: 0
          exclusiveMinimum: true
          required:
          - "false"
          type: integer
          description: The id of the selected Tariff
          format: int64
          nullable: true
          example: 5
        tagId:
          minimum: 0
          exclusiveMinimum: true
          required:
          - "false"
          type: integer
          description: The id of the selected charge pricing tag
          format: int64
          nullable: true
          example: 10
        applyAfterMinutes:
          required:
          - "false"
          type: integer
          description: "Used by Charging, Minute and Idle Fees. After how many minutes\
            \ the fee should start being applied."
          format: int32
          nullable: true
          example: 30
        price:
          required:
          - "true"
          type: number
          description: "The price of this Fee or Master price, </br>**Note**: the\
            \ master price cannot be a negative value"
        priceMin:
          required:
          - "false"
          type: number
          description: Used by spot price. The minimum that the raw spot price can
            be. This will be used in calculations if spot price is lower than this
          nullable: true
        priceMax:
          required:
          - "false"
          type: number
          description: Used by spot price. The maximum that the raw spot price can
            be. This will be used in calculations if spot price is higher than this
          nullable: true
        feePriceMax:
          required:
          - "false"
          type: number
          description: Used by Idle fee. The maximum the user will be charged for
            the idle fee
          nullable: true
        additional:
          required:
          - "false"
          type: array
          description: Used by spot price. Additional absolute money or percentages
            values to be added on top of the previous calculations
          nullable: true
          items:
            $ref: '#/components/schemas/CreateAdditionalPricingDto'
        from:
          required:
          - "false"
          type: string
          description: DateTime "from" time to which this pricing should apply from
          format: date-time
          nullable: true
          example: 2023-03-16T15:37:23Z
        to:
          required:
          - "false"
          type: string
          description: DateTime "to" time to which this pricing should apply to
          format: date-time
          nullable: true
          example: 2023-03-16T15:37:23Z
    CreatePriceGroupTag:
      required:
      - name
      type: object
      properties:
        name:
          minLength: 1
          type: string
          description: Name of the tag. names are unique and cannot be reused.
          example: Energy
        description:
          type: string
          description: Description of the tag.
          nullable: true
          example: Can be used to group `Energy` pricing elements
        partnerExternalId:
          type: string
          description: "External Id of this entity, managed by you."
          nullable: true
          example: ACME-12345
        partnerCustomPayload:
          type: array
          description: "Custom JSON payload for this entity, managed by you."
          nullable: true
          items:
            type: object
    CreateSite:
      required:
      - address
      - name
      - teamId
      - visibility
      type: object
      properties:
        teamId:
          required:
          - "true"
          type: integer
          description: Id of the team that the site belongs to
          format: int64
          example: 13
        name:
          minLength: 1
          required:
          - "true"
          type: string
          description: Name of the site
          example: Monta CPH Site
        address:
          allOf:
          - $ref: '#/components/schemas/CreatedOrUpdateAddress'
          - description: "Address of the site, Note: please ensure to always provide\
              \ a valid address"
        visibility:
          allOf:
          - $ref: '#/components/schemas/VisibilityType_1'
          - description: Visibility type of the site
            example: private
        partnerExternalId:
          type: string
          description: "External Id of this entity, managed by you."
          nullable: true
          example: ACME-12345
        partnerCustomPayload:
          type: array
          description: "Custom JSON payload for this entity, managed by you."
          nullable: true
          items:
            type: object
    CreateSponsoredChargePointDto:
      required:
      - payoutSchedule
      type: object
      properties:
        sponsoringTeamId:
          minimum: 0
          exclusiveMinimum: true
          type: integer
          description: Id of the team that is sponsoring this charge point
          format: int64
          example: 1
        chargePointId:
          minimum: 0
          exclusiveMinimum: true
          type: integer
          description: Id of the charge point to be sponsored
          format: int64
          example: 1
        userId:
          minimum: 0
          exclusiveMinimum: true
          type: integer
          description: Id of the user to have a charge point sponsored
          format: int64
          example: 1
        priceGroupId:
          minimum: 0
          exclusiveMinimum: true
          type: integer
          description: "The price group for this sponsorship, Only price groups of\
            \ type `reimbursement` or `sponsored` are allowed</br></br>*Note:* if\
            \ the `priceGroupId` is null the charge point cost price group will be\
            \ used instead, if the charge point has no cost price group set the request\
            \ will fail, please ensure that charge point has a valid cost group assigned\
            \ when not providing a `priceGroupId`"
          format: int64
          nullable: true
          example: 1
        payoutSchedule:
          allOf:
          - $ref: '#/components/schemas/SponsoredChargePointPayoutType'
          - description: The payout schedule for this sponsored charge point
            example: realtime
        payForSubscriptions:
          type: boolean
          description: Indicates that company pay for subscriptions
          example: false
          default: false
    CreateSubscription:
      required:
      - customerType
      type: object
      properties:
        planId:
          minimum: 0
          exclusiveMinimum: true
          type: integer
          description: Id of the plan to subscribe to
          format: int64
        customerType:
          allOf:
          - $ref: '#/components/schemas/SubscriptionCustomerType'
          - description: Type of customer the subscription is created for.Currently
              you can create subscriptions for charge-points only.
        customerId:
          minimum: 0
          exclusiveMinimum: true
          type: integer
          description: "Id of the customer the subscription is created for, e.g. a\
            \ chargePointId"
          format: int64
        discountAbsolute:
          minimum: 0
          exclusiveMinimum: true
          required:
          - "false"
          type: number
          description: "Allows to modify the absolute discount on a subscription if\
            \ provided.\n            If not provided, the discount of the plan is\
            \ used.\n            Note: If you want to set it on an existing subscription,\
            \ you have to cancel the subscription first.\n        "
          format: double
          nullable: true
        discountPercentage:
          minimum: 0
          exclusiveMinimum: true
          required:
          - "false"
          type: number
          description: "Allows to modify the percentage discount on a subscription\
            \ if provided.\n            If not provided, the discount of the plan\
            \ is used.\n            Note: If you want to set it on an existing subscription,\
            \ you have to cancel the subscription first.\n        "
          format: double
          nullable: true
        serviceConfig:
          nullable: true
          allOf:
          - $ref: '#/components/schemas/SubscriptionServiceConfig'
          - description: "Configure the subscription, based on the plans serviceType.Currently\
              \ you can configure tax-refund subscriptions only."
    CreateTariffPricesRequest:
      required:
      - end
      - start
      type: object
      properties:
        start:
          required:
          - "true"
          type: string
          description: Start date that marks when prices should be created for a tariff
            (yyyy-MM-dd)
          format: date
          example: 2023-01-01
        end:
          required:
          - "true"
          type: string
          description: End date that marks when prices should be created for a tariff
            (yyyy-MM-dd)
          format: date
          example: 2023-01-31
    CreateTariffRequest:
      required:
      - area
      - countryId
      - currencyId
      - description
      - externalId
      - name
      - pricesWithVat
      - timeZone
      - zipCodes
      type: object
      properties:
        externalId:
          required:
          - "true"
          type: string
          description: external id
          example: "1"
        name:
          required:
          - "true"
          type: string
          description: 'Radius Elnet A/S '
          example: ""
        description:
          required:
          - "true"
          type: string
          description: Short description of this tariff
          example: Net tariff A high
        countryId:
          required:
          - "true"
          type: integer
          description: Id of the country where the tariff is applicable
          format: int64
          example: 1
        countryAreaId:
          required:
          - "false"
          type: integer
          description: Id of the country area where the tariff is applicable
          format: int64
          nullable: true
          example: 1
        currencyId:
          required:
          - "true"
          type: integer
          description: Id of the currency in which the tariff is applicable
          format: int64
          example: 1
        teamId:
          required:
          - "false"
          type: integer
          description: Team id
          format: int64
          nullable: true
          example: 1
        pricesWithVat:
          required:
          - "true"
          type: boolean
          description: Indication if prices are with vat
          example: true
        zipCodes:
          required:
          - "true"
          type: array
          description: Zip codes where this tariff is applicable
          example: "[\"2200\", \"2100\"]"
          items:
            type: string
        tariffType:
          allOf:
          - $ref: '#/components/schemas/TariffType'
          - description: Dynamic or weekly
            example: WEEKLY
        active:
          required:
          - "false"
          type: boolean
          description: Indication if this tariff is active
          example: false
        timeZone:
          required:
          - "true"
          type: string
          description: What time zone is the tariff active in
          example: Europe/Copenhagen
        area:
          required:
          - "true"
          type: string
          description: Human description of the area the tariff is active in
          example: Fyn
        customerType:
          nullable: true
          allOf:
          - $ref: '#/components/schemas/TariffCustomerType'
          - description: What kind of customer types are the tariff for?
            example: c_customer
    CreateTeamDto:
      required:
      - address
      - contactEmail
      - name
      - type
      type: object
      properties:
        userId:
          type: integer
          description: Id of the user that owns the team
          format: int64
          nullable: true
          example: 42
        userEmail:
          type: string
          description: "email of the user that owns the team, useful when the userId\
            \ is not known"
          format: email
          nullable: true
          example: user@monta.com
        name:
          minLength: 1
          type: string
          description: Name of the team
          example: Monta CPH Team
        contactEmail:
          type: string
          description: Contact email of the team
          format: email
          example: contact@monta.com
        type:
          allOf:
          - $ref: '#/components/schemas/TeamType.Creatable'
          - description: type of the team
            example: private
        address:
          allOf:
          - $ref: '#/components/schemas/CreatedOrUpdateAddress'
          - description: "Address of the team, Note: be sure to add always a valid\
              \ address"
        companyName:
          type: string
          description: The company name for the team
          nullable: true
          example: Monta ApS
        vatNumber:
          type: string
          description: The vat number for the team
          nullable: true
          example: DK13585628
        financeEmail:
          type: string
          description: finance contact email of the team
          format: email
          nullable: true
          example: finance_contact@monta.com
        partnerExternalId:
          type: string
          description: "External Id of this entity, managed by you."
          nullable: true
          example: ACME-12345
        partnerCustomPayload:
          type: array
          description: "Custom JSON payload for this entity, managed by you."
          nullable: true
          items:
            type: object
    CreateTeamMember:
      required:
      - role
      type: object
      properties:
        teamId:
          minimum: 0
          exclusiveMinimum: true
          type: integer
          description: Id of the team that the user will be invited
          format: int64
          example: 1
        userId:
          minimum: 0
          exclusiveMinimum: true
          type: integer
          description: "Id of the user to be invited</br>*Note*: When inviting by\
            \ `userId` the fields `email` or `phone` must not be provided."
          format: int64
          nullable: true
          example: 1
        email:
          type: string
          description: "Email of the user to be invited</br>*Note*: When inviting\
            \ by `email` the fields `userId` or `phone` must not be provided."
          format: email
          nullable: true
          example: partner-api@monta.com
        phone:
          pattern: "^\\+[1-9]\\d{1,14}$"
          type: string
          description: "Phone of the user to be invited</br>*Note*: When inviting\
            \ by `phone` the fields `userId` or `email` must not be provided."
          nullable: true
          example: "+45123456789"
        role:
          allOf:
          - $ref: '#/components/schemas/TeamMemberRole'
          - description: Role for this member within the team
            example: admin
        priceGroupId:
          type: integer
          description: "The price group for this team member, when not provided the\
            \ default team price group will be applied"
          format: int64
          nullable: true
          example: 1
        canPayWithTeamWallet:
          type: boolean
          description: Gives the team member access to pay with team wallet when charging
          example: false
          default: false
        canRequestSponsoring:
          type: boolean
          description: Allows the team member to request sponsoring from this team
            for their charge point
          example: false
          default: false
        canManageTeamMembers:
          type: boolean
          description: Allows the team member to view and manage other members settings
          example: false
          default: false
        teamWalletChargePaymentType:
          nullable: true
          allOf:
          - $ref: '#/components/schemas/TeamWalletChargePaymentType'
        canManageTeamWallet:
          type: boolean
          description: Gives the team member access to withdraw and deposit from your
            team wallet to your bank account
          example: false
          default: false
        note:
          type: string
          description: A note for the team member
          nullable: true
          example: Welcome to the Monta team
        chargePointIds:
          required:
          - "false"
          type: array
          description: Ids of the charge point this team member with will have access
          nullable: true
          example: "[1,2,3,4]"
          items:
            type: integer
            format: int64
        partnerExternalId:
          type: string
          description: "External Id of this entity, managed by you."
          nullable: true
          example: ACME-12345
        partnerCustomPayload:
          type: array
          description: "Custom JSON payload for this entity, managed by you."
          nullable: true
          items:
            type: object
    CreatedOrUpdateAddress:
      required:
      - address1
      - city
      - countryId
      - zipCode
      type: object
      properties:
        address1:
          minLength: 1
          required:
          - "true"
          type: string
          description: First line of address
          example: Strandboulevarden 122
        address2:
          minLength: 1
          required:
          - "false"
          type: string
          description: Second line of address
          nullable: true
          example: KÃ¸benhavn
        address3:
          minLength: 1
          required:
          - "false"
          type: string
          description: Third line of address
          nullable: true
          example: 5. sal
        city:
          minLength: 1
          type: string
          description: The city name
          example: Berlin
        zipCode:
          minLength: 1
          required:
          - "true"
          type: string
          description: The address zip code
          example: "10011"
        countryId:
          minimum: 0
          exclusiveMinimum: true
          required:
          - "true"
          type: integer
          description: "The country id, Note"
          format: int64
          example: 194
    Currency:
      required:
      - identifier
      - name
      type: object
      properties:
        identifier:
          type: string
          description: "Currency identifier, e.g. dkk"
          example: dkk
        name:
          type: string
          description: Readable name of currency
          example: Danish krone
        decimals:
          type: integer
          description: Number of decimals for this currency
          format: int32
          example: 2
    CurrencyDto_3:
      type: object
      properties:
        id:
          minimum: 0
          exclusiveMinimum: true
          required:
          - "false"
          type: integer
          description: id of the currency
          format: int64
          nullable: true
          example: 1
        identifier:
          type: string
          description: "Currency identifier, e.g. DKK"
          nullable: true
          example: DKK
        name:
          type: string
          description: Readable name of currency
          nullable: true
          example: Danish krone
        decimals:
          type: integer
          description: Number of decimals for this currency
          format: int32
          example: 2
    CurrencyDto_4:
      type: object
      properties:
        id:
          minimum: 0
          exclusiveMinimum: true
          required:
          - "false"
          type: integer
          description: id of the currency
          format: int64
          nullable: true
          example: 1
        identifier:
          type: string
          description: "Currency identifier, e.g. DKK"
          nullable: true
          example: DKK
        name:
          type: string
          description: Readable name of currency
          nullable: true
          example: Danish krone
        decimals:
          type: integer
          description: Number of decimals for this currency
          format: int32
          example: 2
    DayOfWeek:
      type: string
      enum:
      - MONDAY
      - TUESDAY
      - WEDNESDAY
      - THURSDAY
      - FRIDAY
      - SATURDAY
      - SUNDAY
    DefaultComponentMetadata:
      required:
      - type
      type: object
      properties:
        type:
          allOf:
          - $ref: '#/components/schemas/ComponentMetadataTypeDto'
          - description: The type of this metadata entry
            example: default
        kwh:
          type: number
          description: The kwh for this metadata entry
          format: double
          nullable: true
          example: 12.5
        price:
          type: integer
          description: The kwh for this metadata entry
          format: int64
          nullable: true
          example: 1200
    DetailedBreakdown:
      required:
      - adjustments
      - breakdown
      - currency
      - fees
      - summary
      type: object
      properties:
        summary:
          allOf:
          - $ref: '#/components/schemas/BreakdownSummary'
          - description: The summary of the total prices for this breakdown
        currency:
          allOf:
          - $ref: '#/components/schemas/Currency'
          - description: "The currency applicable for this breakdown (for all the\
              \ components: prices, fees, adjustments)"
        breakdown:
          required:
          - "true"
          type: array
          description: "The breakdown entries for this breakdown, currently organized\
            \ on an hourly basis"
          items:
            $ref: '#/components/schemas/Breakdown'
        fees:
          required:
          - "true"
          type: array
          description: The fees that compose this breakdown
          items:
            $ref: '#/components/schemas/Component'
        adjustments:
          required:
          - "true"
          type: array
          description: The adjustments applied for this breakdown
          items:
            $ref: '#/components/schemas/Component'
    DriverReportDatesFilteredBy:
      type: string
      enum:
      - charge-transaction
      - wallet-transaction
    DurationFeeComponentMetadata:
      required:
      - type
      type: object
      properties:
        type:
          allOf:
          - $ref: '#/components/schemas/ComponentMetadataTypeDto'
          - description: The type of this metadata entry
            example: default-metadata
        totalMinutes:
          type: number
          description: The total duration in minutes for this metadata entry
          format: float
          example: 12.5
        feePerMinute:
          type: integer
          description: For the fee per minute for this metadata entry
          format: int64
          example: 10
    ElectricCurrentType:
      type: string
      enum:
      - ac
      - dc
    FullTariff:
      required:
      - prices
      - tariff
      type: object
      properties:
        tariff:
          allOf:
          - $ref: '#/components/schemas/TariffDto'
          - description: tariff
        prices:
          type: array
          description: list of the tariff prices
          items:
            $ref: '#/components/schemas/Price'
        priceSpecification:
          nullable: true
          allOf:
          - $ref: '#/components/schemas/PriceSpecification'
          - description: Price specification
    GenericPaymentSession:
      required:
      - externalId
      - provider
      type: object
      properties:
        provider:
          type: string
          description: The provider of the payment session
          example: logos
        externalId:
          type: string
          description: The external id of the payment session. Allows retrieving receipts
            via receipt.monta.com by using date and `externalId` or `cardLast4`.
          example: |
            76BB1FCF-946D-4040-A8F7-8FD6ECDEE5B1
        partnerExternalId:
          type: string
          description: "External Id of this entity, managed by you."
          nullable: true
          example: ACME-12345
        cardBrand:
          type: string
          description: The brand of the card used for the payment session
          nullable: true
          example: VISA
        cardLast4:
          type: string
          description: The last 4 digits of the card used for the payment session.
            Allows retrieving receipts via receipt.monta.com by using date and `externalId`
            or `cardLast4`.
          nullable: true
          example: "1234"
    IdleFeeComponentMetadata:
      required:
      - from
      - to
      - type
      type: object
      properties:
        type:
          allOf:
          - $ref: '#/components/schemas/ComponentMetadataTypeDto'
          - description: The type of this metadata entry
            example: default-metadata
        amountPerMinute:
          type: integer
          description: The idle fee per minute for this metadata entry
          format: int64
        minutes:
          type: number
          description: For how long the the charge stayed idle after fully charged
          format: float
          example: 10
        from:
          type: string
          description: The starting date for when the idle fee started to count
          format: date-time
          example: 2022-05-12T15:56:45.99Z
        to:
          type: string
          description: The end date for when the idle fee stopped counting
          format: date-time
          example: 2022-05-12T15:56:45.99Z
    InstallerJob:
      required:
      - createdAt
      - operator
      - publicLink
      - tasks
      type: object
      properties:
        id:
          type: integer
          description: Id of this installer job
          format: int64
          example: 42
        siteId:
          type: integer
          description: Id of the site related to this installer job
          format: int64
          example: 22
        operator:
          allOf:
          - $ref: '#/components/schemas/Operator'
          - description: The operator of this installer job
        teamId:
          type: integer
          description: Id of the team of this installer job
          format: int64
          example: 4124
        description:
          type: string
          description: "Description of this installer job, will be visible to the\
            \ installer"
          nullable: true
          example: "5"
        publicLink:
          type: string
          description: "Public link of this installer job, shareable with the installer"
          example: https://app.monta.app/installer-page/149ffbb6-7b69-47a1-9698-90177c2027da
        chargePointCount:
          type: integer
          description: Number of charge points included in this installer job
          format: int32
          example: 5
        chargePointActiveCount:
          type: integer
          description: Number of active (finished) charge points in this installer
            job
          format: int32
          example: 3
        email:
          type: string
          description: Email of the installer assigned to this job.
          nullable: true
          example: installer@acme.org
        tasks:
          type: array
          description: List of tasks of this installer job
          items:
            $ref: '#/components/schemas/InstallerJobTask'
        completedAt:
          type: string
          description: Date this installer job was completed
          format: date-time
          nullable: true
          example: 2022-05-12T15:56:45.99Z
        createdAt:
          type: string
          description: Date this installer job was created
          format: date-time
          example: 2022-05-12T15:56:45.99Z
        updatedAt:
          type: string
          description: Date this installer job was updated
          format: date-time
          nullable: true
          example: 2022-05-12T15:56:45.99Z
        deletedAt:
          type: string
          description: Date this installer job was deleted
          format: date-time
          nullable: true
          example: 2022-05-12T15:56:45.99Z
    InstallerJobTask:
      required:
      - createdAt
      type: object
      properties:
        id:
          type: integer
          description: Id of this installer job task
          format: int64
          example: 42
        installerJobId:
          type: integer
          description: Id of the installer job of this installer job task
          format: int64
          example: 5
        chargePointId:
          type: integer
          description: Id of the charge point to install
          format: int64
          example: 21
        serialNumber:
          type: string
          description: Serial number of the charge point to install
          nullable: true
          example: "1"
        connector:
          type: integer
          description: Connector ID of the charge point to install
          format: int32
          example: 1
        note:
          type: string
          description: "Note of this installer job task, will be visible to the installer"
          nullable: true
          example: "1"
        installerNote:
          type: string
          description: Note provided by installer during this installer job task
          nullable: true
          example: "1"
        activeAt:
          type: string
          description: Date this installer job task was active
          format: date-time
          nullable: true
          example: 2022-05-12T15:56:45.99Z
        createdAt:
          type: string
          description: Creation date of this installer job task
          format: date-time
          example: 2022-05-12T15:56:45.99Z
        updatedAt:
          type: string
          description: Date this installer job task was last updated
          format: date-time
          nullable: true
          example: 2022-05-12T15:56:45.99Z
        deletedAt:
          type: string
          description: Date this installer job task was deleted
          format: date-time
          nullable: true
          example: 2022-05-12T15:56:45.99Z
    KafkaEventType:
      type: string
      enum:
      - created
      - updated
      - deleted
    KwhPerHour:
      required:
      - time
      type: object
      properties:
        time:
          type: string
          description: Hour for the sum of the kwh
          format: date-time
          example: 2022-05-12T15:00:00Z
        value:
          type: number
          description: Sum of kwh for this hour
          format: double
          example: 15.8
    Location:
      type: object
      properties:
        coordinates:
          nullable: true
          allOf:
          - $ref: '#/components/schemas/Coordinates'
          - description: "Coordinates (lat, lng)"
        address:
          nullable: true
          allOf:
          - $ref: '#/components/schemas/Address'
          - description: Address
    MapResult:
      required:
      - chargePoints
      - cluster
      - sites
      type: object
      properties:
        chargePoints:
          type: array
          items:
            $ref: '#/components/schemas/MapResultChargePoint'
        sites:
          type: array
          items:
            $ref: '#/components/schemas/MapResultSite'
        cluster:
          type: array
          items:
            $ref: '#/components/schemas/MapResultCluster'
    MapResultChargePoint:
      required:
      - connectors
      - deeplinks
      - location
      - visibility
      type: object
      properties:
        id:
          type: integer
          description: Id of this charge point
          format: int64
          example: 1
        siteId:
          type: integer
          description: Id of the site
          format: int64
          nullable: true
          example: 42
        name:
          type: string
          description: Name of the site
          nullable: true
          example: Monta CPH HQ
        visibility:
          type: string
          description: Indicates if this charge point is `public` or `private`
          example: public
          enum:
          - private
          - public
        maxKW:
          type: number
          description: "Deprecated (will be removed by 01.04.24), use `maxKw` field\
            \ instead."
          format: double
          nullable: true
          example: 150
          deprecated: true
          x-sunset: 2024-04-01
        maxKw:
          type: number
          description: Max KW available at this charge point.
          format: double
          nullable: true
          example: 150
        type:
          type: string
          description: Type of charge point (`AC` / `DC`)
          nullable: true
          example: ac
          enum:
          - ac
          - dc
        note:
          type: string
          description: "A note you have entered for this charge point, e.g. via our\
            \ Portal."
          nullable: true
          example: In order to access this charge point enter 0000 as code at the
            gate.
        state:
          type: string
          description: Chargepoint state
          nullable: true
          example: available
          enum:
          - available
          - busy
          - error
          - disconnected
          - passive
          - other
        location:
          allOf:
          - $ref: '#/components/schemas/Location'
          - description: Location information for this charge point
        connectors:
          type: array
          description: "List of supported connector types at this charge point (e.g.\
            \ type-2, ccs, ...)"
          items:
            $ref: '#/components/schemas/ChargePointConnector'
        deeplinks:
          allOf:
          - $ref: '#/components/schemas/ChargePointDeeplinks'
          - description: Deeplinks to open charge screen in Monta app or web.
      description: Reduced model of Charge Point
    MapResultCluster:
      required:
      - coordinates
      type: object
      properties:
        coordinates:
          allOf:
          - $ref: '#/components/schemas/Coordinates'
          - description: Coordinates of the cluster
        count:
          type: integer
          description: Number of entities (Charge points and sites) clustered.
          format: int64
      description: Cluster model
    MapResultSite:
      required:
      - connectors
      - location
      - name
      - visibility
      type: object
      properties:
        id:
          type: integer
          description: Id of the site
          format: int64
          example: 1
        name:
          type: string
          description: Name of the site
          example: Monta CPH HQ
        chargePointCount:
          type: integer
          description: Number of charge points at this site
          format: int64
          example: 42
        maxKW:
          type: number
          description: "Deprecated (will be removed by 01.04.24), use `maxKw` field\
            \ instead."
          format: double
          nullable: true
          example: 150
          deprecated: true
          x-sunset: 2024-04-01
        maxKw:
          type: number
          description: Max KW available at this site.
          format: double
          nullable: true
          example: 150
        type:
          type: string
          description: Type of charge points at this site (`AC` / `DC`)
          nullable: true
          example: ac
          enum:
          - ac
          - dc
        visibility:
          type: string
          description: Indicates if this site is `public` or `private`
          example: public
          enum:
          - private
          - public
        note:
          type: string
          description: "A note you have entered for this site, e.g. via our Portal."
          nullable: true
          example: In order to access this site enter 0000 as code at the gate.
        location:
          allOf:
          - $ref: '#/components/schemas/Location'
          - description: Location information for this site
        connectors:
          type: array
          description: "List of supported connector types at this site (e.g. type-2,\
            \ ccs, ...)"
          items:
            $ref: '#/components/schemas/ChargePointConnector'
      description: Reduced model of Site
    MetadataDto:
      type: object
      discriminator:
        propertyName: type
        mapping:
          tax-refund-metadata: '#/components/schemas/TaxRefundMetadata'
          charge-metadata: '#/components/schemas/ChargeMetadata'
      oneOf:
      - $ref: '#/components/schemas/TaxRefundMetadata'
      - $ref: '#/components/schemas/ChargeMetadata'
    MetadataTypeDto:
      type: string
      enum:
      - tax-refund-metadata
      - charge-metadata
      - default-metadata
    Money:
      required:
      - amount
      - currency
      - locale
      type: object
      properties:
        amount:
          required:
          - "true"
          type: integer
          description: The amount of money
          format: int64
          example: 12312
        currency:
          allOf:
          - $ref: '#/components/schemas/Currency'
          - description: Currency
        locale:
          minLength: 1
          required:
          - "true"
          type: string
          description: Current user locale
          example: en
    MontaAppResponse:
      required:
      - environment
      - origin
      - status
      type: object
      properties:
        status:
          $ref: '#/components/schemas/MontaHttpStatus'
        message:
          type: string
          nullable: true
        origin:
          type: string
        environment:
          type: string
        localizedMessage:
          type: string
          nullable: true
        errorCode:
          type: string
          nullable: true
        context:
          type: object
          additionalProperties: true
          nullable: true
        errors:
          type: array
          nullable: true
          items:
            $ref: '#/components/schemas/MontaAppResponse.ErrorDetail'
        statusCode:
          type: integer
          format: int32
        code:
          type: integer
          format: int32
        readable_message:
          type: string
          nullable: true
        error_code:
          type: string
          nullable: true
    MontaAppResponse.ErrorDetail:
      type: object
      properties:
        field:
          type: string
          nullable: true
        details:
          type: array
          nullable: true
          items:
            $ref: '#/components/schemas/MontaAppResponse.ErrorDetail.Body'
    MontaAppResponse.ErrorDetail.Body:
      required:
      - message
      type: object
      properties:
        message:
          type: string
    MontaHttpStatus:
      type: string
      enum:
      - CONTINUE
      - SWITCHING_PROTOCOLS
      - PROCESSING
      - OK
      - CREATED
      - ACCEPTED
      - NON_AUTHORITATIVE_INFORMATION
      - NO_CONTENT
      - RESET_CONTENT
      - PARTIAL_CONTENT
      - MULTI_STATUS
      - ALREADY_IMPORTED
      - IM_USED
      - MULTIPLE_CHOICES
      - MOVED_PERMANENTLY
      - FOUND
      - SEE_OTHER
      - NOT_MODIFIED
      - USE_PROXY
      - SWITCH_PROXY
      - TEMPORARY_REDIRECT
      - PERMANENT_REDIRECT
      - BAD_REQUEST
      - UNAUTHORIZED
      - PAYMENT_REQUIRED
      - FORBIDDEN
      - NOT_FOUND
      - METHOD_NOT_ALLOWED
      - NOT_ACCEPTABLE
      - PROXY_AUTHENTICATION_REQUIRED
      - REQUEST_TIMEOUT
      - CONFLICT
      - GONE
      - LENGTH_REQUIRED
      - PRECONDITION_FAILED
      - REQUEST_ENTITY_TOO_LARGE
      - REQUEST_URI_TOO_LONG
      - UNSUPPORTED_MEDIA_TYPE
      - REQUESTED_RANGE_NOT_SATISFIABLE
      - EXPECTATION_FAILED
      - I_AM_A_TEAPOT
      - ENHANCE_YOUR_CALM
      - UNPROCESSABLE_ENTITY
      - LOCKED
      - FAILED_DEPENDENCY
      - UNORDERED_COLLECTION
      - TOO_EARLY
      - UPGRADE_REQUIRED
      - PRECONDITION_REQUIRED
      - TOO_MANY_REQUESTS
      - REQUEST_HEADER_FIELDS_TOO_LARGE
      - NO_RESPONSE
      - BLOCKED_BY_WINDOWS_PARENTAL_CONTROLS
      - UNAVAILABLE_FOR_LEGAL_REASONS
      - REQUEST_HEADER_TOO_LARGE
      - INTERNAL_SERVER_ERROR
      - NOT_IMPLEMENTED
      - BAD_GATEWAY
      - SERVICE_UNAVAILABLE
      - GATEWAY_TIMEOUT
      - HTTP_VERSION_NOT_SUPPORTED
      - VARIANT_ALSO_NEGOTIATES
      - INSUFFICIENT_STORAGE
      - LOOP_DETECTED
      - BANDWIDTH_LIMIT_EXCEEDED
      - NOT_EXTENDED
      - NETWORK_AUTHENTICATION_REQUIRED
      - CONNECTION_TIMED_OUT
    MontaPage.Meta:
      required:
      - currentPage
      - itemCount
      - perPage
      - totalItemCount
      - totalPageCount
      type: object
      properties:
        itemCount:
          type: integer
          format: int32
        currentPage:
          type: integer
          format: int32
        perPage:
          type: integer
          format: int32
        totalPageCount:
          type: integer
          format: int32
        totalItemCount:
          type: integer
          format: int64
    MontaPage_ChargeAuthTokenDto_:
      required:
      - data
      - meta
      type: object
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/ChargeAuthToken'
        meta:
          $ref: '#/components/schemas/MontaPage.Meta'
    MontaPage_ChargeDto_:
      required:
      - data
      - meta
      type: object
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/Charge'
        meta:
          $ref: '#/components/schemas/MontaPage.Meta'
    MontaPage_ChargePointBrandDto_:
      required:
      - data
      - meta
      type: object
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/ChargePointBrand'
        meta:
          $ref: '#/components/schemas/MontaPage.Meta'
    MontaPage_ChargePointConnectorDto_:
      required:
      - data
      - meta
      type: object
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/ChargePointConnector'
        meta:
          $ref: '#/components/schemas/MontaPage.Meta'
    MontaPage_ChargePointDto_:
      required:
      - data
      - meta
      type: object
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/ChargePoint'
        meta:
          $ref: '#/components/schemas/MontaPage.Meta'
    MontaPage_ChargePointIntegrationDto_:
      required:
      - data
      - meta
      type: object
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/ChargePointIntegration'
        meta:
          $ref: '#/components/schemas/MontaPage.Meta'
    MontaPage_ChargePointModelDto_:
      required:
      - data
      - meta
      type: object
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/ChargePointModel'
        meta:
          $ref: '#/components/schemas/MontaPage.Meta'
    MontaPage_ChargesInsightChargerReportDto_:
      required:
      - data
      - meta
      type: object
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/ChargesInsightChargerReport'
        meta:
          $ref: '#/components/schemas/MontaPage.Meta'
    MontaPage_ChargesInsightDriverReportDto_:
      required:
      - data
      - meta
      type: object
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/ChargesInsightDriverReport'
        meta:
          $ref: '#/components/schemas/MontaPage.Meta'
    MontaPage_CountryAreaDto_:
      required:
      - data
      - meta
      type: object
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/CountryArea'
        meta:
          $ref: '#/components/schemas/MontaPage.Meta'
    MontaPage_CountryDto_:
      required:
      - data
      - meta
      type: object
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/Country'
        meta:
          $ref: '#/components/schemas/MontaPage.Meta'
    MontaPage_CurrencyDto_:
      required:
      - data
      - meta
      type: object
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/CurrencyDto_3'
        meta:
          $ref: '#/components/schemas/MontaPage.Meta'
    MontaPage_InstallerJobDto_:
      required:
      - data
      - meta
      type: object
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/InstallerJob'
        meta:
          $ref: '#/components/schemas/MontaPage.Meta'
    MontaPage_OperatorDto_:
      required:
      - data
      - meta
      type: object
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/Operator'
        meta:
          $ref: '#/components/schemas/MontaPage.Meta'
    MontaPage_PaymentTerminalDto_:
      required:
      - data
      - meta
      type: object
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/PaymentTerminal'
        meta:
          $ref: '#/components/schemas/MontaPage.Meta'
    MontaPage_PlanDto_:
      required:
      - data
      - meta
      type: object
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/Plan'
        meta:
          $ref: '#/components/schemas/MontaPage.Meta'
    MontaPage_PriceGroupDto_:
      required:
      - data
      - meta
      type: object
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/PriceGroup'
        meta:
          $ref: '#/components/schemas/MontaPage.Meta'
    MontaPage_PriceGroupTagDto_:
      required:
      - data
      - meta
      type: object
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/PriceGroupTag'
        meta:
          $ref: '#/components/schemas/MontaPage.Meta'
    MontaPage_SiteDto_:
      required:
      - data
      - meta
      type: object
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/Site'
        meta:
          $ref: '#/components/schemas/MontaPage.Meta'
    MontaPage_SponsoredChargePointDto_:
      required:
      - data
      - meta
      type: object
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/SponsoredChargePoint'
        meta:
          $ref: '#/components/schemas/MontaPage.Meta'
    MontaPage_SubscriptionDto_:
      required:
      - data
      - meta
      type: object
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/Subscription'
        meta:
          $ref: '#/components/schemas/MontaPage.Meta'
    MontaPage_SubscriptionPurchaseDto_:
      required:
      - data
      - meta
      type: object
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/SubscriptionPurchase'
        meta:
          $ref: '#/components/schemas/MontaPage.Meta'
    MontaPage_TeamDto_:
      required:
      - data
      - meta
      type: object
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/Team'
        meta:
          $ref: '#/components/schemas/MontaPage.Meta'
    MontaPage_TeamMemberDto_:
      required:
      - data
      - meta
      type: object
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/TeamMemberDto'
        meta:
          $ref: '#/components/schemas/MontaPage.Meta'
    MontaPage_WalletDto_:
      required:
      - data
      - meta
      type: object
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/Wallet'
        meta:
          $ref: '#/components/schemas/MontaPage.Meta'
    MontaPage_WalletTransactionDto_:
      required:
      - data
      - meta
      type: object
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/WalletTransaction'
        meta:
          $ref: '#/components/schemas/MontaPage.Meta'
    MontaPage_WebhookEntryDto_:
      required:
      - data
      - meta
      type: object
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/WebhookEntry'
        meta:
          $ref: '#/components/schemas/MontaPage.Meta'
    Operator:
      required:
      - identifier
      - name
      type: object
      properties:
        id:
          type: integer
          description: ID of the operator
          format: int64
          example: 14
        name:
          type: string
          description: Name of operator
          example: Monta
        identifier:
          type: string
          description: Identifier of operator
          example: monta
        partnerId:
          type: integer
          description: Partner id (owner of this operator)
          format: int64
          nullable: true
        vatNumber:
          type: string
          description: VAT number
          nullable: true
          example: FOO-123-ABC
    OperatorAdjustmentTransaction:
      required:
      - fromWalletId
      - toWalletId
      type: object
      properties:
        fromWalletId:
          required:
          - "true"
          type: integer
          description: Id of the wallet to transfer from
          format: int64
          example: 1
        toWalletId:
          required:
          - "true"
          type: integer
          description: Id of the wallet to transfer to
          format: int64
          example: 2
        note:
          type: string
          description: Note for the transaction
          nullable: true
          example: Adjustment for user 12345
        currencyId:
          type: integer
          description: Currency identifier
          format: int64
        amount:
          type: number
          description: Amount to transfer
          format: double
          example: 13.77
        partnerExternalId:
          type: string
          description: "External Id of this entity, managed by you."
          nullable: true
          example: ACME-12345
        partnerCustomPayload:
          type: array
          description: "Custom JSON payload for this entity, managed by you."
          nullable: true
          items:
            type: object
    OperatorRole:
      type: string
      description: Enumerate the possible filters for operator role
      enum:
      - owner
      - payer
    Page_TariffRecurringPeriodDto_:
      type: object
      allOf:
      - $ref: '#/components/schemas/Slice_TariffRecurringPeriodDto_'
      - required:
        - totalSize
        properties:
          totalSize:
            type: integer
            format: int64
          totalPages:
            type: integer
            format: int32
    Pageable:
      type: object
      allOf:
      - $ref: '#/components/schemas/Sort'
      - required:
        - size
        - sort
        properties:
          number:
            type: integer
            format: int32
          size:
            type: integer
            format: int32
          sort:
            $ref: '#/components/schemas/Sort'
    Pair_String.BigDecimal_:
      required:
      - first
      - second
      type: object
      properties:
        first:
          type: string
        second:
          type: number
    PatchCharge:
      type: object
      properties:
        genericPaymentSession:
          nullable: true
          allOf:
          - $ref: '#/components/schemas/GenericPaymentSession'
          - description: "For Partners who want to start charging from payment terminals,\
              \ kiosks etc. Used to link charge transaction against your billing and\
              \ to allow users retrieving receipts via receipt.monta.com by using\
              \ date and `genericPaymentSession.externalId`or `genericPaymentSession.cardLast4`.<br/><br/>**Note:\
              \ This field is optional, but if provided, you need to provide the full\
              \ data, since it will be overwritten with values from this object.**"
        partnerExternalId:
          type: string
          description: "External Id of this entity, managed by you."
          nullable: true
          example: ACME-12345
        partnerCustomPayload:
          type: array
          description: "Custom JSON payload for this entity, managed by you."
          nullable: true
          items:
            type: object
    PatchChargeAuthToken:
      type: object
      properties:
        teamId:
          minimum: 0
          exclusiveMinimum: true
          type: integer
          description: Id of the team the charge auth token belongs to
          format: int64
          nullable: true
          example: 42
        userId:
          minimum: 0
          exclusiveMinimum: true
          type: integer
          description: Id of the user the charge auth token should be associated to
          format: int64
          nullable: true
          example: 1
        name:
          type: string
          description: Name of the charge auth token
          nullable: true
          example: Monta Office Charge Key
        montaNetwork:
          type: boolean
          description: If the charge auth token should be active in the Monta network
          nullable: true
          example: true
          default: true
        roamingNetwork:
          type: boolean
          description: If the charge auth token should be active in the Roaming network
          nullable: true
          example: true
          default: true
        operatorNetwork:
          type: boolean
          description: Indicates that the charge auth token can be used on other teams
            charge points underthe same operator
          nullable: true
          example: true
          default: true
        activeUntil:
          type: string
          description: |-
            Indicates until when this charge auth token is active, null means indefinitely.
            Note: Use `../block` and `../unblock` endpoints to (un)block a charge auth token.
          format: date-time
          nullable: true
          example: 2023-01-11T00:00:00Z
        partnerExternalId:
          type: string
          description: "External Id of this entity, managed by you."
          nullable: true
          example: ACME-12345
        partnerCustomPayload:
          type: array
          description: "Custom JSON payload for this entity, managed by you."
          nullable: true
          items:
            type: object
    PatchChargePoint:
      required:
      - siteId
      - type
      type: object
      properties:
        siteId:
          minimum: 0
          exclusiveMinimum: true
          required:
          - "true"
          type: integer
          description: Id of the site the charge point belongs to
          format: int64
          nullable: true
          example: 20
        name:
          type: string
          description: Name of the charge point
          nullable: true
          example: CP - CPH Office
        maxKw:
          minimum: 0
          exclusiveMinimum: true
          type: number
          description: Max Kw (Max Power) the charge point can output
          format: double
          nullable: true
          example: 22
        visibility:
          nullable: true
          allOf:
          - $ref: '#/components/schemas/VisibilityType'
          - description: Visibility type of the charge point
            example: private
        type:
          nullable: true
          allOf:
          - $ref: '#/components/schemas/ElectricCurrentType'
          - description: Electric current type the charge point support
            example: ac
        active:
          type: boolean
          description: Indicates the charge point is active
          nullable: true
          example: true
          default: true
        showOnMap:
          type: boolean
          description: "\n            Indicates the charge point should be displayed\
            \ on map.\n            \n            By setting this to false, the charge\
            \ point will not be shown on the app's map, \n            but will still\
            \ be fully functional for users of the charge point.\n        "
          nullable: true
          example: true
          default: true
        connectorIds:
          type: array
          description: Ids of the connectors this charge point support
          nullable: true
          example: "[1,2,3,4]"
          items:
            type: integer
            format: int64
        note:
          type: string
          description: "A note (instructions, warning, information) you have entered\
            \ for this charge point"
          nullable: true
          example: In order to access this charge point enter 0000 as code at the
            gate.
        partnerExternalId:
          type: string
          description: "External Id of this entity, managed by you."
          nullable: true
          example: ACME-12345
        partnerCustomPayload:
          type: array
          description: "Custom JSON payload for this entity, managed by you."
          nullable: true
          items:
            type: object
    PatchPriceGroupTag:
      type: object
      properties:
        name:
          type: string
          description: Name of the tag.
          nullable: true
          example: Energy
        description:
          type: string
          description: Description of the tag.
          nullable: true
          example: Can be used to group `Energy` pricing elements
        partnerExternalId:
          type: string
          description: "External Id of this entity, managed by you."
          nullable: true
          example: ACME-12345
        partnerCustomPayload:
          type: array
          description: "Custom JSON payload for this entity, managed by you."
          nullable: true
          items:
            type: object
    PatchSite:
      type: object
      properties:
        name:
          type: string
          description: Name of the site
          nullable: true
          example: Monta CPH Site
        address:
          nullable: true
          allOf:
          - $ref: '#/components/schemas/CreatedOrUpdateAddress'
          - description: "Address of the site, Note: please ensure to always provide\
              \ a valid address"
        visibility:
          nullable: true
          allOf:
          - $ref: '#/components/schemas/VisibilityType_3'
          - description: Visibility type of the site
            example: private
        partnerExternalId:
          type: string
          description: "External Id of this entity, managed by you."
          nullable: true
          example: ACME-12345
        partnerCustomPayload:
          type: array
          description: "Custom JSON payload for this entity, managed by you."
          nullable: true
          items:
            type: object
    PatchSponsoredChargePoint:
      type: object
      properties:
        priceGroupId:
          type: integer
          description: "The price group for this sponsorship, Only price groups of\
            \ type `reimbursement` or `sponsored` are allowed</br>*Note:* if the `priceGroupId`\
            \ is null the charge point cost price group will be used instead, if the\
            \ charge point has no cost price group set the request will fail"
          format: int64
          nullable: true
          example: 1
        payoutSchedule:
          nullable: true
          allOf:
          - $ref: '#/components/schemas/SponsoredChargePointPayoutType'
          - description: The payout schedule for this sponsored charge point
            example: "1"
        payForSubscriptions:
          type: boolean
          description: Indicates that company pay for subscriptions
          nullable: true
          example: false
      description: "Note: Only use Optional for fields that can bet set null. Optional\
        \ will insure jackson can differentiate between a field that was set to NULL\
        \ X Field that was never present on the request."
    PatchTeam:
      type: object
      properties:
        userId:
          type: integer
          description: Id of the user that owns the team
          format: int64
          nullable: true
          example: 42
        userEmail:
          type: string
          description: "email of the user that owns the team, useful when the userId\
            \ is not known"
          format: email
          nullable: true
          example: user@monta.com
        name:
          type: string
          description: Name of the team
          nullable: true
          example: Monta CPH Team
        contactEmail:
          type: string
          description: Contact email of the team
          format: email
          nullable: true
          example: contact@monta.com
        address:
          nullable: true
          allOf:
          - $ref: '#/components/schemas/CreatedOrUpdateAddress'
          - description: Address of the team
        companyName:
          type: string
          description: The company name for the team
          nullable: true
          example: Monta ApS
        vatNumber:
          type: string
          description: The vat number for the team
          nullable: true
          example: DK13585628
        partnerExternalId:
          type: string
          description: "External Id of this entity, managed by you."
          nullable: true
          example: ACME-12345
        partnerCustomPayload:
          type: array
          description: "Custom JSON payload for this entity, managed by you."
          nullable: true
          items:
            type: object
    PatchTeamMember:
      type: object
      properties:
        chargePointIds:
          type: array
          description: Ids of the charge points to patch this team member with
          nullable: true
          example: "[1,2,3,4]"
          items:
            type: integer
            format: int64
        role:
          nullable: true
          allOf:
          - $ref: '#/components/schemas/TeamMemberRole'
          - description: Role for this member within the team
            example: admin
        priceGroupId:
          type: integer
          description: The price group for this team member
          format: int64
          nullable: true
          example: 1
        canPayWithTeamWallet:
          type: boolean
          description: Gives the team member access to pay with team wallet when charging
          nullable: true
          example: false
          default: false
        canManageTeamWallet:
          type: boolean
          description: Gives the team member access to withdraw and deposit from your
            team wallet to your bank account
          nullable: true
          example: false
          default: false
        canRequestSponsoring:
          type: boolean
          description: Allows the team member to request sponsoring from this team
            for their charge point
          nullable: true
          example: false
          default: false
        canManageTeamMembers:
          type: boolean
          description: Allows the team member to view and manage other members settings
          nullable: true
          example: false
          default: false
        teamWalletChargePaymentType:
          nullable: true
          allOf:
          - $ref: '#/components/schemas/TeamWalletChargePaymentType'
        note:
          type: string
          description: A note for the team member
          nullable: true
          example: Welcome to the Monta team
        partnerExternalId:
          type: string
          description: "External Id of this entity, managed by you."
          nullable: true
          example: ACME-12345
        partnerCustomPayload:
          type: array
          description: "Custom JSON payload for this entity, managed by you."
          nullable: true
          items:
            type: object
    PatchWalletTransaction:
      type: object
      properties:
        partnerExternalId:
          type: string
          description: "External Id of this entity, managed by you."
          nullable: true
          example: ACME-12345
        partnerCustomPayload:
          type: array
          description: "Custom JSON payload for this entity, managed by you."
          nullable: true
          items:
            type: object
    PayingTeam:
      required:
      - publicName
      type: object
      properties:
        id:
          type: integer
          description: Id of the paying team
          format: int64
          example: 14
        publicName:
          type: string
          description: Public name of the team
          example: Monta HQ
        operatorId:
          type: integer
          description: Id of the operator the paying team belongs to
          format: int64
          example: 42
    PaymentTerminal:
      required:
      - chargePointIds
      - createdAt
      - id
      - name
      - serial
      - type
      type: object
      properties:
        id:
          type: string
          description: "Id of this terminal. **NOTE: This is a String**"
          example: payter_123
        type:
          allOf:
          - $ref: '#/components/schemas/PaymentTerminalType'
          - description: "Type of this terminal, ie \"payter\""
            example: payter
        teamId:
          type: integer
          description: The team this terminal belongs to
          format: int64
        chargePointIds:
          required:
          - "true"
          type: array
          description: The charge points ids this terminal is assigned to
          items:
            type: integer
            format: int64
        serial:
          type: string
          description: Serial number of the Payment Terminal
          example: XYZ123-DF-123
        name:
          type: string
          description: "Name given to the Payment Terminal, defaults to \"No Name\"\
            \ if not set by the merchant"
          example: MyPaymentTerminal 042
        isConnected:
          type: boolean
          description: Indicates if the terminal is connected or disconnected.
          example: true
        connectedAt:
          type: string
          description: Date this payment terminal did connect
          format: date-time
          nullable: true
          example: 2022-05-12T15:56:45.99Z
        createdAt:
          type: string
          description: Date this entity was created
          format: date-time
          example: 2022-05-12T15:56:45.99Z
        updatedAt:
          type: string
          description: Date this entity was updated
          format: date-time
          nullable: true
          example: 2022-05-12T15:56:45.99Z
        deletedAt:
          type: string
          description: Date this entity was deleted
          format: date-time
          nullable: true
          example: 2022-05-12T15:56:45.99Z
    PaymentTerminalType:
      type: string
      enum:
      - payter
      - other
    Plan:
      required:
      - active
      - applicableFor
      - applicationAudience
      - id
      - identifier
      - name
      - priceModel
      - prices
      - pricesWithVat
      - serviceConfig
      - serviceType
      - visibleInMarketPlace
      type: object
      properties:
        id:
          required:
          - "true"
          type: integer
          description: The id of the Plan
          format: int64
          example: 123
        identifier:
          required:
          - "true"
          type: string
          description: "A unique, readable, identifier of the Plan"
          example: plan-monta-123
        name:
          required:
          - "true"
          type: string
          description: Name of the Plan
          example: ACME GOLD
        countryId:
          required:
          - "false"
          type: integer
          description: Determines the country where the plan is available. `null`
            means it is available in all countries.
          format: int64
          nullable: true
          example: 1
        description:
          required:
          - "false"
          type: string
          description: Description of the Plan
          nullable: true
          example: Charge Point Maintenance 24/7
        summary:
          required:
          - "false"
          type: string
          description: Summary of the Plan
          nullable: true
          example: GOLD Maintenance Plan for ACME customers
        terms:
          required:
          - "false"
          type: string
          description: Terms of the Plan
          nullable: true
          example: Your terms here
        contractUrl:
          required:
          - "false"
          type: string
          description: URL for a generic contract template the user can fill out right
            after subscribing
          nullable: true
          example: https://www.monta.com/contract.pdf
        supportEmail:
          required:
          - "false"
          type: string
          description: Support E-Mail for this Plan
          nullable: true
          example: support@acme.com
        applicableFor:
          allOf:
          - $ref: '#/components/schemas/PlanApplicableFor'
          - description: Indicates whether this plan can be applied to teams or charge
              points. 'operator' value is only used internally.
            example: charge-point
        active:
          required:
          - "true"
          type: boolean
          description: Indicates if the plan is active (only active plans can be applied).
          example: true
        applicationAudience:
          allOf:
          - $ref: '#/components/schemas/PlanApplicationAudience'
          - description: "Indicates whether this plan is shown in your (operator's)\
              \ app only, or in the Monta app as well."
            example: all
        visibleInMarketPlace:
          required:
          - "true"
          type: boolean
          description: Indicates whether this plan is shown in the market place or
            not.
          example: true
        priceModel:
          allOf:
          - $ref: '#/components/schemas/PlanPriceModel'
          - description: Indicates if the price is per charge point or a fixed price.
            example: fixed
        prices:
          required:
          - "true"
          type: array
          description: Active plan prices
          items:
            $ref: '#/components/schemas/PlanPrice'
        pricesWithVat:
          required:
          - "true"
          type: boolean
          description: Indicates if the prices are incl. VAT or not. Default is `true`.
        serviceType:
          allOf:
          - $ref: '#/components/schemas/PlanServiceType'
          - description: "Service of the Plan, custom or tax-refund"
            example: tax-refund
        serviceConfig:
          allOf:
          - $ref: '#/components/schemas/PlanServiceConfig'
          - description: "Additional configuration, based on serviceType"
    PlanApplicableFor:
      type: string
      enum:
      - charge-point
      - team
      - operator
    PlanApplicationAudience:
      type: string
      enum:
      - all
      - own
    PlanPrice:
      required:
      - currency
      type: object
      properties:
        id:
          type: integer
          description: id of the Plan Price
          format: int64
          example: 1
        price:
          type: number
          description: Price of the plan
          format: double
          example: 4.99
        currency:
          allOf:
          - $ref: '#/components/schemas/Currency'
          - description: Currency for `price`.
    PlanPriceModel:
      type: string
      enum:
      - fixed
      - per-charge-point
    PlanServiceConfig:
      type: object
      anyOf:
      - $ref: '#/components/schemas/PlanServiceConfigCustom'
      - $ref: '#/components/schemas/PlanServiceConfigTaxRefund'
    PlanServiceConfigCustom:
      required:
      - additionalFeeAbsolute
      - additionalFeePercentage
      type: object
      properties:
        additionalFeePercentage:
          required:
          - "true"
          type: integer
          description: "This percentage will be added as additional fee, paid by charge\
            \ point owner.Will only be applied to charge point owned by operator."
          format: int32
          example: 2
        additionalFeeAbsolute:
          required:
          - "true"
          type: number
          description: "This absolute value will be added as additional fee, paid\
            \ by charge point owner.Will only be applied to charge point owned by\
            \ operator.Note: This uses the default currency of the operator!"
          format: double
          example: 0.5
    PlanServiceConfigTaxRefund:
      required:
      - additionalFeeAbsolute
      - additionalFeePercentage
      - payoutPerKwh
      - priceIncludesVat
      type: object
      properties:
        additionalFeePercentage:
          required:
          - "true"
          type: integer
          description: "This percentage will be added as additional fee, paid by charge\
            \ point owner.Will only be applied to charge point owned by operator."
          format: int32
          example: 2
        additionalFeeAbsolute:
          required:
          - "true"
          type: number
          description: "This absolute value will be added as additional fee, paid\
            \ by charge point owner.Will only be applied to charge point owned by\
            \ operator.Note: This uses the default currency of the operator!"
          format: double
          example: 0.5
        payoutPerKwh:
          required:
          - "true"
          type: number
          description: Amount to pay out per kWh
          format: double
          example: 1.29
        priceIncludesVat:
          required:
          - "true"
          type: boolean
          description: Indicates whether the VAT is already included in the price
          example: true
    PlanServiceType:
      type: string
      enum:
      - custom
      - tax-refund
    Price:
      required:
      - start
      type: object
      properties:
        start:
          type: string
          description: start
          format: date-time
        price:
          type: number
          description: price
          nullable: true
    PriceGroup:
      required:
      - appliedTo
      - createdAt
      - id
      - masterPrice
      - name
      - tariffs
      - type
      type: object
      properties:
        id:
          minimum: 0
          exclusiveMinimum: true
          required:
          - "true"
          type: integer
          description: Id of the price group
          format: int64
          example: 522
        name:
          required:
          - "true"
          type: string
          description: Name of the price group
          example: Public Price Group
        default:
          type: boolean
        type:
          allOf:
          - $ref: '#/components/schemas/PriceGroupType'
          - description: Type of the price group
            example: public
        masterPrice:
          allOf:
          - $ref: '#/components/schemas/Pricing'
          - description: The master price
        tariffs:
          required:
          - "true"
          type: array
          description: Tariffs of the price group
          nullable: true
          items:
            $ref: '#/components/schemas/Pricing'
        fees:
          required:
          - "false"
          type: array
          description: Fees of the price group
          nullable: true
          items:
            $ref: '#/components/schemas/Pricing'
        teamMemberCount:
          required:
          - "false"
          type: integer
          description: To how many team members the price group has been applied to
          format: int32
          nullable: true
        chargePointCount:
          required:
          - "false"
          type: integer
          description: To how many charge points the price group has been applied
            to
          format: int32
          nullable: true
        appliedTo:
          $ref: '#/components/schemas/PriceGroupAppliedTo'
        createdAt:
          required:
          - "true"
          type: string
          description: When the price group was created
          format: date-time
          example: 2023-03-16T15:37:23Z
        updatedAt:
          required:
          - "false"
          type: string
          description: When the price group was updated
          format: date-time
          nullable: true
          example: 2023-03-16T15:37:23Z
    PriceGroupAppliedTo:
      required:
      - chargePoints
      - sites
      - teamMembers
      type: object
      properties:
        chargePoints:
          required:
          - "true"
          type: array
          description: Id's of the ChargePoints this Pricegroup has been applied to
          items:
            type: integer
            format: int64
        sites:
          required:
          - "true"
          type: array
          description: Id's of the Sites this Pricegroup has been applied to
          items:
            type: integer
            format: int64
        teamMembers:
          required:
          - "true"
          type: array
          description: Id's of the Team Members this Pricegroup has been applied to
          items:
            type: integer
            format: int64
    PriceGroupTag:
      required:
      - createdAt
      - name
      type: object
      properties:
        id:
          type: integer
          description: The id for this tag.
          format: int64
        name:
          type: string
          description: The name for this tag.
          example: Energy
        description:
          type: string
          description: The description for this tag.
          nullable: true
          example: Used to group `Energy` pricing elements
        partnerExternalId:
          type: string
          description: "External Id of this entity, managed by you."
          nullable: true
          example: ACME-12345
        partnerCustomPayload:
          type: array
          description: "Custom JSON payload for this entity, managed by you."
          nullable: true
          items:
            type: object
        operator:
          nullable: true
          allOf:
          - $ref: '#/components/schemas/Operator'
          - description: The operator to which this resource belongs to.
        createdAt:
          type: string
          description: Creation date of this resource.
          format: date-time
          example: 2022-05-12T15:56:45.99Z
        updatedAt:
          type: string
          description: Last update date of this resource.
          format: date-time
          nullable: true
          example: 2022-05-12T16:56:45.99Z
    PriceGroupType:
      type: string
      enum:
      - public
      - member
      - sponsored
      - cost
      - roaming
      - reimbursement
      - other
    PriceSpecification:
      required:
      - specifications
      type: object
      properties:
        specifications:
          type: array
          description: price specifications
          items:
            $ref: '#/components/schemas/Pair_String.BigDecimal_'
    PricesForecast:
      required:
      - currency
      - forecasts
      - operator
      - priceGroup
      type: object
      properties:
        operator:
          allOf:
          - $ref: '#/components/schemas/Operator'
          - description: The operator to which this charge point and price group belongs
              to
        currency:
          allOf:
          - $ref: '#/components/schemas/Currency'
          - description: The currency applicable for this forecast
        priceGroup:
          allOf:
          - $ref: '#/components/schemas/PriceGroup'
          - description: The price group applicable for this forecast
        forecasts:
          required:
          - "true"
          type: array
          description: The compilation of entries composing this prices forecast
          items:
            $ref: '#/components/schemas/PricesForecastEntry'
    PricesForecastEntry:
      required:
      - name
      - pricePerKwh
      - time
      type: object
      properties:
        time:
          required:
          - "true"
          type: string
          description: "The time this forecasted price is applicable, forecast is\
            \ valid from time + 1 Hour"
          format: date-time
          example: 2023-11-29T18:00:00Z
        pricePerKwh:
          required:
          - "true"
          type: integer
          description: The projected price per kWh
          format: int64
          example: 5978
        name:
          required:
          - "true"
          type: string
          description: The human readable name for the forecast (includes the currency
            information)
          example: 0.60 DKK/kWh
    Pricing:
      required:
      - dynamicPricing
      - endAtFullyCharged
      - id
      - master
      - price
      - type
      - updatedAt
      - vat
      type: object
      properties:
        id:
          minimum: 0
          exclusiveMinimum: true
          required:
          - "true"
          type: integer
          description: Id of the pricing
          format: int64
          example: 1
        description:
          required:
          - "false"
          type: string
          description: Name of the pricing. It will be null when it's the master price
          nullable: true
          example: Starting Fee
        type:
          allOf:
          - $ref: '#/components/schemas/PricingType'
          - description: Type of the pricing. `minute` is used for Minute fee. `min`
              is used for the master price.
            example: min
        master:
          required:
          - "true"
          type: boolean
          description: If this is the master price (not a fee)
          example: true
        dynamicPricing:
          required:
          - "true"
          type: boolean
          description: If it's a dynamic price. It will be true if a `tariffId` is
            present.
          example: false
        endAtFullyCharged:
          required:
          - "true"
          type: boolean
          description: Used by the Minute fee. True means it will stop charging the
            fee when the charge is complete. False means it will stop charging the
            fee when the cable is unplugged
          example: false
        vat:
          required:
          - "true"
          type: boolean
          description: "Used by Spot Price. True means it will add % of VAT on top\
            \ the price calculations</br>*Note*: `vat` rates differ from country to\
            \ country."
          example: false
        percentage:
          required:
          - "false"
          type: number
          description: Used by Spot Price. It will multiply the fallback price by
            this percentage
          format: float
          nullable: true
          example: 10.2
          default: 100
        tariffId:
          required:
          - "false"
          type: integer
          description: The id of the selected Tariff
          format: int64
          nullable: true
          example: 5
        updatedAt:
          required:
          - "true"
          type: string
          description: When the pricing was last updated
          format: date-time
          example: 2023-03-16T15:37:23Z
        applyAfterMinutes:
          required:
          - "false"
          type: integer
          description: "Used by Charging, Minute and Idle Fees. After how many minutes\
            \ the fee should start being applied."
          format: int32
          nullable: true
          example: 30
        price:
          allOf:
          - $ref: '#/components/schemas/Money'
          - description: The price of this Fee or Master price
        priceMin:
          nullable: true
          allOf:
          - $ref: '#/components/schemas/Money'
          - description: Used by spot price. The minimum that the raw spot price can
              be. This will be used in calculations if spot price is lower than this
        priceMax:
          nullable: true
          allOf:
          - $ref: '#/components/schemas/Money'
          - description: Used by spot price. The maximum that the raw spot price can
              be. This will be used in calculations if spot price is higher than this
        feePriceMax:
          nullable: true
          allOf:
          - $ref: '#/components/schemas/Money'
          - description: Used by Idle fee. The maximum the user will be charged for
              the idle fee
        additional:
          required:
          - "false"
          type: array
          description: Used by spot price. Additional absolute money or percentages
            values to be added on top of the previous calculations
          nullable: true
          items:
            $ref: '#/components/schemas/AdditionalPricing'
        from:
          required:
          - "false"
          type: string
          description: DateTime "from" time to which this pricing should apply from
          format: date-time
          nullable: true
          example: 2023-03-16T15:37:23Z
        to:
          required:
          - "false"
          type: string
          description: DateTime "to" time to which this pricing should apply to
          format: date-time
          nullable: true
          example: 2023-03-16T15:37:23Z
        tagId:
          required:
          - "false"
          type: integer
          description: The id of the charge pricing tag for this pricing
          format: int64
          nullable: true
          example: 109
    PricingType:
      type: string
      enum:
      - kwh
      - min
      - spot
      - tariff
      - starting
      - charging
      - idle
      - minute
    PublicChargePoint:
      required:
      - chargePointOperatorName
      - evseId
      - location
      type: object
      properties:
        id:
          type: integer
          description: Id of this charge point
          format: int64
          example: 1
        evseId:
          type: string
          description: The EVSE id for this charge point
          example: DK*MON*E2
        name:
          type: string
          description: Name of the charge point
          nullable: true
          example: Monta CPH HQ
        chargePointOperatorName:
          type: string
          description: The charge point operator name
          nullable: false
          example: Monta
        location:
          allOf:
          - $ref: '#/components/schemas/Location'
          - description: Location information for this charge point
        maxKw:
          type: number
          description: Max KW available at this charge point.
          format: double
          nullable: true
          example: 150
        chargePointModelId:
          type: integer
          description: The ID of the charge point model for this charge point.
          format: int64
          nullable: true
          example: 42
        brandName:
          type: string
          description: Brand name for this charge point
          nullable: true
          example: Easee
        modelName:
          type: string
          description: Model name for this charge point
          nullable: true
          example: Easee - Home
        deletedAt:
          type: string
          description: Date this charge point was deleted
          format: date-time
          nullable: true
          example: 2022-05-12T16:56:45.99Z
    PublicUser:
      required:
      - displayName
      - id
      type: object
      properties:
        id:
          required:
          - "true"
          type: integer
          description: Id of the user
          format: int64
          example: 10
        displayName:
          required:
          - "true"
          type: string
          description: Formatted name to be displayed
          example: John Doe
    SimpleTeamMemberDto:
      required:
      - id
      type: object
      properties:
        id:
          required:
          - "true"
          type: string
          description: Id of the team member
          example: "1"
        teamId:
          type: integer
          description: Team id of team member
          format: int64
          example: 42
        displayName:
          type: string
          description: "The team member display name, formats can be: `First and Last\
            \ Name`, `User: #id`, `email`, or `phone`"
          nullable: true
          example: Casper Rasmussen
        partnerExternalId:
          type: string
          description: "External Id of this entity, managed by you."
          nullable: true
          example: ACME-12345
        userId:
          type: integer
          description: "User id of team member. If the user does not exist yet, it\
            \ will be null."
          format: int64
          nullable: true
          example: 1
    Site:
      required:
      - connectors
      - createdAt
      - location
      - name
      - updatedAt
      - visibility
      type: object
      properties:
        id:
          type: integer
          description: Id of the site
          format: int64
          example: 1
        teamId:
          type: integer
          description: Id of the team that has access to the site
          format: int64
          nullable: true
          example: 13
        partnerExternalId:
          type: string
          description: "External Id of this entity, managed by you."
          nullable: true
          example: ACME-12345
        partnerCustomPayload:
          type: array
          description: "Custom JSON payload for this entity, managed by you."
          nullable: true
          items:
            type: object
        name:
          type: string
          description: Name of the site
          example: Monta CPH HQ
        operator:
          nullable: true
          allOf:
          - $ref: '#/components/schemas/Operator'
          - description: Operator of this charging site
        createdAt:
          type: string
          description: Creation date of this charging site
          format: date-time
          example: 2022-05-12T15:56:45.99Z
        updatedAt:
          type: string
          description: Date this charging site was last updated
          format: date-time
          example: 2022-05-12T16:56:45.99Z
        deletedAt:
          type: string
          description: Date this charging site was deleted
          format: date-time
          nullable: true
          example: 2022-05-12T16:56:45.99Z
        chargePointCount:
          type: integer
          description: Number of charge points at this site
          format: int64
          example: 42
        activeChargePointCount:
          type: integer
          description: Number of *active* charge points at this site
          format: int64
          example: 33
        availableChargePointCount:
          type: integer
          description: Number of *available* charge points at this site
          format: int64
          example: 4
        maxKW:
          type: number
          description: "Deprecated (will be removed by 01.04.24), use `maxKw` field\
            \ instead."
          format: double
          nullable: true
          example: 150
          deprecated: true
          x-sunset: 2024-04-01
        maxKw:
          type: number
          description: Max KW available at this site.
          format: double
          nullable: true
          example: 150
        type:
          type: string
          description: Type of charge points at this site (`AC` / `DC`)
          nullable: true
          example: ac
          enum:
          - ac
          - dc
        visibility:
          type: string
          description: Indicates if this site is `public` or `private`
          example: public
          enum:
          - private
          - public
        note:
          type: string
          description: "A note you have entered for this site, e.g. via our Portal."
          nullable: true
          example: In order to access this site enter 0000 as code at the gate.
        location:
          allOf:
          - $ref: '#/components/schemas/Location'
          - description: Location information for this site
        connectors:
          type: array
          description: "List of supported connector types at this site (e.g. type-2,\
            \ ccs, ...)"
          items:
            $ref: '#/components/schemas/ChargePointConnector'
    Slice_TariffRecurringPeriodDto_:
      required:
      - content
      - pageable
      type: object
      properties:
        content:
          type: array
          items:
            $ref: '#/components/schemas/TariffRecurringPeriod'
        pageable:
          $ref: '#/components/schemas/Pageable'
        pageNumber:
          type: integer
          format: int32
        offset:
          type: integer
          format: int64
        size:
          type: integer
          format: int32
        empty:
          type: boolean
        numberOfElements:
          type: integer
          format: int32
    Sort:
      required:
      - orderBy
      type: object
      properties:
        orderBy:
          type: array
          items:
            $ref: '#/components/schemas/Sort.Order'
    Sort.Order:
      required:
      - direction
      - ignoreCase
      - property
      type: object
      properties:
        ignoreCase:
          type: boolean
        direction:
          $ref: '#/components/schemas/Sort.Order.Direction'
        property:
          type: string
        ascending:
          type: boolean
    Sort.Order.Direction:
      type: string
      enum:
      - ASC
      - DESC
    SponsorTeam:
      required:
      - publicName
      type: object
      properties:
        id:
          type: integer
          description: ID of the sponsor team
          format: int64
          example: 14
        publicName:
          type: string
          description: Public team name
          example: Monta HQ
    SponsoredChargePoint:
      required:
      - chargePoint
      - createdAt
      - payout
      - updatedAt
      type: object
      properties:
        id:
          type: integer
          description: Id of this sponsored charge point
          format: int64
          example: 1
        teamId:
          type: integer
          description: Id of the team of this sponsored charge point
          format: int64
          example: 1
        payout:
          allOf:
          - $ref: '#/components/schemas/SponsoredChargePointPayoutType'
          - description: The payout frequency for this sponsored charge point
            example: realtime
        payForSubscriptions:
          type: boolean
          description: Indicates the company pays for the subscriptions
          example: true
        operator:
          nullable: true
          allOf:
          - $ref: '#/components/schemas/Operator'
          - description: Operator of this sponsored charge point
        chargePoint:
          allOf:
          - $ref: '#/components/schemas/SponsoredChargePointData'
          - description: The charge point being sponsored
        acceptedAt:
          type: string
          description: Date the sponsorshi was accepted
          format: date-time
          nullable: true
          example: 2022-05-12T16:56:45.99Z
        createdAt:
          type: string
          description: Creation date of this sponsored charge point
          format: date-time
          example: 2022-05-12T15:56:45.99Z
        updatedAt:
          type: string
          description: Date this sponsored charge point was last updated
          format: date-time
          example: 2022-05-12T16:56:45.99Z
        deletedAt:
          type: string
          description: Date this sponsored charge point was deleted
          format: date-time
          nullable: true
          example: 2022-05-12T16:56:45.99Z
    SponsoredChargePointData:
      required:
      - createdAt
      - location
      - updatedAt
      type: object
      properties:
        id:
          type: integer
          description: Id of this charge point
          format: int64
          example: 1
        name:
          type: string
          description: Name of the charge point
          nullable: true
          example: Monta CPH HQ
        user:
          nullable: true
          allOf:
          - $ref: '#/components/schemas/PublicUser'
          - description: The user (owner) of this charge point
        sponsoredPriceGroup:
          nullable: true
          allOf:
          - $ref: '#/components/schemas/PriceGroup'
          - description: The sponsored price group of this charge point
        location:
          allOf:
          - $ref: '#/components/schemas/Location'
          - description: Location information for this charge point
        serialNumber:
          type: string
          description: Serial number for this charge point
          nullable: true
        lastMeterReadingKwh:
          type: number
          description: Last meter reading (KWH) for this charge point
          format: double
          nullable: true
          example: 913.2
        maxKw:
          type: number
          description: Max KW available at this charge point.
          format: double
          nullable: true
          example: 150
        chargePointModelId:
          type: integer
          description: The ID of the charge point model for this charge point.
          format: int64
          nullable: true
          example: 42
        brandName:
          type: string
          description: Brand name for this charge point
          nullable: true
          example: Easee
        modelName:
          type: string
          description: Model name for this charge point
          nullable: true
          example: Easee - Home
        firmwareVersion:
          type: string
          description: Current firmware version for this charge point
          nullable: true
          example: v1
        isActive:
          type: boolean
          description: Indicates if this charge point is active (true) or not (false).
            Active = fully onboarded to Monta.
          example: true
        activeAt:
          type: string
          description: Last date when charge point was activated
          format: date-time
          nullable: true
          example: 2022-05-12T15:56:45.91Z
        createdAt:
          type: string
          description: Creation date of this charge point
          format: date-time
          example: 2022-05-12T15:56:45.99Z
        updatedAt:
          type: string
          description: Date this charge point was last updated
          format: date-time
          example: 2022-05-12T16:56:45.99Z
        deletedAt:
          type: string
          description: Date this charge point was deleted
          format: date-time
          nullable: true
          example: 2022-05-12T16:56:45.99Z
    SponsoredChargePointPayoutType:
      type: string
      enum:
      - end-of-month
      - realtime
      - other
    SpotPriceAdditionalPercentageComponentMetadata:
      required:
      - type
      type: object
      properties:
        type:
          allOf:
          - $ref: '#/components/schemas/ComponentMetadataTypeDto'
          - description: The type of this metadata entry
            example: spot-price-additional-percentage-metadata
        price:
          type: integer
          description: The additional price on top of the spot price metadata entry
          format: int64
          nullable: true
          example: 120
        percentage:
          type: number
          description: The additional percentage on top of the spot price metadata
            entry
          format: double
          nullable: true
          example: 12.5
    SpotPriceAdditionalPriceComponentMetadata:
      required:
      - kwh
      - type
      type: object
      properties:
        type:
          allOf:
          - $ref: '#/components/schemas/ComponentMetadataTypeDto'
          - description: The type of this metadata entry
            example: spot-price-additional-price-metadata
        kwh:
          required:
          - "true"
          type: number
          description: The kwh for this spot price metadata entry
          format: double
          example: 12.5
        price:
          type: integer
          description: The additional price on top of the spot price metadata entry
          format: int64
          nullable: true
          example: 120
    SpotPriceComponentMetadata:
      required:
      - type
      type: object
      properties:
        type:
          allOf:
          - $ref: '#/components/schemas/ComponentMetadataTypeDto'
          - description: The type of this metadata entry
            example: spot-price-metadata
        kwh:
          type: number
          description: The kwh for this metadata entry
          format: double
          example: 12.5
        pricePerKwh:
          type: integer
          description: The price per kwh for this metadata entry
          format: int64
          example: 120
    StartChargeRequest:
      required:
      - chargePointId
      - payingTeamId
      type: object
      properties:
        payingTeamId:
          type: integer
          description: The `id` of the team that will be paying for the charge.
          format: int64
          example: 42
        chargePointId:
          type: integer
          description: Id of the charge point used for this charge
          format: int64
          example: 21
        reserveCharge:
          type: boolean
          description: "\n            If true, a charge point will be reserved and\
            \ a charge object with state reserved will be returned. \n           \n\
            \            Use `restart` endpoint to start the charge.\n            "
          example: true
        kwhLimit:
          maximum: 500
          minimum: 1
          type: number
          description: "The charge kWh limit, meaning the charge will stop once the\
            \ limit kWh is reached. </br>*Note*: `kwhLimit` can be set in parallel\
            \ with `socLimit`, in this case the first limit to hit will stop the charge"
          format: double
          nullable: true
        socLimit:
          maximum: 100
          minimum: 1
          type: number
          description: "The charge SoC limit, meaning the charge will stop once the\
            \ limit SoC % is reached. </br>*Note*: `socLimit` can be set in parallel\
            \ with `kwhLimit`, in this case the first limit to hit will stop the charge"
          format: double
          nullable: true
        priceGroupId:
          minimum: 0
          exclusiveMinimum: true
          type: integer
          description: "Allows you to enforce a specific price group for this charge.\
            \ </br>*Note*: The price group must be of type `team` or `charge-point`."
          format: int64
          nullable: true
          example: 42
        genericPaymentSession:
          nullable: true
          allOf:
          - $ref: '#/components/schemas/GenericPaymentSession'
          - description: "For Partners who want to start charging from payment terminals,\
              \ kiosks etc. Used to link charge transaction against your billing and\
              \ to allow users retrieving receipts via receipt.monta.com by using\
              \ date and `genericPaymentSession.externalId`or `genericPaymentSession.cardLast4`."
        partnerExternalId:
          type: string
          description: "External Id of this entity, managed by you."
          nullable: true
          example: ACME-12345
        partnerCustomPayload:
          type: array
          description: "Custom JSON payload for this entity, managed by you."
          nullable: true
          items:
            type: object
    StateOfCharge:
      required:
      - source
      type: object
      properties:
        percentage:
          type: number
          description: Value of SoC in %
          format: double
          example: 42.2
        source:
          type: string
          description: "Source of this value, eg vehicle or charge-point"
          example: vehicle
          enum:
          - charge-point
          - vehicle
    Subscription:
      required:
      - createdAt
      - customerType
      - state
      - updatedAt
      type: object
      properties:
        id:
          type: integer
          description: Id of the subscription
          format: int64
          example: 1
        state:
          allOf:
          - $ref: '#/components/schemas/SubscriptionState'
          - description: State of the subscription
            example: active
        nextPurchaseAt:
          type: string
          description: Date of next purchase
          format: date-time
          nullable: true
          example: 2023-05-12T15:56:45.99Z
        cancelledAt:
          type: string
          description: Subscription cancellation date
          format: date-time
          nullable: true
          example: 2023-05-12T15:56:45.99Z
        endAt:
          type: string
          description: Subscription end date
          format: date-time
          nullable: true
          example: 2023-05-12T15:56:45.99Z
        discountPercentage:
          type: number
          description: Discount percentage
          format: double
          example: 7.5
        discountAbsolute:
          type: number
          description: Discount absolute
          format: double
          example: 7.5
        discountAmount:
          type: number
          description: Discount amount
          format: double
          example: 7.5
        originalAmount:
          type: number
          description: Original amount
          format: double
          example: 7.5
        totalAmount:
          type: number
          description: Total amount
          format: double
          example: 7.5
        purchaseCount:
          type: integer
          description: Number of purchases
          format: int32
          example: 5
        chargePoints:
          type: integer
          description: Number of charge points
          format: int32
          example: 5
        customerId:
          type: integer
          description: The id of the customer
          format: int64
          example: 1
        customerType:
          allOf:
          - $ref: '#/components/schemas/SubscriptionCustomerType'
          - description: Customer type
            example: charge-point
        planId:
          type: integer
          description: Plan id
          format: int64
          example: 42
        serviceConfig:
          nullable: true
          allOf:
          - $ref: '#/components/schemas/SubscriptionServiceConfig'
          - description: "Subscription configuration, based on the plans serviceType.Currently\
              \ you can configure tax-refund subscriptions only."
        createdAt:
          type: string
          description: Subscription creation date
          format: date-time
          example: 2023-05-12T15:56:45.99Z
        updatedAt:
          type: string
          description: Subscription update date
          format: date-time
          example: 2023-05-12T15:56:45.99Z
        canCancel:
          type: boolean
          description: Indicates if the subscription can be cancelled
          example: true
        deletedAt:
          type: string
          description: Subscription marked as deleted date
          format: date-time
          nullable: true
          example: 2023-05-12T15:56:45.99Z
    SubscriptionCustomerType:
      type: string
      enum:
      - team
      - charge-point
      - operator
      - other
    SubscriptionPurchase:
      required:
      - createdAt
      - currency
      - subscription
      - type
      type: object
      properties:
        id:
          type: integer
          description: Id of the subscription purchase
          format: int64
          example: 1
        note:
          type: string
          description: Note for this subscription purchase
          nullable: true
          example: "1"
        type:
          allOf:
          - $ref: '#/components/schemas/SubscriptionPurchaseTypeDto'
          - description: The type of this subscription purchase
            example: period
        discountPercentage:
          type: number
          description: The discount percentage applied to this purchase
          format: double
          example: 25
        discountAbsolute:
          type: number
          description: The absolute discount applied to this purchase
          format: double
          example: 50
        originalAmount:
          type: number
          description: The original amount of this purchase
          format: double
          example: 100
        discountAmount:
          type: number
          description: The discounted amount of this purchase
          format: double
          example: 75
        totalAmount:
          type: number
          description: The total amount of this purchase
          format: double
          example: 25
        currency:
          allOf:
          - $ref: '#/components/schemas/Currency'
          - description: The currency for this purchase
        subscription:
          allOf:
          - $ref: '#/components/schemas/Subscription'
          - description: The subscription this purchase refers to
        createdAt:
          type: string
          description: Creation date of this subscription purchase
          format: date-time
          example: 2022-05-12T15:56:45.99Z
        updatedAt:
          type: string
          description: Update date of this subscription purchase
          format: date-time
          nullable: true
          example: 2022-05-12T16:56:45.99Z
        deletedAt:
          type: string
          description: Deleted date of this subscription purchase
          format: date-time
          nullable: true
          example: 2022-05-12T16:56:45.99Z
    SubscriptionPurchaseTypeDto:
      type: string
      description: Enumerate the possible purchase types for subscription purchases
      enum:
      - pending
      - diff
      - unknown
    SubscriptionServiceConfig:
      type: object
      anyOf:
      - $ref: '#/components/schemas/SubscriptionServiceConfigTaxRefund'
    SubscriptionServiceConfigTaxRefund:
      required:
      - payoutPerKwh
      - priceIncludesVat
      - serviceType
      type: object
      properties:
        serviceType:
          allOf:
          - $ref: '#/components/schemas/PlanServiceType'
          - description: "Service of the Plan, custom or tax-refund"
            example: tax-refund
        payoutPerKwh:
          required:
          - "true"
          type: number
          description: Amount to pay out per kWh
          format: double
          example: 1.29
        priceIncludesVat:
          required:
          - "true"
          type: boolean
          description: Indicates whether the VAT is already included in the price
          example: true
    SubscriptionState:
      type: string
      enum:
      - pending
      - active
      - cancelling
      - cancelled
      - other
    TariffComponentMetadata:
      required:
      - type
      type: object
      properties:
        type:
          allOf:
          - $ref: '#/components/schemas/ComponentMetadataTypeDto'
          - description: The type of this metadata entry
            example: tariff-metadata
        tariffId:
          type: integer
          description: The tariff id for this metadata entry
          format: int64
          nullable: true
          example: 1
        tariffFrom:
          type: string
          description: "Indicates from when (date-time) the tariff was applied, only\
            \ relevant from `time-based-tariff` components"
          format: date-time
          nullable: true
          example: 2022-05-12T15:56:45.99Z
        tariffTo:
          type: string
          description: "Indicates until when(date-time) the tariff was applied, only\
            \ relevant from `time-based-tariff` components"
          format: date-time
          nullable: true
          example: 2022-05-12T15:56:45.99Z
        kwh:
          type: number
          description: The kwh for this metadata entry
          format: double
          example: 12.5
        pricePerKwh:
          type: integer
          description: The price per kwh for this metadata entry
          format: int64
          example: 120
    TariffCustomerType:
      type: string
      enum:
      - A_ZERO
      - A_HIGH
      - A_LOW
      - B_HIGH
      - B_LOW
      - C_CUSTOMER
    TariffDto:
      required:
      - area
      - createdAt
      - description
      - externalId
      - name
      - tariffType
      - timeZone
      - zipCodes
      type: object
      properties:
        id:
          type: integer
          description: Id of the tariff
          format: int64
          example: 1
        externalId:
          type: string
          description: External id of the tariff
          example: "3143"
        name:
          type: string
          description: Name of the tariff
          example: Cerius
        description:
          type: string
          description: Description of the tariff
          example: TariffDescription
        countryId:
          type: integer
          description: Country Id of the tariff
          format: int64
          example: 194
        countryAreaId:
          type: integer
          description: Country area Id of the tariff
          format: int64
          nullable: true
          example: 1
        currencyId:
          type: integer
          description: Currency Id of the tariff
          format: int64
          example: 1
        teamId:
          type: integer
          description: Team Id of the tariff
          format: int64
          nullable: true
          example: 1
        operatorId:
          type: integer
          description: Operator Id of the tariff
          format: int64
          nullable: true
          example: 1
        pricesWithVat:
          type: boolean
          description: Indicates if VAT is already in the price of the tariff
          example: true
        zipCodes:
          type: array
          description: Zip codes of the tariff
          example: "[5610, 5960]"
          items:
            type: string
        tariffType:
          allOf:
          - $ref: '#/components/schemas/TariffType'
          - description: Type of the tariff
            example: WEEKLY
        active:
          type: boolean
          description: Indicates if the Tariff is active or not
          example: true
        timeZone:
          type: string
          description: Time zone of the tariff
          example: Europe/Copenhagen
        area:
          type: string
          description: Area of the tariff
          example: Jylland
        customerType:
          nullable: true
          allOf:
          - $ref: '#/components/schemas/TariffCustomerType'
          - description: Customer type of the tariff
            example: B_HIGH
        createdAt:
          type: string
          description: Creation date of the tariff
          format: date-time
          example: 2023-03-23T14:54:56Z
        updatedAt:
          type: string
          description: Last update date of the tariff
          format: date-time
          nullable: true
          example: 2023-03-23T16:54:56Z
    TariffPeriodGroup:
      required:
      - activeFrom
      - activeTo
      - description
      type: object
      properties:
        id:
          type: integer
          description: tariff period group id
          format: int64
        activeFrom:
          type: string
          description: tariff period group active from date
          format: date
        activeTo:
          type: string
          description: tariff period group active to date
          format: date
        description:
          type: string
          description: tariff period group description
        tariffId:
          type: integer
          description: tariff id
          format: int64
    TariffRecurringPeriod:
      required:
      - dayOfWeek
      - price
      type: object
      properties:
        id:
          type: integer
          description: id of the period
          format: int64
        tariffId:
          type: integer
          description: id of the tariff
          format: int64
        dayOfWeek:
          allOf:
          - $ref: '#/components/schemas/DayOfWeek'
          - description: day of the period
        endDayOfWeek:
          nullable: true
          allOf:
          - $ref: '#/components/schemas/DayOfWeek'
          - description: End day of the period
        start:
          type: integer
          description: starting hour of the period
          format: int32
        end:
          type: integer
          description: ending hour of the period
          format: int32
        price:
          type: number
          description: price during the period
    TariffRecurringPeriodCreateRequestDto:
      required:
      - dayOfWeek
      - endHour
      - groupId
      - price
      - startHour
      - tariffId
      type: object
      properties:
        tariffId:
          required:
          - "true"
          type: integer
          description: Id of the tariff this period will belong to
          format: int64
          example: 1
        groupId:
          required:
          - "true"
          type: integer
          description: Id of the tariff period group this period will belong to
          format: int64
          example: 1
        dayOfWeek:
          allOf:
          - $ref: '#/components/schemas/DayOfWeek'
          - description: Capitalized name of the day of the week
            example: MONDAY
        endDayOfWeek:
          nullable: true
          allOf:
          - $ref: '#/components/schemas/DayOfWeek'
          - description: Capitalized name of the day of the week that the price is
              for
            example: FRIDAY
        startHour:
          required:
          - "true"
          type: integer
          description: hour that the period starts at
          format: int32
          example: 0
        endHour:
          required:
          - "true"
          type: integer
          description: hour that the period ends at
          format: int32
          example: 23
        price:
          required:
          - "true"
          type: number
          description: price during the period
          example: 2.54
    TariffRecurringPeriodUpdateRequestDto:
      type: object
      properties:
        dayOfWeek:
          nullable: true
          allOf:
          - $ref: '#/components/schemas/DayOfWeek'
          - description: Capitalized name of the day of the week
            example: MONDAY
        endDayOfWeek:
          nullable: true
          allOf:
          - $ref: '#/components/schemas/DayOfWeek'
          - description: Capitalized name of the end day of the week
            example: FRIDAY
        startHour:
          required:
          - "false"
          type: integer
          description: hour that the period starts at
          format: int32
          nullable: true
          example: 0
        endHour:
          required:
          - "false"
          type: integer
          description: hour that the period ends at
          format: int32
          nullable: true
          example: 23
        price:
          required:
          - "false"
          type: number
          description: price during the period
          nullable: true
          example: 2.54
    TariffType:
      type: string
      enum:
      - WEEKLY
      - DYNAMIC
    TaxRefundMetadata:
      required:
      - type
      type: object
      properties:
        id:
          type: integer
          description: The id of the the tax refund
          format: int64
          example: 1
        kwh:
          type: number
          description: The total kwh for the tax refund
          format: double
          example: 13.77
        type:
          allOf:
          - $ref: '#/components/schemas/MetadataTypeDto'
          - description: The type of this metadata
    Team:
      required:
      - address
      - createdAt
      - currency
      - joinCode
      - name
      - type
      - updatedAt
      type: object
      properties:
        id:
          type: integer
          description: Id of the team
          format: int64
          example: 1
        name:
          type: string
          description: Name of the team
          example: Internal team
        externalId:
          type: string
          description: External id of the team
          nullable: true
          example: 123-ABC
        partnerExternalId:
          type: string
          description: "External Id of this entity, managed by you."
          nullable: true
          example: ACME-12345
        partnerCustomPayload:
          type: array
          description: "Custom JSON payload for this entity, managed by you."
          nullable: true
          items:
            type: object
        joinCode:
          type: string
          description: Code to share with a user to join the team
          example: my-team-123
        companyName:
          type: string
          description: The company name for the given team
          nullable: true
          example: Housing XYZ
        vatNumber:
          type: string
          description: The VAT number for the given team
          nullable: true
          example: DE123456789
        operator:
          nullable: true
          allOf:
          - $ref: '#/components/schemas/Operator'
          - description: The operator to this team is associated
        address:
          allOf:
          - $ref: '#/components/schemas/TeamDto.TeamAddressDto'
          - description: The address where the team is located
        currency:
          allOf:
          - $ref: '#/components/schemas/Currency'
          - description: The currency assigned for this  team
        type:
          type: string
          description: Type of the team
          example: personal
          enum:
          - private
          - professional
          - operator
        operatorId:
          type: integer
          description: "Deprecated (will be removed by 01.04.24), use `operator` field\
            \ instead."
          format: int64
          nullable: true
          example: 1
          deprecated: true
          x-sunset: 2024-04-01
        userId:
          type: integer
          description: Id of the user that owns this team
          format: int64
          example: 1
        blockedAt:
          type: string
          description: Blocked date of this team
          format: date-time
          nullable: true
          example: 2022-05-12T15:56:45.99Z
        createdAt:
          type: string
          description: Creation date of this team
          format: date-time
          example: 2022-05-12T15:56:45.99Z
        updatedAt:
          type: string
          description: Update date of this team
          format: date-time
          example: 2022-05-12T16:56:45.99Z
        deletedAt:
          type: string
          description: The deleted date of this team
          format: date-time
          nullable: true
          example: 2022-05-12T16:56:45.99Z
    TeamDto.TeamAddressDto:
      type: object
      properties:
        address1:
          type: string
          description: First line of address
          nullable: true
          example: Strandboulevarden 122
        address2:
          type: string
          description: Second line of address
          nullable: true
          example: KÃ¸benhavn
        address3:
          type: string
          description: Third line of address
          nullable: true
          example: 5. sal
        city:
          type: string
          description: The address city
          nullable: true
          example: Berlin
        zipCode:
          type: string
          description: The address zip code
          nullable: true
          example: "10011"
        countryId:
          type: integer
          description: The address country
          format: int64
          example: 1
    TeamMemberAccess:
      type: string
      description: "definitions: \n* `all` - Indicates the team member has access\
        \ all the team's charge points. \n* `selected` - Indicates the team member\
        \ has only access to the selected charge points. \n* `other` - Fallback value,\
        \ Indicates a new type was added but is not mapped/unknown on this API yet.\
        \ \n"
      enum:
      - all
      - selected
      - other
    TeamMemberDto:
      required:
      - access
      - chargePointIds
      - id
      - role
      - state
      - teamWalletChargePaymentType
      type: object
      properties:
        id:
          required:
          - "true"
          type: string
          description: Id of the team member
          example: "1"
        teamId:
          type: integer
          description: Team id of team member
          format: int64
          example: 42
        displayName:
          type: string
          description: "The team member display name, formats can be: `First and Last\
            \ Name`, `User: #id`, `email`, or `phone`"
          nullable: true
          example: Casper Rasmussen
        operator:
          nullable: true
          allOf:
          - $ref: '#/components/schemas/Operator'
          - description: Operator of this team member
        partnerExternalTeamId:
          type: string
          description: The partner external id for the team
          nullable: true
          example: A1B2C3BE3121
        userId:
          type: integer
          description: "User id of team member. If the user does not exist yet, it\
            \ will be null."
          format: int64
          nullable: true
          example: 1
        role:
          allOf:
          - $ref: '#/components/schemas/TeamMemberRole'
          - description: Role of the this member within the team
            example: admin
        access:
          allOf:
          - $ref: '#/components/schemas/TeamMemberAccess'
          - description: Indicates if the user has access to all charge points or
              only to selected charge points
            example: all
        state:
          allOf:
          - $ref: '#/components/schemas/TeamMemberState'
          - description: State of the invitation
            example: accepted
        note:
          type: string
          description: Note for team member
          nullable: true
          example: A Note
        invitedAt:
          type: string
          description: Date of team member was invited to join the team
          format: date-time
          nullable: true
          example: 2022-05-12T15:56:45.99Z
        acceptedAt:
          type: string
          description: Date of team member accepted the invitation
          format: date-time
          nullable: true
          example: 2022-05-12T15:56:45.99Z
        rejectedAt:
          type: string
          description: Date of team member rejected the invitation
          format: date-time
          nullable: true
          example: 2022-05-12T15:56:45.99Z
        createdAt:
          type: string
          description: Date the team member was created
          format: date-time
          nullable: true
          example: 2022-05-12T15:56:45.99Z
        updatedAt:
          type: string
          description: Date the team member was updated
          format: date-time
          nullable: true
          example: 2022-05-12T16:56:45.99Z
        deletedAt:
          type: string
          description: Date the team member was deleted
          format: date-time
          nullable: true
          example: 2022-05-12T16:56:45.99Z
        chargePointIds:
          required:
          - "true"
          type: array
          description: The charge points ids this team member has access
          items:
            type: integer
            format: int64
        priceGroupId:
          type: integer
          description: The price group for this team member
          format: int64
          nullable: true
          example: 1
        canPayWithTeamWallet:
          type: boolean
          description: Indicates if the team member access to pay with team wallet
            when charging
          example: false
          default: false
        canManageTeamWallet:
          type: boolean
          description: Indicates if team member has access to withdraw and deposit
            from your team wallet to your bank account
          example: false
          default: false
        canRequestSponsoring:
          type: boolean
          description: Indicates if the team member is allowed to request sponsoring
            from this team for their charge point
          example: false
          default: false
        canManageTeamMembers:
          type: boolean
          description: Indicates that the team member can view and manage other members
            settings
          example: false
          default: false
        teamWalletChargePaymentType:
          $ref: '#/components/schemas/TeamWalletChargePaymentType'
        partnerExternalId:
          type: string
          description: "External Id of this entity, managed by you."
          nullable: true
          example: ACME-12345
        partnerCustomPayload:
          type: array
          description: "Custom JSON payload for this entity, managed by you."
          nullable: true
          items:
            type: object
    TeamMemberRole:
      type: string
      enum:
      - admin
      - user
      - other
    TeamMemberState:
      type: string
      enum:
      - requested
      - invited
      - rejected
      - accepted
      - blocked
      - expired
      - other
    TeamOrOperator:
      type: object
      anyOf:
      - $ref: '#/components/schemas/Operator'
      - $ref: '#/components/schemas/PayingTeam'
    TeamType.Creatable:
      type: string
      enum:
      - private
      - professional
      - operator
    TeamWalletChargePaymentType:
      type: string
      description: Who can pay the charging with Wallet?
      example: none
      enum:
      - partner
      - operator
      - all
      - none
      default: none
    Token:
      required:
      - accessToken
      - accessTokenExpirationDate
      - refreshToken
      - refreshTokenExpirationDate
      type: object
      properties:
        accessToken:
          type: string
          description: "Access token, required to interact with our endpoints."
          example: 5a6d4da1-6af3-420b-9c15-6ecb5f6de199
        refreshToken:
          type: string
          description: "Refresh token, required to get a new access token."
          example: 83b766d4-476e-4dd1-b11e-f57e856c890d
        accessTokenExpirationDate:
          type: string
          description: Expiration date of access token (1 hour)
          format: date-time
          example: 2022-05-11T07:03:04.675035Z
        refreshTokenExpirationDate:
          type: string
          description: Expiration date of refresh token (24 hours)
          format: date-time
          example: 2023-05-12T07:03:04.675055Z
    Unit:
      type: object
    UpdateTariffRequest:
      required:
      - active
      - area
      - countryId
      - currencyId
      - description
      - externalId
      - name
      - pricesWithVat
      - timeZone
      type: object
      properties:
        externalId:
          required:
          - "true"
          type: string
          description: external id
          example: "1"
        name:
          required:
          - "true"
          type: string
          description: 'Radius Elnet A/S '
          example: ""
        description:
          required:
          - "true"
          type: string
          description: Short description of this tariff
          example: Net tariff A high
        countryId:
          required:
          - "true"
          type: integer
          description: Id of the country where the tariff is applicable
          format: int64
          example: 1
        countryAreaId:
          required:
          - "false"
          type: integer
          description: Id of the country area where the tariff is applicable
          format: int64
          nullable: true
          example: 1
        currencyId:
          required:
          - "true"
          type: integer
          description: Id of the currency in which the tariff is applicable
          format: int64
          example: 1
        teamId:
          required:
          - "false"
          type: integer
          description: Team id
          format: int64
          nullable: true
          example: 1
        pricesWithVat:
          required:
          - "true"
          type: boolean
          description: Indication if prices are with vat
          example: true
        zipCodes:
          required:
          - "false"
          type: array
          description: Zip codes where this tariff is applicable
          nullable: true
          example: "[\"2200\", \"2100\"]"
          items:
            type: string
        tariffType:
          nullable: true
          allOf:
          - $ref: '#/components/schemas/TariffType'
          - description: Dynamic or weekly
            example: WEEKLY
        active:
          required:
          - "true"
          type: boolean
          description: Indication if this tariff is active
          example: true
        timeZone:
          required:
          - "true"
          type: string
          description: What timezone is the tariff active in
          example: Europe/Copenhagen
        area:
          required:
          - "true"
          type: string
          description: Human description of the area the tariff is active in
          example: Fyn
        customerType:
          nullable: true
          allOf:
          - $ref: '#/components/schemas/TariffCustomerType'
          - description: What kind of customer types are the tariff for?
            example: c_customer
    VisibilityType:
      type: string
      enum:
      - private
      - public
    VisibilityType_1:
      type: string
      enum:
      - private
      - public
    VisibilityType_3:
      type: string
      enum:
      - private
      - public
    Wallet:
      required:
      - ownerType
      type: object
      properties:
        id:
          type: integer
          description: Id of the wallet
          format: int64
          example: 1
        ownerType:
          type: string
          description: "Type of owner: operator, team"
          example: operator
        ownerId:
          type: integer
          description: "Id of the owner of this wallet, either a teamId or operatorId\
            \ (depending on ownerType)"
          format: int64
          example: 42
        currencyId:
          type: integer
          description: Currency of this wallet.
          format: int64
        countryId:
          type: integer
          description: CountryId of this wallet.
          format: int64
        balance:
          nullable: true
          allOf:
          - $ref: '#/components/schemas/WalletDto.BalanceDto'
          - description: "Balance of this wallet, if available (not in list endpoints)."
    WalletDto.BalanceDto:
      type: object
      properties:
        amount:
          type: number
          description: Amount of the balance
          format: double
          example: 13.77
        credit:
          type: number
          description: Amount of the credit
          format: double
          example: 11.77
    WalletTransaction:
      required:
      - createdAt
      - fromCurrency
      - group
      - kind
      - state
      - toCurrency
      type: object
      properties:
        id:
          type: integer
          description: Id of the transaction
          format: int64
          example: 1
        fromAmount:
          type: number
          description: "Amount sent, incl. VAT"
          format: double
          example: 13.77
        fromSubAmount:
          type: number
          description: "Amount sent, excl. VAT"
          format: double
          example: 11.02
        fromVatAmount:
          type: number
          description: VAT amount sent
          format: double
          example: 2.75
        fromCurrency:
          allOf:
          - $ref: '#/components/schemas/Currency'
          - description: Currency for `fromAmount`.
        fromType:
          type: string
          description: "Type of sender: operator, team"
          nullable: true
          example: team
        from:
          nullable: true
          allOf:
          - $ref: '#/components/schemas/TeamOrOperator'
          - description: "Type of sender: operator, team"
            example: team
        fromWalletId:
          required:
          - "false"
          type: integer
          description: Id of the wallet where the amount was sent from. Can be `null`
            if the transaction did not originate from a wallet.
          format: int64
          nullable: true
          example: 1
        toAmount:
          type: number
          description: "Amount received, incl. VAT"
          format: double
          example: 13.77
        toSubAmount:
          type: number
          description: "Amount received, excl. VAT"
          format: double
          example: 11.02
        toVatAmount:
          type: number
          description: VAT amount received
          format: double
          example: 2.75
        toCurrency:
          allOf:
          - $ref: '#/components/schemas/Currency'
          - description: Currency used for `toAmount`.
        toType:
          type: string
          description: "Type of receiver: operator, team"
          nullable: true
          example: operator
        to:
          nullable: true
          allOf:
          - $ref: '#/components/schemas/TeamOrOperator'
          - description: "Type of sender: operator, team"
            example: team
        toWalletId:
          required:
          - "false"
          type: integer
          description: Id of the wallet where the amount was sent to. Can be `null`
            if the transaction did not target a wallet.
          format: int64
          nullable: true
          example: 2
        exchangeRate:
          type: number
          description: Exchange rate used for currency conversion
          format: double
          example: 1
        createdAt:
          type: string
          description: Creation date of transaction
          format: date-time
          example: 2022-04-22T09:47:05Z
        updatedAt:
          required:
          - "false"
          type: string
          description: Update date of transaction
          format: date-time
          nullable: true
          example: 2022-04-22T09:47:05Z
        referenceId:
          type: string
          description: Reference id of this transaction. e.g the charge id
          nullable: true
          example: referenceId
        referenceType:
          nullable: true
          allOf:
          - $ref: '#/components/schemas/WalletTransactionReferenceType'
          - description: Reference type of this transaction.
            example: CHARGE
        group:
          allOf:
          - $ref: '#/components/schemas/WalletTransactionGroup'
          - type: string
            description: Transaction group of this transaction
            example: withdraw
        kind:
          type: string
          description: "\n            Kind of this transaction, ie 'charge-sponsored'.\n\
            \            <br/>\n            **Note:** This is an open field and therefore\
            \ more kinds will be added moving forward.\n            "
          example: charge-sponsored
        vatPercentage:
          type: number
          description: VAT percentage included in this transaction.
          format: double
          example: 25
        state:
          allOf:
          - $ref: '#/components/schemas/WalletTransactionState'
          - type: string
            description: Transaction state of this transaction
            example: complete
        note:
          type: string
          description: A note that has been entered for this transaction.
          nullable: true
          example: Test transaction.
        partnerExternalId:
          type: string
          description: "External Id of this entity, managed by you."
          nullable: true
          example: ACME-12345
        partnerCustomPayload:
          type: array
          description: "Custom JSON payload for this entity, managed by you."
          nullable: true
          items:
            type: object
        metadata:
          nullable: true
          allOf:
          - $ref: '#/components/schemas/MetadataDto'
          - description: Additional information for this transaction
    WalletTransactionGroup:
      type: string
      enum:
      - deposit
      - withdraw
      - charge
      - other
    WalletTransactionReferenceType:
      type: string
      description: "Note: this enum is not compliant with our standard (lower and\
        \ kebab-case), currently we return the reference type as it is from PHP. We\
        \ need to \"migrate\" the reference type to follow the standard as the others.\
        \ ticket: https://montaapp.atlassian.net/browse/PARTNERAPI-329"
      enum:
      - TEAM
      - COMPANY_REFERRAL
      - USER_REFERRAL
      - ORDER
      - SUBSCRIPTION_PURCHASE
      - CHARGE
      - BANK_ACCOUNT
      - WALLET_BANK_ACCOUNT
      - STRIPE_CHARGE
      - SUBSCRIPTION
      - TRANSACTION
      - PROMO_CODE_USE
      - TEAM_MEMBER_FEE_PURCHASE
      - WALLET
      - PAYTER_PAYMENT_SESSION
      - ADYEN_PAYMENT
      - OTHER
    WalletTransactionState:
      type: string
      enum:
      - complete
      - pending
      - failed
      - reserved
      - other
    WebhookConfig:
      required:
      - webhookSecret
      - webhookUrl
      type: object
      properties:
        webhookUrl:
          maxLength: 191
          pattern: https://.*
          required:
          - "true"
          type: string
          description: A HTTPS URL to send the webhook payload to when an event occurs.
          example: https://partner1.com/webhooks/monta
        webhookSecret:
          maxLength: 191
          minLength: 16
          required:
          - "true"
          type: string
          description: A cryptoghrapic secret used to sign the webhook payload.
          example: FEC64907-DE3A-4EEB-9DA8-843D45AFF00C
        eventTypes:
          maxItems: 512
          required:
          - "false"
          type: array
          description: "A list of event type to subscribe to. Use [\"*\"] to subscribe\
            \ to all."
          example: "[\"charges\", \"team-members\"]"
          items:
            $ref: '#/components/schemas/WebhookEntry.EventType'
    WebhookEntry:
      required:
      - createdAt
      - eventType
      - payload
      - status
      type: object
      properties:
        id:
          type: integer
          description: Id of the entry
          format: int64
          example: 1
        consumerId:
          type: integer
          description: Id of the consumer this entry belongs to
          format: int64
          example: 1
        operatorId:
          type: integer
          description: Id of the operator this entry belongs to
          format: int64
          example: 1
        eventType:
          allOf:
          - $ref: '#/components/schemas/WebhookEntry.EventType'
          - description: "\n            Type of event this entry belongs to.\n   \
              \         Note: This is not the type of the entity (payload.EntityType),\
              \ but the type of the event that you can subscribe to.\n            "
            example: charge-points
        payload:
          allOf:
          - $ref: '#/components/schemas/WebhookEntryPayload'
          - description: payload of this entry
            example: "See [Charge](/reference/get-charge) payload"
        status:
          allOf:
          - $ref: '#/components/schemas/WebhookEntry.Status'
          - description: Status of the entry
            example: completed
        error:
          nullable: true
          allOf:
          - $ref: '#/components/schemas/WebhookEntryErrorPayload'
          - description: Contains the error message if the delivery failed
            example: TBD
        createdAt:
          type: string
          description: Creation date of this entry
          format: date-time
          example: 2022-05-12T15:56:45.99Z
        updatedAt:
          type: string
          description: Update date of this entry
          format: date-time
          nullable: true
          example: 2022-05-12T16:56:45.99Z
    WebhookEntry.EventType:
      type: string
      enum:
      - '*'
      - charges
      - charge-points
      - sites
      - team-members
      - teams
      - installer-jobs
      - wallet-transactions
      - price-groups
      - subscriptions
      - plans
    WebhookEntry.Status:
      type: string
      enum:
      - pending
      - completed
      - failed
    WebhookEntryErrorPayload:
      type: object
      properties:
        errorCode:
          type: string
          description: error code for the entry
          nullable: true
          example: 502 Bad Gateway
        errorMessage:
          type: string
          description: error message for the entry
          nullable: true
          example: |-
            <html>
              <head>
                <title>Bad Gateway<\title>
              </head>
              <body>
                <p>The server is unreachable at this time.</p>
              </body>
            </html>
    WebhookEntryPayload:
      required:
      - entityId
      - entityType
      - eventType
      type: object
      properties:
        entityType:
          allOf:
          - $ref: '#/components/schemas/WebhookEntryPayload.EntityType'
          - description: Type of the entity
            example: charge
        entityId:
          type: string
          description: Id of the entity
          example: "42"
        eventType:
          allOf:
          - $ref: '#/components/schemas/KafkaEventType'
          - description: Type of the event
            example: updated
        payload:
          type: array
          description: "payload of this entity, e.g. a full Charge object"
          nullable: true
          example: "{ \"id\": \"42\", \"amount\": 1000 }}"
          items:
            type: object
    WebhookEntryPayload.EntityType:
      type: string
      enum:
      - charge
      - charge-point
      - site
      - team
      - team-member
      - installer-job
      - wallet-transaction
      - price-group
      - subscription
      - plan
  securitySchemes:
    BearerAccessToken:
      type: http
      scheme: bearer