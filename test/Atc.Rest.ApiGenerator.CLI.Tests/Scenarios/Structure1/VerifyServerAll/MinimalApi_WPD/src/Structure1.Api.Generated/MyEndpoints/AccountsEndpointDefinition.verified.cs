//------------------------------------------------------------------------------
// This code was auto-generated by ApiGenerator x.x.x.x.
//
// Changes to this file may cause incorrect behavior and will be lost if
// the code is regenerated.
//------------------------------------------------------------------------------
namespace Structure1.Api.Generated.MyEndpoints;

/// <summary>
/// Endpoint definitions.
/// </summary>
[GeneratedCode("ApiGenerator", "x.x.x.x")]
public sealed class AccountsEndpointDefinition : IEndpointDefinition
{
    internal const string ApiRouteBase = "/api/v1/accounts";

    public void DefineEndpoints(
        WebApplication app)
    {
        var accounts = app
            .NewVersionedApi("Accounts")
            .MapGroup(ApiRouteBase);

        accounts
            .MapPut("{accountId}/name", UpdateAccountName)
            .WithName("UpdateAccountName")
            .WithSummary("Update name of account.")
            .WithDescription("Update name of account.")
            .AddEndpointFilter<ValidationFilter<UpdateAccountNameParameters>>()
            .Produces<string?>()
            .ProducesValidationProblem();

        accounts
            .MapPost("{accountId}/name", SetAccountName)
            .WithName("SetAccountName")
            .WithSummary("Set name of account.")
            .WithDescription("Set name of account.")
            .AddEndpointFilter<ValidationFilter<SetAccountNameParameters>>()
            .Produces<string?>()
            .ProducesValidationProblem();
    }

    internal async Task<IResult> UpdateAccountName(
        [FromServices] IUpdateAccountNameHandler handler,
        [AsParameters] UpdateAccountNameParameters parameters,
        CancellationToken cancellationToken)
        => UpdateAccountNameResult.ToIResult(
            await handler.ExecuteAsync(
                parameters,
                cancellationToken));

    internal async Task<IResult> SetAccountName(
        [FromServices] ISetAccountNameHandler handler,
        [AsParameters] SetAccountNameParameters parameters,
        CancellationToken cancellationToken)
        => SetAccountNameResult.ToIResult(
            await handler.ExecuteAsync(
                parameters,
                cancellationToken));
}