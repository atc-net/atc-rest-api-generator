//------------------------------------------------------------------------------
// This code was auto-generated by ApiGenerator x.x.x.x.
//
// Changes to this file may cause incorrect behavior and will be lost if
// the code is regenerated.
//------------------------------------------------------------------------------
namespace Structure1.Api.Generated.MyEndpoints;

/// <summary>
/// Endpoint definitions.
/// </summary>
[GeneratedCode("ApiGenerator", "x.x.x.x")]
public sealed class UsersEndpointDefinition : IEndpointDefinition
{
    internal const string ApiRouteBase = "/api/v1/users";

    public void DefineEndpoints(
        WebApplication app)
    {
        var users = app
            .NewVersionedApi("Users")
            .MapGroup(ApiRouteBase);

        users
            .MapGet("/", GetUsers)
            .WithName("GetUsers")
            .WithSummary("Get all users.")
            .WithDescription("Get all users.")
            .Produces<IEnumerable<User>>()
            .Produces<string?>(StatusCodes.Status409Conflict);

        users
            .MapPost("/", PostUser)
            .WithName("PostUser")
            .WithSummary("Create a new user.")
            .WithDescription("Create a new user.")
            .AddEndpointFilter<ValidationFilter<PostUserParameters>>()
            .Produces<string?>(StatusCodes.Status201Created)
            .Produces<string?>(StatusCodes.Status400BadRequest)
            .Produces<string?>(StatusCodes.Status409Conflict);

        users
            .MapGet("email", GetUserByEmail)
            .WithName("GetUserByEmail")
            .WithSummary("Get user by email.")
            .WithDescription("Get user by email.")
            .AddEndpointFilter<ValidationFilter<GetUserByEmailParameters>>()
            .Produces<User>()
            .Produces<string?>(StatusCodes.Status400BadRequest)
            .Produces<string?>(StatusCodes.Status404NotFound)
            .Produces<string?>(StatusCodes.Status409Conflict);

        users
            .MapGet("{id}", GetUserById)
            .WithName("GetUserById")
            .WithSummary("Get user by id.")
            .WithDescription("Get user by id.")
            .AddEndpointFilter<ValidationFilter<GetUserByIdParameters>>()
            .Produces<User>()
            .Produces<string?>(StatusCodes.Status400BadRequest)
            .Produces<string?>(StatusCodes.Status404NotFound)
            .Produces<string?>(StatusCodes.Status409Conflict);

        users
            .MapPut("{id}", UpdateUserById)
            .WithName("UpdateUserById")
            .WithSummary("Update user by id.")
            .WithDescription("Update user by id.")
            .AddEndpointFilter<ValidationFilter<UpdateUserByIdParameters>>()
            .Produces<string?>()
            .Produces<string?>(StatusCodes.Status400BadRequest)
            .Produces<string?>(StatusCodes.Status404NotFound)
            .Produces<string?>(StatusCodes.Status409Conflict);

        users
            .MapDelete("{id}", DeleteUserById)
            .WithName("DeleteUserById")
            .WithSummary("Delete user by id.")
            .WithDescription("Delete user by id.")
            .AddEndpointFilter<ValidationFilter<DeleteUserByIdParameters>>()
            .Produces<string?>()
            .Produces<string?>(StatusCodes.Status400BadRequest)
            .Produces<string?>(StatusCodes.Status404NotFound)
            .Produces<string?>(StatusCodes.Status409Conflict);

        users
            .MapPut("{id}/gender", UpdateMyTestGender)
            .WithName("UpdateMyTestGender")
            .WithSummary("Update gender on a user.")
            .WithDescription("Update gender on a user.")
            .AddEndpointFilter<ValidationFilter<UpdateMyTestGenderParameters>>()
            .Produces<string?>()
            .Produces<string?>(StatusCodes.Status400BadRequest)
            .Produces<string?>(StatusCodes.Status404NotFound)
            .Produces<string?>(StatusCodes.Status409Conflict);
    }

    internal async Task<IResult> GetUsers(
        [FromServices] IGetUsersHandler handler,
        CancellationToken cancellationToken)
        => GetUsersResult.ToIResult(
            await handler.ExecuteAsync(
                cancellationToken));

    internal async Task<IResult> PostUser(
        [FromServices] IPostUserHandler handler,
        [AsParameters] PostUserParameters parameters,
        CancellationToken cancellationToken)
        => PostUserResult.ToIResult(
            await handler.ExecuteAsync(
                parameters,
                cancellationToken));

    internal async Task<IResult> GetUserByEmail(
        [FromServices] IGetUserByEmailHandler handler,
        [AsParameters] GetUserByEmailParameters parameters,
        CancellationToken cancellationToken)
        => GetUserByEmailResult.ToIResult(
            await handler.ExecuteAsync(
                parameters,
                cancellationToken));

    internal async Task<IResult> GetUserById(
        [FromServices] IGetUserByIdHandler handler,
        [AsParameters] GetUserByIdParameters parameters,
        CancellationToken cancellationToken)
        => GetUserByIdResult.ToIResult(
            await handler.ExecuteAsync(
                parameters,
                cancellationToken));

    internal async Task<IResult> UpdateUserById(
        [FromServices] IUpdateUserByIdHandler handler,
        [AsParameters] UpdateUserByIdParameters parameters,
        CancellationToken cancellationToken)
        => UpdateUserByIdResult.ToIResult(
            await handler.ExecuteAsync(
                parameters,
                cancellationToken));

    internal async Task<IResult> DeleteUserById(
        [FromServices] IDeleteUserByIdHandler handler,
        [AsParameters] DeleteUserByIdParameters parameters,
        CancellationToken cancellationToken)
        => DeleteUserByIdResult.ToIResult(
            await handler.ExecuteAsync(
                parameters,
                cancellationToken));

    internal async Task<IResult> UpdateMyTestGender(
        [FromServices] IUpdateMyTestGenderHandler handler,
        [AsParameters] UpdateMyTestGenderParameters parameters,
        CancellationToken cancellationToken)
        => UpdateMyTestGenderResult.ToIResult(
            await handler.ExecuteAsync(
                parameters,
                cancellationToken));
}