//------------------------------------------------------------------------------
// This code was auto-generated by ApiGenerator x.x.x.x.
//
// Changes to this file may cause incorrect behavior and will be lost if
// the code is regenerated.
//------------------------------------------------------------------------------
namespace Structure1.Api.Generated.MyEndpoints;

/// <summary>
/// Endpoint definitions.
/// </summary>
[GeneratedCode("ApiGenerator", "x.x.x.x")]
public sealed class OrdersEndpointDefinition : IEndpointDefinition
{
    internal const string ApiRouteBase = "/api/v1/orders";

    public void DefineEndpoints(
        WebApplication app)
    {
        var orders = app
            .NewVersionedApi("Orders")
            .MapGroup(ApiRouteBase);

        orders
            .MapGet("/", GetOrders)
            .WithName("GetOrders")
            .WithSummary("Get orders.")
            .WithDescription("Get orders.")
            .AddEndpointFilter<ValidationFilter<GetOrdersParameters>>()
            .Produces<Pagination<Order>>()
            .Produces<string?>(StatusCodes.Status400BadRequest)
            .Produces(StatusCodes.Status401Unauthorized)
            .Produces<string?>(StatusCodes.Status404NotFound);

        orders
            .MapGet("{id}", GetOrderById)
            .WithName("GetOrderById")
            .WithSummary("Get order by id.")
            .WithDescription("Get order by id.")
            .AddEndpointFilter<ValidationFilter<GetOrderByIdParameters>>()
            .Produces<Order>()
            .Produces<string?>(StatusCodes.Status400BadRequest)
            .Produces<string?>(StatusCodes.Status404NotFound);

        orders
            .MapPatch("{id}", PatchOrdersId)
            .WithName("PatchOrdersId")
            .WithSummary("Update part of order by id.")
            .WithDescription("Update part of order by id.")
            .AddEndpointFilter<ValidationFilter<PatchOrdersIdParameters>>()
            .Produces<string?>()
            .Produces<string?>(StatusCodes.Status400BadRequest)
            .Produces(StatusCodes.Status401Unauthorized)
            .Produces(StatusCodes.Status403Forbidden)
            .Produces<string?>(StatusCodes.Status404NotFound)
            .Produces<string?>(StatusCodes.Status409Conflict)
            .Produces(StatusCodes.Status502BadGateway);
    }

    internal async Task<IResult> GetOrders(
        [FromServices] IGetOrdersHandler handler,
        [AsParameters] GetOrdersParameters parameters,
        CancellationToken cancellationToken)
        => GetOrdersResult.ToIResult(
            await handler.ExecuteAsync(
                parameters,
                cancellationToken));

    [AllowAnonymous]
    internal async Task<IResult> GetOrderById(
        [FromServices] IGetOrderByIdHandler handler,
        [AsParameters] GetOrderByIdParameters parameters,
        CancellationToken cancellationToken)
        => GetOrderByIdResult.ToIResult(
            await handler.ExecuteAsync(
                parameters,
                cancellationToken));

    [Authorize(Roles = "admin,operator")]
    internal async Task<IResult> PatchOrdersId(
        [FromServices] IPatchOrdersIdHandler handler,
        [AsParameters] PatchOrdersIdParameters parameters,
        CancellationToken cancellationToken)
        => PatchOrdersIdResult.ToIResult(
            await handler.ExecuteAsync(
                parameters,
                cancellationToken));
}