//------------------------------------------------------------------------------
// This code was auto-generated by ApiGenerator x.x.x.x.
//
// Changes to this file may cause incorrect behavior and will be lost if
// the code is regenerated.
//------------------------------------------------------------------------------
namespace PetStore.Api.Generated.Endpoints;

/// <summary>
/// Endpoint definitions.
/// </summary>
[Authorize]
[ApiController]
[Route("/v1/pets")]
[GeneratedCode("ApiGenerator", "x.x.x.x")]
public sealed class PetsController : ControllerBase
{
    /// <summary>
    /// Description: List all pets.
    /// Operation: ListPets.
    /// </summary>
    [HttpGet]
    [ProducesResponseType(typeof(IEnumerable<Pet>), StatusCodes.Status200OK)]
    [ProducesResponseType(typeof(ValidationProblemDetails), StatusCodes.Status400BadRequest)]
    [ProducesResponseType(StatusCodes.Status401Unauthorized)]
    public async Task<ActionResult> ListPets(
        ListPetsParameters parameters,
        [FromServices] IListPetsHandler handler,
        CancellationToken cancellationToken)
        => await handler.ExecuteAsync(parameters, cancellationToken);

    /// <summary>
    /// Description: Create a pet.
    /// Operation: CreatePets.
    /// </summary>
    [HttpPost]
    [ProducesResponseType(typeof(string), StatusCodes.Status201Created)]
    [ProducesResponseType(StatusCodes.Status401Unauthorized)]
    public async Task<ActionResult> CreatePets(
        [FromServices] ICreatePetsHandler handler,
        CancellationToken cancellationToken)
        => await handler.ExecuteAsync(cancellationToken);

    /// <summary>
    /// Description: Info for a specific pet.
    /// Operation: ShowPetById.
    /// </summary>
    [HttpGet("{petId}")]
    [ProducesResponseType(typeof(Pet), StatusCodes.Status200OK)]
    [ProducesResponseType(typeof(ValidationProblemDetails), StatusCodes.Status400BadRequest)]
    [ProducesResponseType(StatusCodes.Status401Unauthorized)]
    public async Task<ActionResult> ShowPetById(
        ShowPetByIdParameters parameters,
        [FromServices] IShowPetByIdHandler handler,
        CancellationToken cancellationToken)
        => await handler.ExecuteAsync(parameters, cancellationToken);
}
