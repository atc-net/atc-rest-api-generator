//------------------------------------------------------------------------------
// This code was auto-generated by ApiGenerator x.x.x.x.
//
// Changes to this file may cause incorrect behavior and will be lost if
// the code is regenerated.
//------------------------------------------------------------------------------
namespace ExAllResponseTypes.ApiClient.Generated.Endpoints.Example;

/// <summary>
/// Client Endpoint result.
/// Description: Example endpoint.
/// Operation: GetExample.
/// </summary>
[GeneratedCode("ApiGenerator", "x.x.x.x")]
public class GetExampleEndpointResult : EndpointResponse, IGetExampleEndpointResult
{
    public GetExampleEndpointResult(EndpointResponse response)
        : base(response)
    {
    }

    public bool IsContinue
        => StatusCode == HttpStatusCode.Continue;

    public bool IsSwitchingProtocols
        => StatusCode == HttpStatusCode.SwitchingProtocols;

    public bool IsProcessing
        => StatusCode == HttpStatusCode.Processing;

    public bool IsEarlyHints
        => StatusCode == HttpStatusCode.EarlyHints;

    public bool IsOk
        => StatusCode == HttpStatusCode.OK;

    public bool IsCreated
        => StatusCode == HttpStatusCode.Created;

    public bool IsAccepted
        => StatusCode == HttpStatusCode.Accepted;

    public bool IsNonAuthoritativeInformation
        => StatusCode == HttpStatusCode.NonAuthoritativeInformation;

    public bool IsNoContent
        => StatusCode == HttpStatusCode.NoContent;

    public bool IsResetContent
        => StatusCode == HttpStatusCode.ResetContent;

    public bool IsPartialContent
        => StatusCode == HttpStatusCode.PartialContent;

    public bool IsMultiStatus
        => StatusCode == HttpStatusCode.MultiStatus;

    public bool IsAlreadyReported
        => StatusCode == HttpStatusCode.AlreadyReported;

    public bool IsImUsed
        => StatusCode == HttpStatusCode.IMUsed;

    public bool IsMultipleChoices
        => StatusCode == HttpStatusCode.MultipleChoices;

    public bool IsMovedPermanently
        => StatusCode == HttpStatusCode.MovedPermanently;

    public bool IsFound
        => StatusCode == HttpStatusCode.Found;

    public bool IsSeeOther
        => StatusCode == HttpStatusCode.SeeOther;

    public bool IsNotModified
        => StatusCode == HttpStatusCode.NotModified;

    public bool IsUseProxy
        => StatusCode == HttpStatusCode.UseProxy;

    public bool IsUnused
        => StatusCode == HttpStatusCode.Unused;

    public bool IsRedirectKeepVerb
        => StatusCode == HttpStatusCode.RedirectKeepVerb;

    public bool IsPermanentRedirect
        => StatusCode == HttpStatusCode.PermanentRedirect;

    public bool IsBadRequest
        => StatusCode == HttpStatusCode.BadRequest;

    public bool IsUnauthorized
        => StatusCode == HttpStatusCode.Unauthorized;

    public bool IsPaymentRequired
        => StatusCode == HttpStatusCode.PaymentRequired;

    public bool IsForbidden
        => StatusCode == HttpStatusCode.Forbidden;

    public bool IsNotFound
        => StatusCode == HttpStatusCode.NotFound;

    public bool IsMethodNotAllowed
        => StatusCode == HttpStatusCode.MethodNotAllowed;

    public bool IsNotAcceptable
        => StatusCode == HttpStatusCode.NotAcceptable;

    public bool IsProxyAuthenticationRequired
        => StatusCode == HttpStatusCode.ProxyAuthenticationRequired;

    public bool IsRequestTimeout
        => StatusCode == HttpStatusCode.RequestTimeout;

    public bool IsConflict
        => StatusCode == HttpStatusCode.Conflict;

    public bool IsGone
        => StatusCode == HttpStatusCode.Gone;

    public bool IsLengthRequired
        => StatusCode == HttpStatusCode.LengthRequired;

    public bool IsPreconditionFailed
        => StatusCode == HttpStatusCode.PreconditionFailed;

    public bool IsRequestEntityTooLarge
        => StatusCode == HttpStatusCode.RequestEntityTooLarge;

    public bool IsRequestUriTooLong
        => StatusCode == HttpStatusCode.RequestUriTooLong;

    public bool IsUnsupportedMediaType
        => StatusCode == HttpStatusCode.UnsupportedMediaType;

    public bool IsRequestedRangeNotSatisfiable
        => StatusCode == HttpStatusCode.RequestedRangeNotSatisfiable;

    public bool IsExpectationFailed
        => StatusCode == HttpStatusCode.ExpectationFailed;

    public bool IsMisdirectedRequest
        => StatusCode == HttpStatusCode.MisdirectedRequest;

    public bool IsUnprocessableEntity
        => StatusCode == HttpStatusCode.UnprocessableEntity;

    public bool IsLocked
        => StatusCode == HttpStatusCode.Locked;

    public bool IsFailedDependency
        => StatusCode == HttpStatusCode.FailedDependency;

    public bool IsUpgradeRequired
        => StatusCode == HttpStatusCode.UpgradeRequired;

    public bool IsPreconditionRequired
        => StatusCode == HttpStatusCode.PreconditionRequired;

    public bool IsTooManyRequests
        => StatusCode == HttpStatusCode.TooManyRequests;

    public bool IsRequestHeaderFieldsTooLarge
        => StatusCode == HttpStatusCode.RequestHeaderFieldsTooLarge;

    public bool IsUnavailableForLegalReasons
        => StatusCode == HttpStatusCode.UnavailableForLegalReasons;

    public bool IsInternalServerError
        => StatusCode == HttpStatusCode.InternalServerError;

    public bool IsNotImplemented
        => StatusCode == HttpStatusCode.NotImplemented;

    public bool IsBadGateway
        => StatusCode == HttpStatusCode.BadGateway;

    public bool IsServiceUnavailable
        => StatusCode == HttpStatusCode.ServiceUnavailable;

    public bool IsGatewayTimeout
        => StatusCode == HttpStatusCode.GatewayTimeout;

    public bool IsHttpVersionNotSupported
        => StatusCode == HttpStatusCode.HttpVersionNotSupported;

    public bool IsVariantAlsoNegotiates
        => StatusCode == HttpStatusCode.VariantAlsoNegotiates;

    public bool IsInsufficientStorage
        => StatusCode == HttpStatusCode.InsufficientStorage;

    public bool IsLoopDetected
        => StatusCode == HttpStatusCode.LoopDetected;

    public bool IsNotExtended
        => StatusCode == HttpStatusCode.NotExtended;

    public bool IsNetworkAuthenticationRequired
        => StatusCode == HttpStatusCode.NetworkAuthenticationRequired;

    public ProblemDetails ContinueContent
        => IsContinue && ContentObject is ProblemDetails result
            ? result
            : throw new InvalidOperationException("Content is not the expected type - please use the IsContinue property first.");

    public ProblemDetails SwitchingProtocolsContent
        => IsSwitchingProtocols && ContentObject is ProblemDetails result
            ? result
            : throw new InvalidOperationException("Content is not the expected type - please use the IsSwitchingProtocols property first.");

    public ProblemDetails ProcessingContent
        => IsProcessing && ContentObject is ProblemDetails result
            ? result
            : throw new InvalidOperationException("Content is not the expected type - please use the IsProcessing property first.");

    public ProblemDetails EarlyHintsContent
        => IsEarlyHints && ContentObject is ProblemDetails result
            ? result
            : throw new InvalidOperationException("Content is not the expected type - please use the IsEarlyHints property first.");

    public ExampleModel OkContent
        => IsOk && ContentObject is ExampleModel result
            ? result
            : throw new InvalidOperationException("Content is not the expected type - please use the IsOk property first.");

    public ProblemDetails CreatedContent
        => IsCreated && ContentObject is ProblemDetails result
            ? result
            : throw new InvalidOperationException("Content is not the expected type - please use the IsCreated property first.");

    public ProblemDetails AcceptedContent
        => IsAccepted && ContentObject is ProblemDetails result
            ? result
            : throw new InvalidOperationException("Content is not the expected type - please use the IsAccepted property first.");

    public ProblemDetails NonAuthoritativeInformationContent
        => IsNonAuthoritativeInformation && ContentObject is ProblemDetails result
            ? result
            : throw new InvalidOperationException("Content is not the expected type - please use the IsNonAuthoritativeInformation property first.");

    public ProblemDetails NoContentContent
        => IsNoContent && ContentObject is ProblemDetails result
            ? result
            : throw new InvalidOperationException("Content is not the expected type - please use the IsNoContent property first.");

    public ProblemDetails ResetContentContent
        => IsResetContent && ContentObject is ProblemDetails result
            ? result
            : throw new InvalidOperationException("Content is not the expected type - please use the IsResetContent property first.");

    public ProblemDetails PartialContentContent
        => IsPartialContent && ContentObject is ProblemDetails result
            ? result
            : throw new InvalidOperationException("Content is not the expected type - please use the IsPartialContent property first.");

    public ProblemDetails MultiStatusContent
        => IsMultiStatus && ContentObject is ProblemDetails result
            ? result
            : throw new InvalidOperationException("Content is not the expected type - please use the IsMultiStatus property first.");

    public ProblemDetails AlreadyReportedContent
        => IsAlreadyReported && ContentObject is ProblemDetails result
            ? result
            : throw new InvalidOperationException("Content is not the expected type - please use the IsAlreadyReported property first.");

    public ProblemDetails ImUsedContent
        => IsImUsed && ContentObject is ProblemDetails result
            ? result
            : throw new InvalidOperationException("Content is not the expected type - please use the IsImUsed property first.");

    public ProblemDetails MultipleChoicesContent
        => IsMultipleChoices && ContentObject is ProblemDetails result
            ? result
            : throw new InvalidOperationException("Content is not the expected type - please use the IsMultipleChoices property first.");

    public ProblemDetails MovedPermanentlyContent
        => IsMovedPermanently && ContentObject is ProblemDetails result
            ? result
            : throw new InvalidOperationException("Content is not the expected type - please use the IsMovedPermanently property first.");

    public ProblemDetails FoundContent
        => IsFound && ContentObject is ProblemDetails result
            ? result
            : throw new InvalidOperationException("Content is not the expected type - please use the IsFound property first.");

    public ProblemDetails SeeOtherContent
        => IsSeeOther && ContentObject is ProblemDetails result
            ? result
            : throw new InvalidOperationException("Content is not the expected type - please use the IsSeeOther property first.");

    public ProblemDetails NotModifiedContent
        => IsNotModified && ContentObject is ProblemDetails result
            ? result
            : throw new InvalidOperationException("Content is not the expected type - please use the IsNotModified property first.");

    public ProblemDetails UseProxyContent
        => IsUseProxy && ContentObject is ProblemDetails result
            ? result
            : throw new InvalidOperationException("Content is not the expected type - please use the IsUseProxy property first.");

    public ProblemDetails UnusedContent
        => IsUnused && ContentObject is ProblemDetails result
            ? result
            : throw new InvalidOperationException("Content is not the expected type - please use the IsUnused property first.");

    public ProblemDetails RedirectKeepVerbContent
        => IsRedirectKeepVerb && ContentObject is ProblemDetails result
            ? result
            : throw new InvalidOperationException("Content is not the expected type - please use the IsRedirectKeepVerb property first.");

    public ProblemDetails PermanentRedirectContent
        => IsPermanentRedirect && ContentObject is ProblemDetails result
            ? result
            : throw new InvalidOperationException("Content is not the expected type - please use the IsPermanentRedirect property first.");

    public ValidationProblemDetails BadRequestContent
        => IsBadRequest && ContentObject is ValidationProblemDetails result
            ? result
            : throw new InvalidOperationException("Content is not the expected type - please use the IsBadRequest property first.");

    public ProblemDetails UnauthorizedContent
        => IsUnauthorized && ContentObject is ProblemDetails result
            ? result
            : throw new InvalidOperationException("Content is not the expected type - please use the IsUnauthorized property first.");

    public ProblemDetails PaymentRequiredContent
        => IsPaymentRequired && ContentObject is ProblemDetails result
            ? result
            : throw new InvalidOperationException("Content is not the expected type - please use the IsPaymentRequired property first.");

    public ProblemDetails ForbiddenContent
        => IsForbidden && ContentObject is ProblemDetails result
            ? result
            : throw new InvalidOperationException("Content is not the expected type - please use the IsForbidden property first.");

    public string? NotFoundContent
        => IsNotFound && ContentObject is string result
            ? result
            : throw new InvalidOperationException("Content is not the expected type - please use the IsNotFound property first.");

    public ProblemDetails MethodNotAllowedContent
        => IsMethodNotAllowed && ContentObject is ProblemDetails result
            ? result
            : throw new InvalidOperationException("Content is not the expected type - please use the IsMethodNotAllowed property first.");

    public ProblemDetails NotAcceptableContent
        => IsNotAcceptable && ContentObject is ProblemDetails result
            ? result
            : throw new InvalidOperationException("Content is not the expected type - please use the IsNotAcceptable property first.");

    public ProblemDetails ProxyAuthenticationRequiredContent
        => IsProxyAuthenticationRequired && ContentObject is ProblemDetails result
            ? result
            : throw new InvalidOperationException("Content is not the expected type - please use the IsProxyAuthenticationRequired property first.");

    public ProblemDetails RequestTimeoutContent
        => IsRequestTimeout && ContentObject is ProblemDetails result
            ? result
            : throw new InvalidOperationException("Content is not the expected type - please use the IsRequestTimeout property first.");

    public ProblemDetails ConflictContent
        => IsConflict && ContentObject is ProblemDetails result
            ? result
            : throw new InvalidOperationException("Content is not the expected type - please use the IsConflict property first.");

    public ProblemDetails GoneContent
        => IsGone && ContentObject is ProblemDetails result
            ? result
            : throw new InvalidOperationException("Content is not the expected type - please use the IsGone property first.");

    public ProblemDetails LengthRequiredContent
        => IsLengthRequired && ContentObject is ProblemDetails result
            ? result
            : throw new InvalidOperationException("Content is not the expected type - please use the IsLengthRequired property first.");

    public ProblemDetails PreconditionFailedContent
        => IsPreconditionFailed && ContentObject is ProblemDetails result
            ? result
            : throw new InvalidOperationException("Content is not the expected type - please use the IsPreconditionFailed property first.");

    public ProblemDetails RequestEntityTooLargeContent
        => IsRequestEntityTooLarge && ContentObject is ProblemDetails result
            ? result
            : throw new InvalidOperationException("Content is not the expected type - please use the IsRequestEntityTooLarge property first.");

    public ProblemDetails RequestUriTooLongContent
        => IsRequestUriTooLong && ContentObject is ProblemDetails result
            ? result
            : throw new InvalidOperationException("Content is not the expected type - please use the IsRequestUriTooLong property first.");

    public ProblemDetails UnsupportedMediaTypeContent
        => IsUnsupportedMediaType && ContentObject is ProblemDetails result
            ? result
            : throw new InvalidOperationException("Content is not the expected type - please use the IsUnsupportedMediaType property first.");

    public ProblemDetails RequestedRangeNotSatisfiableContent
        => IsRequestedRangeNotSatisfiable && ContentObject is ProblemDetails result
            ? result
            : throw new InvalidOperationException("Content is not the expected type - please use the IsRequestedRangeNotSatisfiable property first.");

    public ProblemDetails ExpectationFailedContent
        => IsExpectationFailed && ContentObject is ProblemDetails result
            ? result
            : throw new InvalidOperationException("Content is not the expected type - please use the IsExpectationFailed property first.");

    public ProblemDetails MisdirectedRequestContent
        => IsMisdirectedRequest && ContentObject is ProblemDetails result
            ? result
            : throw new InvalidOperationException("Content is not the expected type - please use the IsMisdirectedRequest property first.");

    public ProblemDetails UnprocessableEntityContent
        => IsUnprocessableEntity && ContentObject is ProblemDetails result
            ? result
            : throw new InvalidOperationException("Content is not the expected type - please use the IsUnprocessableEntity property first.");

    public ProblemDetails LockedContent
        => IsLocked && ContentObject is ProblemDetails result
            ? result
            : throw new InvalidOperationException("Content is not the expected type - please use the IsLocked property first.");

    public ProblemDetails FailedDependencyContent
        => IsFailedDependency && ContentObject is ProblemDetails result
            ? result
            : throw new InvalidOperationException("Content is not the expected type - please use the IsFailedDependency property first.");

    public ProblemDetails UpgradeRequiredContent
        => IsUpgradeRequired && ContentObject is ProblemDetails result
            ? result
            : throw new InvalidOperationException("Content is not the expected type - please use the IsUpgradeRequired property first.");

    public ProblemDetails PreconditionRequiredContent
        => IsPreconditionRequired && ContentObject is ProblemDetails result
            ? result
            : throw new InvalidOperationException("Content is not the expected type - please use the IsPreconditionRequired property first.");

    public ProblemDetails TooManyRequestsContent
        => IsTooManyRequests && ContentObject is ProblemDetails result
            ? result
            : throw new InvalidOperationException("Content is not the expected type - please use the IsTooManyRequests property first.");

    public ProblemDetails RequestHeaderFieldsTooLargeContent
        => IsRequestHeaderFieldsTooLarge && ContentObject is ProblemDetails result
            ? result
            : throw new InvalidOperationException("Content is not the expected type - please use the IsRequestHeaderFieldsTooLarge property first.");

    public ProblemDetails UnavailableForLegalReasonsContent
        => IsUnavailableForLegalReasons && ContentObject is ProblemDetails result
            ? result
            : throw new InvalidOperationException("Content is not the expected type - please use the IsUnavailableForLegalReasons property first.");

    public ProblemDetails InternalServerErrorContent
        => IsInternalServerError && ContentObject is ProblemDetails result
            ? result
            : throw new InvalidOperationException("Content is not the expected type - please use the IsInternalServerError property first.");

    public ProblemDetails NotImplementedContent
        => IsNotImplemented && ContentObject is ProblemDetails result
            ? result
            : throw new InvalidOperationException("Content is not the expected type - please use the IsNotImplemented property first.");

    public ProblemDetails BadGatewayContent
        => IsBadGateway && ContentObject is ProblemDetails result
            ? result
            : throw new InvalidOperationException("Content is not the expected type - please use the IsBadGateway property first.");

    public ProblemDetails ServiceUnavailableContent
        => IsServiceUnavailable && ContentObject is ProblemDetails result
            ? result
            : throw new InvalidOperationException("Content is not the expected type - please use the IsServiceUnavailable property first.");

    public ProblemDetails GatewayTimeoutContent
        => IsGatewayTimeout && ContentObject is ProblemDetails result
            ? result
            : throw new InvalidOperationException("Content is not the expected type - please use the IsGatewayTimeout property first.");

    public ProblemDetails HttpVersionNotSupportedContent
        => IsHttpVersionNotSupported && ContentObject is ProblemDetails result
            ? result
            : throw new InvalidOperationException("Content is not the expected type - please use the IsHttpVersionNotSupported property first.");

    public ProblemDetails VariantAlsoNegotiatesContent
        => IsVariantAlsoNegotiates && ContentObject is ProblemDetails result
            ? result
            : throw new InvalidOperationException("Content is not the expected type - please use the IsVariantAlsoNegotiates property first.");

    public ProblemDetails InsufficientStorageContent
        => IsInsufficientStorage && ContentObject is ProblemDetails result
            ? result
            : throw new InvalidOperationException("Content is not the expected type - please use the IsInsufficientStorage property first.");

    public ProblemDetails LoopDetectedContent
        => IsLoopDetected && ContentObject is ProblemDetails result
            ? result
            : throw new InvalidOperationException("Content is not the expected type - please use the IsLoopDetected property first.");

    public ProblemDetails NotExtendedContent
        => IsNotExtended && ContentObject is ProblemDetails result
            ? result
            : throw new InvalidOperationException("Content is not the expected type - please use the IsNotExtended property first.");

    public ProblemDetails NetworkAuthenticationRequiredContent
        => IsNetworkAuthenticationRequired && ContentObject is ProblemDetails result
            ? result
            : throw new InvalidOperationException("Content is not the expected type - please use the IsNetworkAuthenticationRequired property first.");
}