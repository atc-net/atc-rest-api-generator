//------------------------------------------------------------------------------
// This code was auto-generated by ApiGenerator x.x.x.x.
//
// Changes to this file may cause incorrect behavior and will be lost if
// the code is regenerated.
//------------------------------------------------------------------------------
namespace ExAllResponseTypes.ApiClient.Generated.Endpoints.Example;

/// <summary>
/// Client Endpoint.
/// Description: Example endpoint.
/// Operation: GetExample.
/// </summary>
[GeneratedCode("ApiGenerator", "x.x.x.x")]
public class GetExampleEndpoint : IGetExampleEndpoint
{
    private readonly IHttpClientFactory factory;
    private readonly IHttpMessageFactory httpMessageFactory;

    public GetExampleEndpoint(
        IHttpClientFactory factory,
        IHttpMessageFactory httpMessageFactory)
    {
        this.factory = factory;
        this.httpMessageFactory = httpMessageFactory;
    }

    public async Task<GetExampleEndpointResult> ExecuteAsync(
        GetExampleParameters parameters,
        string httpClientName = "ExAllResponseTypes-ApiClient",
        CancellationToken cancellationToken = default)
    {
        var client = factory.CreateClient(httpClientName);

        var requestBuilder = httpMessageFactory.FromTemplate("/api/v1/example");
        requestBuilder.WithQueryParameter("myEmail", parameters.MyEmail);

        using var requestMessage = requestBuilder.Build(HttpMethod.Get);
        using var response = await client.SendAsync(requestMessage, cancellationToken);

        var responseBuilder = httpMessageFactory.FromResponse(response);
        responseBuilder.AddErrorResponse<string>(HttpStatusCode.Continue);
        responseBuilder.AddErrorResponse<string>(HttpStatusCode.SwitchingProtocols);
        responseBuilder.AddErrorResponse<string>(HttpStatusCode.Processing);
        responseBuilder.AddErrorResponse<string>(HttpStatusCode.EarlyHints);
        responseBuilder.AddSuccessResponse<ExampleModel>(HttpStatusCode.OK);
        responseBuilder.AddErrorResponse<string>(HttpStatusCode.Created);
        responseBuilder.AddErrorResponse<string>(HttpStatusCode.Accepted);
        responseBuilder.AddErrorResponse<string>(HttpStatusCode.NonAuthoritativeInformation);
        responseBuilder.AddErrorResponse<string>(HttpStatusCode.NoContent);
        responseBuilder.AddErrorResponse<string>(HttpStatusCode.ResetContent);
        responseBuilder.AddErrorResponse<string>(HttpStatusCode.PartialContent);
        responseBuilder.AddErrorResponse<string>(HttpStatusCode.MultiStatus);
        responseBuilder.AddErrorResponse<string>(HttpStatusCode.AlreadyReported);
        responseBuilder.AddErrorResponse<string>(HttpStatusCode.IMUsed);
        responseBuilder.AddErrorResponse<string>(HttpStatusCode.MultipleChoices);
        responseBuilder.AddErrorResponse<string>(HttpStatusCode.MovedPermanently);
        responseBuilder.AddErrorResponse<string>(HttpStatusCode.Found);
        responseBuilder.AddErrorResponse<string>(HttpStatusCode.SeeOther);
        responseBuilder.AddErrorResponse<string>(HttpStatusCode.NotModified);
        responseBuilder.AddErrorResponse<string>(HttpStatusCode.UseProxy);
        responseBuilder.AddErrorResponse<string>(HttpStatusCode.Unused);
        responseBuilder.AddErrorResponse<string>(HttpStatusCode.RedirectKeepVerb);
        responseBuilder.AddErrorResponse<string>(HttpStatusCode.PermanentRedirect);
        responseBuilder.AddErrorResponse<ValidationProblemDetails>(HttpStatusCode.BadRequest);
        responseBuilder.AddErrorResponse<string>(HttpStatusCode.Unauthorized);
        responseBuilder.AddErrorResponse<string>(HttpStatusCode.PaymentRequired);
        responseBuilder.AddErrorResponse<string>(HttpStatusCode.Forbidden);
        responseBuilder.AddErrorResponse<string>(HttpStatusCode.NotFound);
        responseBuilder.AddErrorResponse<string>(HttpStatusCode.MethodNotAllowed);
        responseBuilder.AddErrorResponse<string>(HttpStatusCode.NotAcceptable);
        responseBuilder.AddErrorResponse<string>(HttpStatusCode.ProxyAuthenticationRequired);
        responseBuilder.AddErrorResponse<string>(HttpStatusCode.RequestTimeout);
        responseBuilder.AddErrorResponse<string>(HttpStatusCode.Conflict);
        responseBuilder.AddErrorResponse<string>(HttpStatusCode.Gone);
        responseBuilder.AddErrorResponse<string>(HttpStatusCode.LengthRequired);
        responseBuilder.AddErrorResponse<string>(HttpStatusCode.PreconditionFailed);
        responseBuilder.AddErrorResponse<string>(HttpStatusCode.RequestEntityTooLarge);
        responseBuilder.AddErrorResponse<string>(HttpStatusCode.RequestUriTooLong);
        responseBuilder.AddErrorResponse<string>(HttpStatusCode.UnsupportedMediaType);
        responseBuilder.AddErrorResponse<string>(HttpStatusCode.RequestedRangeNotSatisfiable);
        responseBuilder.AddErrorResponse<string>(HttpStatusCode.ExpectationFailed);
        responseBuilder.AddErrorResponse<string>(HttpStatusCode.MisdirectedRequest);
        responseBuilder.AddErrorResponse<string>(HttpStatusCode.UnprocessableEntity);
        responseBuilder.AddErrorResponse<string>(HttpStatusCode.Locked);
        responseBuilder.AddErrorResponse<string>(HttpStatusCode.FailedDependency);
        responseBuilder.AddErrorResponse<string>(HttpStatusCode.UpgradeRequired);
        responseBuilder.AddErrorResponse<string>(HttpStatusCode.PreconditionRequired);
        responseBuilder.AddErrorResponse<string>(HttpStatusCode.TooManyRequests);
        responseBuilder.AddErrorResponse<string>(HttpStatusCode.RequestHeaderFieldsTooLarge);
        responseBuilder.AddErrorResponse<string>(HttpStatusCode.UnavailableForLegalReasons);
        responseBuilder.AddErrorResponse<string>(HttpStatusCode.InternalServerError);
        responseBuilder.AddErrorResponse<string>(HttpStatusCode.NotImplemented);
        responseBuilder.AddErrorResponse<string>(HttpStatusCode.BadGateway);
        responseBuilder.AddErrorResponse<string>(HttpStatusCode.ServiceUnavailable);
        responseBuilder.AddErrorResponse<string>(HttpStatusCode.GatewayTimeout);
        responseBuilder.AddErrorResponse<string>(HttpStatusCode.HttpVersionNotSupported);
        responseBuilder.AddErrorResponse<string>(HttpStatusCode.VariantAlsoNegotiates);
        responseBuilder.AddErrorResponse<string>(HttpStatusCode.InsufficientStorage);
        responseBuilder.AddErrorResponse<string>(HttpStatusCode.LoopDetected);
        responseBuilder.AddErrorResponse<string>(HttpStatusCode.NotExtended);
        responseBuilder.AddErrorResponse<string>(HttpStatusCode.NetworkAuthenticationRequired);
        return await responseBuilder.BuildResponseAsync(x => new GetExampleEndpointResult(x), cancellationToken);
    }
}
