namespace Atc.CodeGeneration.CSharp.Tests.Content.Generators;

public class GenerateContentForInterfaceTests : GenerateContentBaseTests
{
    [Fact]
    public void Scenario1()
    {
        var expectedCode =
@"namespace App.MyNamespace;

public interface MyInterface
{
}";

        var interfaceParameters = new InterfaceParameters(
            HeaderContent: null,
            Namespace: "App.MyNamespace",
            DocumentationTags: null,
            Attributes: null,
            AccessModifier: AccessModifiers.Public,
            InterfaceTypeName: "MyInterface",
            InheritedInterfaceTypeName: null,
            Properties: null,
            Methods: null);

        var sut = new GenerateContentForInterface(
            codeDocumentationTagsGenerator,
            interfaceParameters);

        var generatedCode = sut.Generate();

        Assert.NotNull(generatedCode);
        Assert.Equal(expectedCode, generatedCode);
    }

    [Fact]
    public void Scenario2()
    {
        var expectedCode =
            @"namespace App.MyNamespace;

public interface MyInterface : MyInterfaceBase
{
}";

        var interfaceParameters = new InterfaceParameters(
            HeaderContent: null,
            Namespace: "App.MyNamespace",
            DocumentationTags: null,
            Attributes: null,
            AccessModifier: AccessModifiers.Public,
            InterfaceTypeName: "MyInterface",
            InheritedInterfaceTypeName: "MyInterfaceBase",
            Properties: null,
            Methods: null);

        var sut = new GenerateContentForInterface(
            codeDocumentationTagsGenerator,
            interfaceParameters);

        var generatedCode = sut.Generate();

        Assert.NotNull(generatedCode);
        Assert.Equal(expectedCode, generatedCode);
    }

    [Fact]
    public void Scenario_Demo_SetAccountName_ForDomainRequestHandler()
    {
        const string expectedCode =
            @"//------------------------------------------------------------------------------
// This code was auto-generated by ApiGenerator X.X.X.X.
//
// Changes to this file may cause incorrect behavior and will be lost if
// the code is regenerated.
//------------------------------------------------------------------------------
namespace Demo.Api.Generated.Contracts.Accounts;

/// <summary>
/// Domain Interface for RequestHandler.
/// Description: Set name of account.
/// Operation: SetAccountName.
/// </summary>
[GeneratedCode(""ApiGenerator"", ""X.X.X.X"")]
public interface ISetAccountNameHandler
{
    /// <summary>
    /// Execute method.
    /// </summary>
    /// <param name=""parameters"">The parameters.</param>
    /// <param name=""cancellationToken"">The cancellation token.</param>
    Task<SetAccountNameResult> ExecuteAsync(
        SetAccountNameParameters parameters,
        CancellationToken cancellationToken = default);
}";

        var documentationTags = new CodeDocumentationTags(
            "Domain Interface for RequestHandler.\r\nDescription: Set name of account.\r\nOperation: SetAccountName.");

        var attributes = new List<AttributeParameters>
        {
            new("GeneratedCode", "\"ApiGenerator\", \"X.X.X.X\""),
        };

        var methodParameters = new List<MethodParameters>
        {
            new(
                DocumentationTags: new CodeDocumentationTags(
                    "Execute method",
                    parameters: new Dictionary<string, string>(StringComparer.Ordinal)
                    {
                        { "parameters", "The parameters." },
                        { "cancellationToken", "The cancellation token." },
                    },
                    remark: null,
                    code: null,
                    example: null,
                    exceptions: null,
                    @return: null),
                Attributes: null,
                AccessModifier: AccessModifiers.None,
                ReturnTypeName: "SetAccountNameResult",
                ReturnGenericTypeName: "Task",
                Name: "ExecuteAsync",
                Parameters: new List<PropertyParameters>()
                {
                    new(
                        DocumentationTags: null,
                        Attributes: null,
                        AccessModifier: AccessModifiers.None,
                        ReturnGenericTypeName: null,
                        ReturnTypeName: "SetAccountNameParameters",
                        Name: "parameters",
                        DefaultValue: null,
                        UseAutoProperty: false,
                        UseSet: false,
                        UseGet: false,
                        UseExpressionBody: false,
                        Content: null),
                    new(
                        DocumentationTags: null,
                        Attributes: null,
                        AccessModifier: AccessModifiers.None,
                        ReturnGenericTypeName: null,
                        ReturnTypeName: "CancellationToken",
                        Name: "cancellationToken",
                        DefaultValue: "default",
                        UseAutoProperty: false,
                        UseSet: false,
                        UseGet: false,
                        UseExpressionBody: false,
                        Content: "default"),
                },
                UseExpressionBody: false,
                Content: null),
        };

        var interfaceParameters = new InterfaceParameters(
            HeaderContent: HeaderContent,
            Namespace: "Demo.Api.Generated.Contracts.Accounts",
            DocumentationTags: documentationTags,
            Attributes: attributes,
            AccessModifier: AccessModifiers.Public,
            InterfaceTypeName: "ISetAccountNameHandler",
            InheritedInterfaceTypeName: null,
            Properties: null,
            Methods: methodParameters);

        var sut = new GenerateContentForInterface(
            codeDocumentationTagsGenerator,
            interfaceParameters);

        var generatedCode = sut.Generate();

        Assert.NotNull(generatedCode);
        Assert.Equal(expectedCode, generatedCode);
    }

    [Fact]
    public void Scenario_Demo_UpdateAccountName_ForDomainRequestHandler()
    {
        var expectedCode =
            @"//------------------------------------------------------------------------------
// This code was auto-generated by ApiGenerator X.X.X.X.
//
// Changes to this file may cause incorrect behavior and will be lost if
// the code is regenerated.
//------------------------------------------------------------------------------
namespace Demo.Api.Generated.Contracts.Accounts;

/// <summary>
/// Domain Interface for RequestHandler.
/// Description: Update name of account.
/// Operation: UpdateAccountName.
/// </summary>
[GeneratedCode(""ApiGenerator"", ""X.X.X.X"")]
public interface IUpdateAccountNameHandler
{
    /// <summary>
    /// Execute method.
    /// </summary>
    /// <param name=""parameters"">The parameters.</param>
    /// <param name=""cancellationToken"">The cancellation token.</param>
    Task<UpdateAccountNameResult> ExecuteAsync(
        UpdateAccountNameParameters parameters,
        CancellationToken cancellationToken = default);
}";

        var documentationTags = new CodeDocumentationTags(
            "Domain Interface for RequestHandler.\r\nDescription: Update name of account.\r\nOperation: UpdateAccountName.");

        var attributes = new List<AttributeParameters>
        {
            new("GeneratedCode", "\"ApiGenerator\", \"X.X.X.X\""),
        };

        var methodParameters = new List<MethodParameters>
        {
            new(
                DocumentationTags: new CodeDocumentationTags(
                    "Execute method",
                    parameters: new Dictionary<string, string>(StringComparer.Ordinal)
                    {
                        { "parameters", "The parameters." },
                        { "cancellationToken", "The cancellation token." },
                    },
                    remark: null,
                    code: null,
                    example: null,
                    exceptions: null,
                    @return: null),
                Attributes: null,
                AccessModifier: AccessModifiers.None,
                ReturnTypeName: "UpdateAccountNameResult",
                ReturnGenericTypeName: "Task",
                Name: "ExecuteAsync",
                Parameters: new List<PropertyParameters>()
                {
                    new(
                        DocumentationTags: null,
                        Attributes: null,
                        AccessModifier: AccessModifiers.None,
                        ReturnGenericTypeName: null,
                        ReturnTypeName: "UpdateAccountNameParameters",
                        Name: "parameters",
                        DefaultValue: null,
                        UseAutoProperty: false,
                        UseSet: false,
                        UseGet: false,
                        UseExpressionBody: false,
                        Content: null),
                    new(
                        DocumentationTags: null,
                        Attributes: null,
                        AccessModifier: AccessModifiers.None,
                        ReturnGenericTypeName: null,
                        ReturnTypeName: "CancellationToken",
                        Name: "cancellationToken",
                        DefaultValue: "default",
                        UseAutoProperty: false,
                        UseSet: false,
                        UseGet: false,
                        UseExpressionBody: false,
                        Content: "default"),
                },
                UseExpressionBody: false,
                Content: null),
        };

        var interfaceParameters = new InterfaceParameters(
            HeaderContent: HeaderContent,
            Namespace: "Demo.Api.Generated.Contracts.Accounts",
            DocumentationTags: documentationTags,
            Attributes: attributes,
            AccessModifier: AccessModifiers.Public,
            InterfaceTypeName: "IUpdateAccountNameHandler",
            InheritedInterfaceTypeName: null,
            Properties: null,
            Methods: methodParameters);

        var sut = new GenerateContentForInterface(
            codeDocumentationTagsGenerator,
            interfaceParameters);

        var generatedCode = sut.Generate();

        Assert.NotNull(generatedCode);
        Assert.Equal(expectedCode, generatedCode);
    }
}