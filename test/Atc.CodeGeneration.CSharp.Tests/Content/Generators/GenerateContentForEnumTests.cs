namespace Atc.CodeGeneration.CSharp.Tests.Content.Generators;

public class GenerateContentForEnumTests : GenerateContentBaseTests
{
    [Fact]
    public void Scenario_Demo_ColorType()
    {
        const string expectedCode =
            @"//------------------------------------------------------------------------------
// This code was auto-generated by ApiGenerator X.X.X.X.
//
// Changes to this file may cause incorrect behavior and will be lost if
// the code is regenerated.
//------------------------------------------------------------------------------
namespace Demo.Api.Generated.Contracts;

/// <summary>
/// Enumeration: ColorType.
/// </summary>
[GeneratedCode(""ApiGenerator"", ""X.X.X.X"")]
[Flags]
public enum ColorType
{
    None = 0,
    Black = 1,
    White = 2,
    Yellow = 4,
    Red = 8,
}";
        var documentationTags = new CodeDocumentationTags(
            "Enumeration: ColorType.");

        var enumParameters = EnumParametersFactory.Create(
            headerContent: HeaderContent,
            @namespace: "Demo.Api.Generated.Contracts",
            documentationTags: documentationTags,
            attributes: AttributesWithGeneratedCode,
            enumTypeName: "ColorType",
            enumNameValues: new Dictionary<string, int>(StringComparer.Ordinal)
            {
                { "None", 0 },
                { "Black", 1 },
                { "White", 2 },
                { "Yellow", 4 },
                { "Red", 8 },
            });

        var sut = new GenerateContentForEnum(
            CodeDocumentationTagsGenerator,
            enumParameters);

        var generatedCode = sut.Generate();

        Assert.NotNull(generatedCode);
        Assert.Equal(expectedCode, generatedCode);
    }

    [Fact]
    public void Scenario_Demo_GenderType()
    {
        const string expectedCode =
            @"//------------------------------------------------------------------------------
// This code was auto-generated by ApiGenerator X.X.X.X.
//
// Changes to this file may cause incorrect behavior and will be lost if
// the code is regenerated.
//------------------------------------------------------------------------------
namespace Demo.Api.Generated.Contracts;

/// <summary>
/// Enumeration: GenderType.
/// </summary>
[GeneratedCode(""ApiGenerator"", ""X.X.X.X"")]
public enum GenderType
{
    None,
    NonBinary,
    Male,
    Female,
}";
        var documentationTags = new CodeDocumentationTags(
            "Enumeration: GenderType.");

        var enumParameters = EnumParametersFactory.Create(
            headerContent: HeaderContent,
            @namespace: "Demo.Api.Generated.Contracts",
            documentationTags: documentationTags,
            attributes: AttributesWithGeneratedCode,
            enumTypeName: "GenderType",
            enumNames: new[]
            {
                "None",
                "NonBinary",
                "Male",
                "Female",
            });

        var sut = new GenerateContentForEnum(
            CodeDocumentationTagsGenerator,
            enumParameters);

        var generatedCode = sut.Generate();

        Assert.NotNull(generatedCode);
        Assert.Equal(expectedCode, generatedCode);
    }
}