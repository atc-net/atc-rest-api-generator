// ReSharper disable StringLiteralTypo
namespace Atc.CodeGeneration.CSharp.Tests.Content.Generators;

public class GenerateContentForClassTests : GenerateContentBaseTests
{
    [Fact]
    public void Scenario_Demo_UpdateAccountRequest_ForModelRequest()
    {
        const string expectedCode =
            @"//------------------------------------------------------------------------------
// This code was auto-generated by ApiGenerator X.X.X.X.
//
// Changes to this file may cause incorrect behavior and will be lost if
// the code is regenerated.
//------------------------------------------------------------------------------
namespace Demo.Api.Generated.Contracts.Accounts;

/// <summary>
/// UpdateAccountRequest.
/// </summary>
[GeneratedCode(""ApiGenerator"", ""X.X.X.X"")]
public class UpdateAccountRequest
{
    public string Name { get; set; }

    /// <inheritdoc />
    public override string ToString()
        => $""{nameof(Name)}: {Name}"";
}";

        var documentationTags = new CodeDocumentationTags(
            "UpdateAccountRequest.");

        var propertyParameters = new List<PropertyParameters>
        {
            new(
                DocumentationTags: null,
                Attributes: null,
                AccessModifier: AccessModifiers.Public,
                GenericTypeName: null,
                IsGenericListType: false,
                TypeName: "string",
                IsReferenceType: false,
                Name: "Name",
                DefaultValue: null,
                UseAutoProperty: true,
                UseGet: true,
                UseSet: true,
                UseExpressionBody: false,
                Content: null),
        };

        var classParameters = new ClassParameters(
            HeaderContent: HeaderContent,
            Namespace: "Demo.Api.Generated.Contracts.Accounts",
            DocumentationTags: documentationTags,
            Attributes: AttributesWithGeneratedCode,
            AccessModifier: AccessModifiers.PublicClass,
            ClassTypeName: "UpdateAccountRequest",
            GenericTypeName: null,
            InheritedClassTypeName: null,
            InheritedGenericClassTypeName: null,
            InheritedInterfaceTypeName: null,
            Constructors: null,
            Properties: propertyParameters,
            Methods: null,
            GenerateToStringMethod: true);

        var sut = new GenerateContentForClass(
            CodeDocumentationTagsGenerator,
            classParameters);

        var generatedCode = sut.Generate();

        Assert.NotNull(generatedCode);
        Assert.Equal(expectedCode, generatedCode);
    }

    [Fact]
    public void Scenario_Demo_UpdateAccountNameParameters_ForModelParameters()
    {
        const string expectedCode =
            @"//------------------------------------------------------------------------------
// This code was auto-generated by ApiGenerator X.X.X.X.
//
// Changes to this file may cause incorrect behavior and will be lost if
// the code is regenerated.
//------------------------------------------------------------------------------
namespace Demo.Api.Generated.Contracts.Accounts;

/// <summary>
/// Parameters for operation request.
/// Description: Update name of account.
/// Operation: UpdateAccountName.
/// </summary>
[GeneratedCode(""ApiGenerator"", ""X.X.X.X"")]
public class UpdateAccountNameParameters
{
    /// <summary>
    /// The accountId.
    /// </summary>
    [FromRoute(Name = ""accountId"")]
    [Required]
    public Guid AccountId { get; set; }

    /// <summary>
    /// The account name.
    /// </summary>
    [FromHeader(Name = ""name"")]
    public string Name { get; set; }

    /// <inheritdoc />
    public override string ToString()
        => $""{nameof(AccountId)}: {AccountId}, {nameof(Name)}: {Name}"";
}";

        var documentationTags = new CodeDocumentationTags(
            "Parameters for operation request.\r\nDescription: Update name of account.\r\nOperation: UpdateAccountName.");

        var propertyParameters = new List<PropertyParameters>
        {
            new(
                DocumentationTags: new CodeDocumentationTags("The accountId."),
                Attributes: new List<AttributeParameters>
                {
                    new("FromRoute", "Name = \"accountId\""),
                    new("Required", null),
                },
                AccessModifier: AccessModifiers.Public,
                GenericTypeName: null,
                IsGenericListType: false,
                TypeName: "Guid",
                IsReferenceType: false,
                Name: "AccountId",
                DefaultValue: null,
                UseAutoProperty: true,
                UseGet: true,
                UseSet: true,
                UseExpressionBody: false,
                Content: null),
            new(
                DocumentationTags: new CodeDocumentationTags("The account name."),
                Attributes: new List<AttributeParameters>
                {
                    new("FromHeader", "Name = \"name\""),
                },
                AccessModifier: AccessModifiers.Public,
                GenericTypeName: null,
                IsGenericListType: false,
                TypeName: "string",
                IsReferenceType: false,
                Name: "Name",
                DefaultValue: null,
                UseAutoProperty: true,
                UseGet: true,
                UseSet: true,
                UseExpressionBody: false,
                Content: null),
        };

        var classParameters = new ClassParameters(
            HeaderContent: HeaderContent,
            Namespace: "Demo.Api.Generated.Contracts.Accounts",
            DocumentationTags: documentationTags,
            Attributes: AttributesWithGeneratedCode,
            AccessModifier: AccessModifiers.PublicClass,
            ClassTypeName: "UpdateAccountNameParameters",
            GenericTypeName: null,
            InheritedClassTypeName: null,
            InheritedGenericClassTypeName: null,
            InheritedInterfaceTypeName: null,
            Constructors: null,
            Properties: propertyParameters,
            Methods: null,
            GenerateToStringMethod: true);

        var sut = new GenerateContentForClass(
            CodeDocumentationTagsGenerator,
            classParameters);

        var generatedCode = sut.Generate();

        Assert.NotNull(generatedCode);
        Assert.Equal(expectedCode, generatedCode);
    }

    [Fact]
    public void Scenario_Demo_AccountsController_ForController()
    {
        const string expectedCode =
            @"//------------------------------------------------------------------------------
// This code was auto-generated by ApiGenerator X.X.X.X.
//
// Changes to this file may cause incorrect behavior and will be lost if
// the code is regenerated.
//------------------------------------------------------------------------------
namespace Demo.Api.Generated.Endpoints;

/// <summary>
/// Endpoint definitions.
/// </summary>
[Authorize]
[ApiController]
[Route(""/api/v1/accounts"")]
[GeneratedCode(""ApiGenerator"", ""X.X.X.X"")]
public class AccountsController : ControllerBase
{
    /// <summary>
    /// Description: Update name of account.
    /// Operation: UpdateAccountName.
    /// </summary>
    [HttpPut(""{accountId}/name"")]
    [ProducesResponseType(typeof(string), StatusCodes.Status200OK)]
    [ProducesResponseType(typeof(ValidationProblemDetails), StatusCodes.Status400BadRequest)]
    [ProducesResponseType(typeof(ProblemDetails), StatusCodes.Status401Unauthorized)]
    [ProducesResponseType(typeof(ProblemDetails), StatusCodes.Status403Forbidden)]
    public async Task<ActionResult> UpdateAccountName(
        UpdateAccountNameParameters parameters,
        [FromServices] IUpdateAccountNameHandler handler,
        CancellationToken cancellationToken)
        => await handler.ExecuteAsync(parameters, cancellationToken);

    /// <summary>
    /// Description: Set name of account.
    /// Operation: SetAccountName.
    /// </summary>
    [HttpPost(""{accountId}/name"")]
    [ProducesResponseType(typeof(string), StatusCodes.Status200OK)]
    [ProducesResponseType(typeof(ValidationProblemDetails), StatusCodes.Status400BadRequest)]
    [ProducesResponseType(typeof(ProblemDetails), StatusCodes.Status401Unauthorized)]
    [ProducesResponseType(typeof(ProblemDetails), StatusCodes.Status403Forbidden)]
    public async Task<ActionResult> SetAccountName(
        SetAccountNameParameters parameters,
        [FromServices] ISetAccountNameHandler handler,
        CancellationToken cancellationToken)
        => await handler.ExecuteAsync(parameters, cancellationToken);
}";

        var documentationTags = new CodeDocumentationTags(
            "Endpoint definitions.");

        var attributes = new List<AttributeParameters>
        {
            new("Authorize", null),
            new("ApiController", null),
            new("Route", "\"/api/v1/accounts\""),
            AttributesWithGeneratedCode[0],
        };

        var methodParameters = new List<MethodParameters>
        {
            new(
                DocumentationTags: new CodeDocumentationTags("Description: Update name of account.\r\nOperation: UpdateAccountName."),
                Attributes: new List<AttributeParameters>
                {
                    new("HttpPut", "\"{accountId}/name\""),
                    new("ProducesResponseType", "typeof(string), StatusCodes.Status200OK"),
                    new("ProducesResponseType", "typeof(ValidationProblemDetails), StatusCodes.Status400BadRequest"),
                    new("ProducesResponseType", "typeof(ProblemDetails), StatusCodes.Status401Unauthorized"),
                    new("ProducesResponseType", "typeof(ProblemDetails), StatusCodes.Status403Forbidden"),
                },
                AccessModifier: AccessModifiers.PublicAsync,
                ReturnGenericTypeName: "Task",
                ReturnTypeName: "ActionResult",
                Name: "UpdateAccountName",
                Parameters: new List<ParameterBaseParameters>
                {
                    new(null, null, false, "UpdateAccountNameParameters", true, "parameters", null),
                    new(new List<AttributeParameters> { new("FromServices", null) }, null, false, "IUpdateAccountNameHandler", true, "handler", null),
                    new(null, null, false, "CancellationToken", false, "cancellationToken", null),
                },
                AlwaysBreakDownParameters: false,
                UseExpressionBody: true,
                Content: "await handler.ExecuteAsync(parameters, cancellationToken)"),
            new(
                DocumentationTags: new CodeDocumentationTags("Description: Set name of account.\r\nOperation: SetAccountName."),
                Attributes: new List<AttributeParameters>
                {
                    new("HttpPost", "\"{accountId}/name\""),
                    new("ProducesResponseType", "typeof(string), StatusCodes.Status200OK"),
                    new("ProducesResponseType", "typeof(ValidationProblemDetails), StatusCodes.Status400BadRequest"),
                    new("ProducesResponseType", "typeof(ProblemDetails), StatusCodes.Status401Unauthorized"),
                    new("ProducesResponseType", "typeof(ProblemDetails), StatusCodes.Status403Forbidden"),
                },
                AccessModifier: AccessModifiers.PublicAsync,
                ReturnGenericTypeName: "Task",
                ReturnTypeName: "ActionResult",
                Name: "SetAccountName",
                Parameters: new List<ParameterBaseParameters>
                {
                    new(null, null, false, "SetAccountNameParameters", true, "parameters", null),
                    new(new List<AttributeParameters> { new("FromServices", null) }, null, false, "ISetAccountNameHandler", true, "handler", null),
                    new(null, null, false, "CancellationToken", false, "cancellationToken", null),
                },
                AlwaysBreakDownParameters: false,
                UseExpressionBody: true,
                Content: "await handler.ExecuteAsync(parameters, cancellationToken)"),
        };

        var classParameters = new ClassParameters(
            HeaderContent: HeaderContent,
            Namespace: "Demo.Api.Generated.Endpoints",
            DocumentationTags: documentationTags,
            Attributes: attributes,
            AccessModifier: AccessModifiers.PublicClass,
            ClassTypeName: "AccountsController",
            GenericTypeName: null,
            InheritedClassTypeName: "ControllerBase",
            InheritedGenericClassTypeName: null,
            InheritedInterfaceTypeName: null,
            Constructors: null,
            Properties: null,
            Methods: methodParameters,
            GenerateToStringMethod: false);

        var sut = new GenerateContentForClass(
            CodeDocumentationTagsGenerator,
            classParameters);

        var generatedCode = sut.Generate();

        Assert.NotNull(generatedCode);
        Assert.Equal(expectedCode, generatedCode);
    }

    [Fact]
    public void Scenario_Demo_UpdateAccountNameParameters_ForModelResult()
    {
        const string expectedCode =
            @"//------------------------------------------------------------------------------
// This code was auto-generated by ApiGenerator X.X.X.X.
//
// Changes to this file may cause incorrect behavior and will be lost if
// the code is regenerated.
//------------------------------------------------------------------------------
namespace Demo.Api.Generated.Contracts.Accounts;

/// <summary>
/// Results for operation request.
/// Description: Update name of account.
/// Operation: UpdateAccountName.
/// </summary>
[GeneratedCode(""ApiGenerator"", ""X.X.X.X"")]
public class UpdateAccountNameResult : ResultBase
{
    private UpdateAccountNameResult(ActionResult result) : base(result) { }

    /// <summary>
    /// 200 - Ok response.
    /// </summary>
    public static UpdateAccountNameResult Ok(string? message = null)
        => new UpdateAccountNameResult(new OkObjectResult(message));

    /// <summary>
    /// Performs an implicit conversion from UpdateAccountNameResult to ActionResult.
    /// </summary>
    public static implicit operator UpdateAccountNameResult(string response)
        => Ok(response);
}";

        var documentationTags = new CodeDocumentationTags(
            "Results for operation request.\r\nDescription: Update name of account.\r\nOperation: UpdateAccountName.");

        var constructorParameters = new List<ConstructorParameters>
        {
            new(
                DocumentationTags: null,
                AccessModifier: AccessModifiers.Private,
                GenericTypeName: null,
                TypeName: "UpdateAccountNameResult",
                InheritedClassTypeName: "base",
                Parameters: new List<ConstructorParameterBaseParameters>
                {
                    new(
                        GenericTypeName: null,
                        TypeName: "ActionResult",
                        Name: "result",
                        DefaultValue: null,
                        PassToInheritedClass: true,
                        CreateAsPrivateReadonlyMember: false,
                        CreateAaOneLiner: true),
                }),
        };

        var methodParameters = new List<MethodParameters>
        {
            new(
                DocumentationTags: new CodeDocumentationTags("200 - Ok response."),
                Attributes: null,
                AccessModifier: AccessModifiers.PublicStatic,
                ReturnGenericTypeName: null,
                ReturnTypeName: "UpdateAccountNameResult",
                Name: "Ok",
                Parameters: new List<ParameterBaseParameters> { new(null, null, false, "string?", false, "message", "null") },
                AlwaysBreakDownParameters: false,
                UseExpressionBody: true,
                Content: "new UpdateAccountNameResult(new OkObjectResult(message))"),
            new(
                DocumentationTags: new CodeDocumentationTags("Performs an implicit conversion from UpdateAccountNameResult to ActionResult."),
                Attributes: null,
                AccessModifier: AccessModifiers.PublicStaticImplicitOperator,
                ReturnGenericTypeName: null,
                ReturnTypeName: null,
                Name: "UpdateAccountNameResult",
                Parameters: new List<ParameterBaseParameters> { new(null, null, false, "string", false, "response", null) },
                AlwaysBreakDownParameters: false,
                UseExpressionBody: true,
                Content: "Ok(response)"),
        };

        var classParameters = new ClassParameters(
            HeaderContent: HeaderContent,
            Namespace: "Demo.Api.Generated.Contracts.Accounts",
            DocumentationTags: documentationTags,
            Attributes: AttributesWithGeneratedCode,
            AccessModifier: AccessModifiers.PublicClass,
            ClassTypeName: "UpdateAccountNameResult",
            GenericTypeName: null,
            InheritedClassTypeName: "ResultBase",
            InheritedGenericClassTypeName: null,
            InheritedInterfaceTypeName: null,
            Constructors: constructorParameters,
            Properties: null,
            Methods: methodParameters,
            GenerateToStringMethod: false);

        var sut = new GenerateContentForClass(
            CodeDocumentationTagsGenerator,
            classParameters);

        var generatedCode = sut.Generate();

        Assert.NotNull(generatedCode);
        Assert.Equal(expectedCode, generatedCode);
    }

    [Fact]
    public void Scenario_CreateLocation_ForApiClientEndpoint()
    {
        const string expectedCode =
            @"//------------------------------------------------------------------------------
// This code was auto-generated by ApiGenerator X.X.X.X.
//
// Changes to this file may cause incorrect behavior and will be lost if
// the code is regenerated.
//------------------------------------------------------------------------------
namespace XXX.ApiClient.Generated.Endpoints;

/// <summary>
/// Client Endpoint.
/// Description: Create a new location.
/// Operation: CreateLocation.
/// </summary>
[GeneratedCode(""ApiGenerator"", ""X.X.X.X"")]
public class CreateLocationEndpoint : ICreateLocationEndpoint
{
    private readonly IHttpClientFactory factory;
    private readonly IHttpMessageFactory httpMessageFactory;

    public CreateLocationEndpoint(
        IHttpClientFactory factory,
        IHttpMessageFactory httpMessageFactory)
    {
        this.factory = factory;
        this.httpMessageFactory = httpMessageFactory;
    }

    public async Task<ICreateLocationEndpointResult> ExecuteAsync(
        CreateLocationParameters parameters,
        CancellationToken cancellationToken = default)
    {
        var client = factory.CreateClient(""ApiClient"");

        var requestBuilder = httpMessageFactory.FromTemplate(""/api/v1/locations"");
        requestBuilder.WithBody(parameters.Request);

        using var requestMessage = requestBuilder.Build(HttpMethod.Post);
        using var response = await client.SendAsync(requestMessage, cancellationToken);

        var responseBuilder = httpMessageFactory.FromResponse(response);
        responseBuilder.AddSuccessResponse<Location>(HttpStatusCode.OK);
        responseBuilder.AddErrorResponse<ValidationProblemDetails>(HttpStatusCode.BadRequest);
        responseBuilder.AddErrorResponse<ProblemDetails>(HttpStatusCode.Unauthorized);
        responseBuilder.AddErrorResponse<ProblemDetails>(HttpStatusCode.Forbidden);
        responseBuilder.AddErrorResponse<ProblemDetails>(HttpStatusCode.InternalServerError);

        return await responseBuilder.BuildResponseAsync(x => new CreateLocationEndpointResult(x), cancellationToken);
    }
}";

        var documentationTags = new CodeDocumentationTags(
            "Client Endpoint.\r\nDescription: Create a new location.\r\nOperation: CreateLocation.");

        const string executeMethodContent =
            @"var client = factory.CreateClient(""ApiClient"");

var requestBuilder = httpMessageFactory.FromTemplate(""/api/v1/locations"");
requestBuilder.WithBody(parameters.Request);

using var requestMessage = requestBuilder.Build(HttpMethod.Post);
using var response = await client.SendAsync(requestMessage, cancellationToken);

var responseBuilder = httpMessageFactory.FromResponse(response);
responseBuilder.AddSuccessResponse<Location>(HttpStatusCode.OK);
responseBuilder.AddErrorResponse<ValidationProblemDetails>(HttpStatusCode.BadRequest);
responseBuilder.AddErrorResponse<ProblemDetails>(HttpStatusCode.Unauthorized);
responseBuilder.AddErrorResponse<ProblemDetails>(HttpStatusCode.Forbidden);
responseBuilder.AddErrorResponse<ProblemDetails>(HttpStatusCode.InternalServerError);

return await responseBuilder.BuildResponseAsync(x => new CreateLocationEndpointResult(x), cancellationToken);";

        var constructorParameters = new List<ConstructorParameters>
        {
            new(
                DocumentationTags: null,
                AccessModifier: AccessModifiers.Public,
                GenericTypeName: null,
                TypeName: "CreateLocationEndpoint",
                InheritedClassTypeName: null,
                Parameters: new List<ConstructorParameterBaseParameters>
                {
                    new(
                        GenericTypeName: null,
                        TypeName: "IHttpClientFactory",
                        Name: "factory",
                        DefaultValue: null,
                        PassToInheritedClass: false,
                        CreateAsPrivateReadonlyMember: true,
                        CreateAaOneLiner: false),
                    new(
                        GenericTypeName: null,
                        TypeName: "IHttpMessageFactory",
                        Name: "httpMessageFactory",
                        DefaultValue: null,
                        PassToInheritedClass: false,
                        CreateAsPrivateReadonlyMember: true,
                        CreateAaOneLiner: false),
                }),
        };

        var methodParameters = new List<MethodParameters>
        {
            new(
                DocumentationTags: null,
                Attributes: null,
                AccessModifier: AccessModifiers.PublicAsync,
                ReturnGenericTypeName: "Task",
                ReturnTypeName: "ICreateLocationEndpointResult",
                Name: "ExecuteAsync",
                Parameters: new List<ParameterBaseParameters>
                {
                    new(
                        Attributes: null,
                        GenericTypeName: null,
                        IsGenericListType: false,
                        TypeName: "CreateLocationParameters",
                        IsReferenceType: true,
                        Name: "parameters",
                        DefaultValue: null),
                    new(
                        Attributes: null,
                        GenericTypeName: null,
                        IsGenericListType: false,
                        TypeName: "CancellationToken",
                        IsReferenceType: true,
                        Name: "cancellationToken",
                        DefaultValue: "default"),
                },
                AlwaysBreakDownParameters: false,
                UseExpressionBody: false,
                Content: executeMethodContent),
        };

        var classParameters = new ClassParameters(
            HeaderContent: HeaderContent,
            Namespace: "XXX.ApiClient.Generated.Endpoints",
            DocumentationTags: documentationTags,
            Attributes: AttributesWithGeneratedCode,
            AccessModifier: AccessModifiers.PublicClass,
            ClassTypeName: "CreateLocationEndpoint",
            GenericTypeName: null,
            InheritedClassTypeName: "ICreateLocationEndpoint",
            InheritedGenericClassTypeName: null,
            InheritedInterfaceTypeName: null,
            Constructors: constructorParameters,
            Properties: null,
            Methods: methodParameters,
            GenerateToStringMethod: false);

        var sut = new GenerateContentForClass(
            CodeDocumentationTagsGenerator,
            classParameters);

        var generatedCode = sut.Generate();

        Assert.NotNull(generatedCode);
        Assert.Equal(expectedCode, generatedCode);
    }

    [Fact]
    public void Scenario_CreateLocation_ForApiClientEndpointResult()
    {
        const string expectedCode =
            @"//------------------------------------------------------------------------------
// This code was auto-generated by ApiGenerator X.X.X.X.
//
// Changes to this file may cause incorrect behavior and will be lost if
// the code is regenerated.
//------------------------------------------------------------------------------
namespace XXX.ApiClient.Generated.Endpoints;

/// <summary>
/// Client Endpoint result.
/// Description: Create a new location.
/// Operation: CreateLocation.
/// </summary>
[GeneratedCode(""ApiGenerator"", ""X.X.X.X"")]
public class CreateLocationEndpointResult : EndpointResponse, ICreateLocationEndpointResult
{
    public CreateLocationEndpointResult(EndpointResponse response)
        : base(response)
    {
    }

    public bool IsOk
        => StatusCode == HttpStatusCode.OK;

    public bool IsBadRequest
        => StatusCode == HttpStatusCode.BadRequest;

    public bool IsUnauthorized
        => StatusCode == HttpStatusCode.Unauthorized;

    public bool IsForbidden
        => StatusCode == HttpStatusCode.Forbidden;

    public bool IsInternalServerError
        => StatusCode == HttpStatusCode.InternalServerError;

    public Location OkContent
        => IsOk && ContentObject is Location result
            ? result
            : throw new InvalidOperationException(""Content is not the expected type - please use the IsOk property first."");

    public ValidationProblemDetails BadRequestContent
        => IsBadRequest && ContentObject is ValidationProblemDetails result
            ? result
            : throw new InvalidOperationException(""Content is not the expected type - please use the IsBadRequest property first."");

    public ProblemDetails UnauthorizedContent
        => IsUnauthorized && ContentObject is ProblemDetails result
            ? result
            : throw new InvalidOperationException(""Content is not the expected type - please use the IsUnauthorized property first."");

    public ProblemDetails ForbiddenContent
        => IsForbidden && ContentObject is ProblemDetails result
            ? result
            : throw new InvalidOperationException(""Content is not the expected type - please use the IsForbidden property first."");

    public ProblemDetails InternalServerErrorContent
        => IsInternalServerError && ContentObject is ProblemDetails result
            ? result
            : throw new InvalidOperationException(""Content is not the expected type - please use the IsInternalServerError property first."");
}";

        var documentationTags = new CodeDocumentationTags(
            "Client Endpoint result.\r\nDescription: Create a new location.\r\nOperation: CreateLocation.");

        var constructorParameters = new List<ConstructorParameters>
        {
            new(
                DocumentationTags: null,
                AccessModifier: AccessModifiers.Public,
                GenericTypeName: null,
                TypeName: "CreateLocationEndpointResult",
                InheritedClassTypeName: "base",
                Parameters: new List<ConstructorParameterBaseParameters>
                {
                    new(
                        GenericTypeName: null,
                        TypeName: "EndpointResponse",
                        Name: "response",
                        DefaultValue: null,
                        PassToInheritedClass: true,
                        CreateAsPrivateReadonlyMember: false,
                        CreateAaOneLiner: false),
                }),
        };

        var propertyParameters = new List<PropertyParameters>
        {
            new(
                DocumentationTags: null,
                Attributes: null,
                AccessModifier: AccessModifiers.Public,
                GenericTypeName: null,
                IsGenericListType: false,
                TypeName: "bool",
                IsReferenceType: false,
                Name: "IsOk",
                DefaultValue: null,
                UseAutoProperty: false,
                UseGet: false,
                UseSet: false,
                UseExpressionBody: true,
                Content: "StatusCode == HttpStatusCode.OK"),
            new(
                DocumentationTags: null,
                Attributes: null,
                AccessModifier: AccessModifiers.Public,
                GenericTypeName: null,
                IsGenericListType: false,
                TypeName: "bool",
                IsReferenceType: false,
                Name: "IsBadRequest",
                DefaultValue: null,
                UseAutoProperty: false,
                UseGet: false,
                UseSet: false,
                UseExpressionBody: true,
                Content: "StatusCode == HttpStatusCode.BadRequest"),
            new(
                DocumentationTags: null,
                Attributes: null,
                AccessModifier: AccessModifiers.Public,
                GenericTypeName: null,
                IsGenericListType: false,
                TypeName: "bool",
                IsReferenceType: false,
                Name: "IsUnauthorized",
                DefaultValue: null,
                UseAutoProperty: false,
                UseGet: false,
                UseSet: false,
                UseExpressionBody: true,
                Content: "StatusCode == HttpStatusCode.Unauthorized"),
            new(
                DocumentationTags: null,
                Attributes: null,
                AccessModifier: AccessModifiers.Public,
                GenericTypeName: null,
                IsGenericListType: false,
                TypeName: "bool",
                IsReferenceType: false,
                Name: "IsForbidden",
                DefaultValue: null,
                UseAutoProperty: false,
                UseGet: false,
                UseSet: false,
                UseExpressionBody: true,
                Content: "StatusCode == HttpStatusCode.Forbidden"),
            new(
                DocumentationTags: null,
                Attributes: null,
                AccessModifier: AccessModifiers.Public,
                GenericTypeName: null,
                IsGenericListType: false,
                TypeName: "bool",
                IsReferenceType: false,
                Name: "IsInternalServerError",
                DefaultValue: null,
                UseAutoProperty: false,
                UseGet: false,
                UseSet: false,
                UseExpressionBody: true,
                Content: "StatusCode == HttpStatusCode.InternalServerError"),
            new(
                DocumentationTags: null,
                Attributes: null,
                AccessModifier: AccessModifiers.Public,
                GenericTypeName: null,
                IsGenericListType: false,
                TypeName: "Location",
                IsReferenceType: false,
                Name: "OkContent",
                DefaultValue: null,
                UseAutoProperty: false,
                UseGet: false,
                UseSet: false,
                UseExpressionBody: true,
                Content: "IsOk && ContentObject is Location result\r\n    ? result\r\n    : throw new InvalidOperationException(\"Content is not the expected type - please use the IsOk property first.\")"),
            new(
                DocumentationTags: null,
                Attributes: null,
                AccessModifier: AccessModifiers.Public,
                GenericTypeName: null,
                IsGenericListType: false,
                TypeName: "ValidationProblemDetails",
                IsReferenceType: false,
                Name: "BadRequestContent",
                DefaultValue: null,
                UseAutoProperty: false,
                UseGet: false,
                UseSet: false,
                UseExpressionBody: true,
                Content: "IsBadRequest && ContentObject is ValidationProblemDetails result\r\n    ? result\r\n    : throw new InvalidOperationException(\"Content is not the expected type - please use the IsBadRequest property first.\")"),
            new(
                DocumentationTags: null,
                Attributes: null,
                AccessModifier: AccessModifiers.Public,
                GenericTypeName: null,
                IsGenericListType: false,
                TypeName: "ProblemDetails",
                IsReferenceType: false,
                Name: "UnauthorizedContent",
                DefaultValue: null,
                UseAutoProperty: false,
                UseGet: false,
                UseSet: false,
                UseExpressionBody: true,
                Content: "IsUnauthorized && ContentObject is ProblemDetails result\r\n    ? result\r\n    : throw new InvalidOperationException(\"Content is not the expected type - please use the IsUnauthorized property first.\")"),
            new(
                DocumentationTags: null,
                Attributes: null,
                AccessModifier: AccessModifiers.Public,
                GenericTypeName: null,
                IsGenericListType: false,
                TypeName: "ProblemDetails",
                IsReferenceType: false,
                Name: "ForbiddenContent",
                DefaultValue: null,
                UseAutoProperty: false,
                UseGet: false,
                UseSet: false,
                UseExpressionBody: true,
                Content: "IsForbidden && ContentObject is ProblemDetails result\r\n    ? result\r\n    : throw new InvalidOperationException(\"Content is not the expected type - please use the IsForbidden property first.\")"),
            new(
                DocumentationTags: null,
                Attributes: null,
                AccessModifier: AccessModifiers.Public,
                GenericTypeName: null,
                IsGenericListType: false,
                TypeName: "ProblemDetails",
                IsReferenceType: false,
                Name: "InternalServerErrorContent",
                DefaultValue: null,
                UseAutoProperty: false,
                UseGet: false,
                UseSet: false,
                UseExpressionBody: true,
                Content: "IsInternalServerError && ContentObject is ProblemDetails result\r\n    ? result\r\n    : throw new InvalidOperationException(\"Content is not the expected type - please use the IsInternalServerError property first.\")"),
        };

        var classParameters = new ClassParameters(
            HeaderContent: HeaderContent,
            Namespace: "XXX.ApiClient.Generated.Endpoints",
            DocumentationTags: documentationTags,
            Attributes: AttributesWithGeneratedCode,
            AccessModifier: AccessModifiers.PublicClass,
            ClassTypeName: "CreateLocationEndpointResult",
            GenericTypeName: null,
            InheritedClassTypeName: "EndpointResponse",
            InheritedGenericClassTypeName: null,
            InheritedInterfaceTypeName: "ICreateLocationEndpointResult",
            Constructors: constructorParameters,
            Properties: propertyParameters,
            Methods: null,
            GenerateToStringMethod: false);

        var sut = new GenerateContentForClass(
            CodeDocumentationTagsGenerator,
            classParameters);

        var generatedCode = sut.Generate();

        Assert.NotNull(generatedCode);
        Assert.Equal(expectedCode, generatedCode);
    }
}